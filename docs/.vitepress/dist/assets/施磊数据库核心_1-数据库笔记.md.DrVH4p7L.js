import{_ as i,c as a,o as l,ae as t}from"./chunks/framework.MzfCtVj-.js";const n="/mycppnoteweb/assets/image-20250503233856289.CXXW-Nzw.png",h="/mycppnoteweb/assets/image-20250510091316326.cw2ejtMQ.png",e="/mycppnoteweb/assets/image-20250510113513694.oonQ20tE.png",E="/mycppnoteweb/assets/image-20250510131529738.Brw-eEen.png",p="/mycppnoteweb/assets/image-20250510134252131.DuALWpbD.png",k="/mycppnoteweb/assets/image-20250510145917847.KphINccZ.png",r="/mycppnoteweb/assets/image-20250510151309235.BcQ8vMq9.png",d="/mycppnoteweb/assets/image-20250510152930275.BhhgjTfV.png",o="/mycppnoteweb/assets/image-20250510162648922.CSGNzDSs.png",g="/mycppnoteweb/assets/image-20250510163045097.B2JKHzuC.png",c="/mycppnoteweb/assets/image-20250511211756451.D3G4Egeu.png",B="/mycppnoteweb/assets/image-20250511222831269.DA1o_kvJ.png",A="/mycppnoteweb/assets/image-20250511223303731.Bn_Ax_iv.png",y="/mycppnoteweb/assets/image-20250512102609720.DVarNE5r.png",u="/mycppnoteweb/assets/image-20250512213543252.BhgcVTTN.png",F="/mycppnoteweb/assets/image-20250513092239168.C5NYy7Ie.png",C="/mycppnoteweb/assets/image-20250513094943122.WbMDZAZz.png",b="/mycppnoteweb/assets/image-20250513110839483.DFm8XiYx.png",D="/mycppnoteweb/assets/image-20250513140347247.Ch7lXrLZ.png",m="/mycppnoteweb/assets/image-20250513181235778.CCs_nEdx.png",q="/mycppnoteweb/assets/image-20250513193018639.D-VyrRTc.png",v="/mycppnoteweb/assets/image-20250513222905869.CJjTaJNB.png",x="/mycppnoteweb/assets/image-20250513224937782.CJCoUsiQ.png",f="/mycppnoteweb/assets/image-20250513232902027.CXnMBG_1.png",L="/mycppnoteweb/assets/image-20250514171436578.qetBkkNs.png",P="/mycppnoteweb/assets/image-20250514172622330.twRO3D1d.png",I="/mycppnoteweb/assets/image-20250514174120287.GDQmxJT5.png",S="/mycppnoteweb/assets/image-20250515083926198.rWpYUi9k.png",N="/mycppnoteweb/assets/image-20250515112855758.CI41MbmN.png",R="/mycppnoteweb/assets/image-20250515152318171.D9wEsXyc.png",M="/mycppnoteweb/assets/image-20250515153410837.dOJ37dXo.png",O="/mycppnoteweb/assets/image-20250515163014467.k5kqvvhs.png",T="/mycppnoteweb/assets/image-20250515173252412.CZ0ADEy_.png",_="/mycppnoteweb/assets/image-20250515195730701.CkCxlv8Q.png",U="/mycppnoteweb/assets/image-20250515215645959.Do-IUbfY.png",Q="/mycppnoteweb/assets/image-20250515215045460.Br9FXVfa.png",w="/mycppnoteweb/assets/image-20250515232648783.COinR61P.png",H="/mycppnoteweb/assets/image-20250515233402222.Fd9tY7m6.png",G="/mycppnoteweb/assets/image-20250516085209275.DwEoZZMA.png",Y="/mycppnoteweb/assets/image-20250516101217182.B-3MK-HL.png",W="/mycppnoteweb/assets/image-20250516090613918.BQPGKMJT.png",X="/mycppnoteweb/assets/image-20250516094742970.BTccEtBO.png",V="/mycppnoteweb/assets/image-20250516113624122.C3lvrtBv.png",K="/mycppnoteweb/assets/image-20250516113642551.5b5NdT-f.png",J="/mycppnoteweb/assets/image-20250516114422807.REyuKjB6.png",z="/mycppnoteweb/assets/image-20250516121518231.BCr8NYkD.png",j="/mycppnoteweb/assets/image-20250516122049651.Db1U8MLS.png",$="/mycppnoteweb/assets/image-20250516151336822.zwaztBQm.png",Z="/mycppnoteweb/assets/image-20250516152149806.D4nlEos_.png",ss="/mycppnoteweb/assets/image-20250516222351161.D1g_1NZD.png",is="/mycppnoteweb/assets/image-20250516222446178.BLvt24yO.png",as="/mycppnoteweb/assets/image-20250517091140870.Cc4cveBH.png",ls="/mycppnoteweb/assets/image-20250517090323804.D-eMKzvG.png",ts="/mycppnoteweb/assets/image-20250517112619284.CBQfm2gh.png",ns="/mycppnoteweb/assets/image-20250517104505325.CZClQCri.png",hs="/mycppnoteweb/assets/image-20250517110415775.Cad9tCH3.png",es="/mycppnoteweb/assets/image-20250517111202209.BAF9TABL.png",Es="/mycppnoteweb/assets/image-20250517141020083.Bhqi4GjZ.png",ps="/mycppnoteweb/assets/image-20250517173754010.ByVcKFj1.png",ks="/mycppnoteweb/assets/image-20250517174100688._CmbkVft.png",rs="/mycppnoteweb/assets/image-20250517214804528.BUc-X7Hw.png",ds="/mycppnoteweb/assets/image-20250517215644931.CHjBUbJU.png",os="/mycppnoteweb/assets/image-20250517215214058.CFuzw18A.png",bs=JSON.parse('{"title":"mysql版本","description":"","frontmatter":{},"headers":[],"relativePath":"施磊数据库核心/1-数据库笔记.md","filePath":"施磊数据库核心/1-数据库笔记.md"}'),gs={name:"施磊数据库核心/1-数据库笔记.md"};function cs(Bs,s,As,ys,us,Fs){return l(),a("div",null,s[0]||(s[0]=[t('<ul><li><strong>搭配老师讲义pdf</strong></li></ul><h1 id="mysql%E7%89%88%E6%9C%AC" tabindex="-1">mysql版本 <a class="header-anchor" href="#mysql版本" aria-label="Permalink to &quot;mysql版本&quot;">​</a></h1><p>这是 5.1-8.0 结合的</p><p>有时间 看看 新版本特性</p><blockquote><p>出现 优化的 都看看 搜优化</p></blockquote><h1 id="%E8%AF%BE%E7%A8%8B%E5%A4%A7%E7%BA%B2" tabindex="-1">课程大纲 <a class="header-anchor" href="#课程大纲" aria-label="Permalink to &quot;课程大纲&quot;">​</a></h1><p>pdf有大纲</p><p>课程目标是让你不仅“能用 MySQL”，更能“理解其原理”，从 CRUD 入门，到深入原理、优化与架构设计，全面建立 MySQL 技术栈。</p><h2 id="%E6%95%B0%E6%8D%AE%E5%BA%93CRUD" tabindex="-1">数据库CRUD <a class="header-anchor" href="#数据库CRUD" aria-label="Permalink to &quot;数据库CRUD&quot;">​</a></h2><p><strong>C - Create（创建）</strong>：插入新数据到数据库中，比如新增一条用户记录。</p><p><strong>R - Read（读取）</strong>：从数据库中查询数据，比如查找某个用户的信息。</p><p><strong>U - Update（更新）</strong>：修改数据库中的已有数据，比如更改用户的邮箱地址。</p><p><strong>D - Delete（删除）</strong>：从数据库中删除数据，比如删除一个已经注销的用户记录。</p><p>也就是 <strong>增删改查</strong></p><h2 id="%E8%AF%BE%E7%A8%8B%E4%B8%BB%E8%A6%81%E5%86%85%E5%AE%B9%EF%BC%88%E5%8D%81%E4%B8%AA%E6%A8%A1%E5%9D%97%EF%BC%89" tabindex="-1"><strong>课程主要内容（十个模块）</strong> <a class="header-anchor" href="#课程主要内容（十个模块）" aria-label="Permalink to &quot;**课程主要内容（十个模块）**&quot;">​</a></h2><ol><li><strong>SQL 语法扩展</strong> 范式设计、表设计、分页、分组、排序、多表连接、子查询、复杂查询性能优化等。</li><li><strong>索引机制</strong><ul><li>索引的本质是数据结构（如 B+ 树、哈希索引、自适应哈希索引等）</li><li>聚集索引 vs 非聚集索引，主键索引 vs 辅助索引</li><li>索引在查询优化中的作用和实践技巧</li></ul></li><li><strong>存储引擎</strong><ul><li>MySQL 支持的多种插件式存储引擎（重点：InnoDB）</li><li>各引擎之间的差异及使用场景</li></ul></li><li><strong>事务处理</strong><ul><li>事务的四大特性（ACID）</li><li>脏读、不可重复读、幻读等概念</li><li>四种隔离级别、MVCC 实现机制</li></ul></li><li><strong>锁机制</strong><ul><li>共享锁、排他锁、间隙锁、意向锁等</li><li>锁机制的底层原理及使用场景</li></ul></li><li><strong>MySQL 优化</strong><ul><li>SQL 优化：如何写高性能 SQL</li><li>应用层优化：如何减少对数据库的压力</li><li>Server 层优化：参数配置、线程池优化等</li></ul></li><li><strong>日志系统</strong><ul><li>四大日志：错误日志、查询日志、慢查询日志、二进制日志</li><li>存储引擎日志：Redo log（重做日志）、Undo log（回滚日志）</li></ul></li><li><strong>集群架构</strong><ul><li>主从复制、读写分离、分库分表等机制</li><li>数据库高并发场景下的处理方案</li></ul></li><li><strong>数据备份与恢复</strong><ul><li>常见备份策略与恢复操作</li><li>如何保障数据的完整性和恢复能力</li></ul></li><li><strong>源码解析（进阶）</strong></li></ol><ul><li>源码入口分析，帮助有兴趣深入源码的同学入门</li><li>适合想深入了解数据库内核或从事数据库开发工作的同学</li></ul><hr><p><strong>实践与工具支持</strong></p><ul><li>实操为主：每个核心知识点都配有实际操作演示，鼓励边学边练。</li><li>环境搭建： <ul><li>推荐使用 CentOS7 或 RHEL 的服务器版</li><li>Linux 环境使用 VMware 虚拟机，课程中有详细安装说明</li></ul></li><li>数据库工具介绍：包含 GUI 工具的使用教学</li></ul><h1 id="Mysql%E7%9F%A5%E8%AF%86%E9%9D%A2%E6%8B%93%E5%B1%95" tabindex="-1">Mysql知识面拓展 <a class="header-anchor" href="#Mysql知识面拓展" aria-label="Permalink to &quot;Mysql知识面拓展&quot;">​</a></h1><h3 id="%E4%B8%80%E3%80%81%E5%AD%A6%E4%B9%A0%E6%8A%80%E6%9C%AF%E7%9A%84%E7%90%86%E5%BF%B5%EF%BC%9A%E5%B9%BF%E5%BA%A6%20%2B%20%E6%B7%B1%E5%BA%A6" tabindex="-1"><strong>一、学习技术的理念：广度 + 深度</strong> <a class="header-anchor" href="#一、学习技术的理念：广度 %2B 深度" aria-label="Permalink to &quot;**一、学习技术的理念：广度 + 深度**&quot;">​</a></h3><ul><li>不要只做“仓库型”的知识输入，要有广度，也要有重点的深度。</li><li>面试或交流中，不能只会 MySQL，别人可能问你 NoSQL、Oracle、SQLite(安卓,进程类数据库)、分布式数据库等。</li></ul><blockquote><p><strong>进程类数据库:</strong></p><p><strong>数据库运行在应用程序的进程内部</strong>，也就是说，它不是一个独立的数据库服务器，而是直接作为一个库被嵌入到我们的程序里。</p></blockquote><blockquote><p><strong>NoSQL 不是指某一个数据库，而是一类数据库的统称</strong>。</p><p>这个名字的意思呢，就是 “Not Only SQL”——不仅仅是 SQL，意思是这些数据库并不依赖传统的关系模型和结构化查询语言（SQL）来进行数据管理。</p><p><strong>最大的特点</strong>就是灵活！扩展性强！更适合一些大规模、高并发、快速迭代的场景。</p></blockquote><hr><h3 id="%E4%BA%8C%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E7%B1%BB" tabindex="-1"><strong>二、数据库分类</strong> <a class="header-anchor" href="#二、数据库分类" aria-label="Permalink to &quot;**二、数据库分类**&quot;">​</a></h3><ol><li><strong>关系型数据库（RDBMS）</strong><ul><li>特点：结构化表格（行、列），支持 SQL 语言。</li><li>常见产品： <ul><li>MySQL（开源，广泛使用）</li><li>SQL Server（微软，商业）</li><li>Oracle（甲骨文，商业，功能强大）</li><li>DB2（IBM，安全性强，适用于金融）</li><li>MariaDB（MySQL 的“继任者”，原作者开发）</li></ul></li><li>应用：传统业务系统、大多数互联网公司</li></ul></li><li><strong>非关系型数据库（NoSQL）</strong><ul><li>特点：不使用 SQL，不是表格结构，多为 KV、文档、列族、图结构等。</li><li>常见产品： <ul><li>Redis、RocksDB（KV 存储）</li><li>MongoDB（文档型）</li><li>HBase（列式数据库，适用于大数据）</li></ul></li><li>应用：高并发、高扩展性的互联网场景</li></ul></li><li><strong>轻量级数据库</strong><ul><li>SQLite：嵌入式数据库，常用于 Android、IoT 等。</li></ul></li><li><strong>新兴数据库（扩展了解）</strong><ul><li><strong>SeLf：分布式开源数据库，C++开发，建议深入源码学习。</strong></li></ul></li></ol><hr><h3 id="%E4%B8%89%E3%80%81MySQL%20%E7%9A%84%E7%89%B9%E7%82%B9%E4%B8%8E%E7%94%9F%E6%80%81" tabindex="-1"><strong>三、MySQL 的特点与生态</strong> <a class="header-anchor" href="#三、MySQL 的特点与生态" aria-label="Permalink to &quot;**三、MySQL 的特点与生态**&quot;">​</a></h3><ul><li>免费开源（社区版）</li><li>大厂广泛使用并进行二次开发</li><li>插件式存储引擎（InnoDB、MyISAM、Memory 等）</li><li><strong>支持 CS 模型（客户端-服务器）</strong></li><li>被 Oracle 收购，但仍有 MariaDB 作为“备份方案”</li><li>企业版与社区版区别：企业版功能更全，适合生产系统</li></ul><hr><h3 id="%E5%9B%9B%E3%80%81%E4%B8%8E%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AF%B9%E6%AF%94" tabindex="-1"><strong>四、与其他数据库的对比</strong> <a class="header-anchor" href="#四、与其他数据库的对比" aria-label="Permalink to &quot;**四、与其他数据库的对比**&quot;">​</a></h3><ul><li><strong>MySQL vs SQL Server / Oracle</strong>： <ul><li>MySQL 更轻量、更适合 Web 场景，开源灵活</li><li>Oracle、SQL Server 功能更强但商业化严重</li></ul></li><li><strong>MySQL vs SQLite</strong>： <ul><li>SQLite 是<strong>进程内数据库</strong>，<strong>不支持多进程</strong>并发访问</li><li>MySQL 是典型的网络服务型数据库，支持多进程连接</li></ul></li><li><strong>MySQL vs NoSQL</strong>： <ul><li>MySQL 是结构化，NoSQL 是灵活多样</li><li>NoSQL 不使用 SQL 语法，存储模型多样</li></ul></li></ul><hr><h3 id="%E4%BA%94%E3%80%81%E4%BB%8E%E4%B8%80%E4%B8%AA%E7%82%B9%E6%B7%B1%E5%85%A5%EF%BC%9A%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E" tabindex="-1"><strong>五、从一个点深入：存储引擎</strong> <a class="header-anchor" href="#五、从一个点深入：存储引擎" aria-label="Permalink to &quot;**五、从一个点深入：存储引擎**&quot;">​</a></h3><ul><li>面试中从广度切入，深入某个熟悉点（比如 InnoDB）</li><li>展开内容包括： <ul><li>数据页、索引结构（B+ 树）</li><li>引擎的事务支持（ACID）</li><li>行锁、表锁等机制</li></ul></li></ul><hr><h3 id="%E5%85%AD%E3%80%81MySQL%20%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B" tabindex="-1"><strong>六、MySQL 网络模型</strong> <a class="header-anchor" href="#六、MySQL 网络模型" aria-label="Permalink to &quot;**六、MySQL 网络模型**&quot;">​</a></h3><ul><li>使用的是：<strong>select + 线程池</strong>（非 epoll） <ul><li><strong>为什么不用 epoll？</strong><ul><li>因为磁盘 IO 是瓶颈，即使网络响应快，磁盘读写慢也拖住了性能</li><li>网络模型不需要那么“高性能”，关键瓶颈在磁盘 IO</li><li>速度能匹配上就行了</li></ul></li><li>多进程并发下也能高效处理请求</li></ul></li></ul><hr><h3 id="%E4%B8%83%E3%80%81%E5%AD%A6%E4%B9%A0%E5%BB%BA%E8%AE%AE%E4%B8%8E%E6%80%9D%E7%BB%B4%E6%96%B9%E6%B3%95" tabindex="-1"><strong>七、学习建议与思维方法</strong> <a class="header-anchor" href="#七、学习建议与思维方法" aria-label="Permalink to &quot;**七、学习建议与思维方法**&quot;">​</a></h3><ul><li>技术要有串联思维，从广度跳到深度</li><li>不要求所有点都精通，但要做到“提到就能说、熟悉的深入聊”</li><li>典型思考方式：<strong>从一个问题出发，联想到背后的设计逻辑与技术限制</strong></li></ul><h1 id="MySQL%E5%AE%89%E8%A3%85" tabindex="-1">MySQL安装 <a class="header-anchor" href="#MySQL安装" aria-label="Permalink to &quot;MySQL安装&quot;">​</a></h1><h2 id="win%E5%AE%89%E8%A3%85-%E7%95%A5" tabindex="-1">win安装-略 <a class="header-anchor" href="#win安装-略" aria-label="Permalink to &quot;win安装-略&quot;">​</a></h2><h2 id="linux%E5%AE%89%E8%A3%85-%E7%95%A5" tabindex="-1">linux安装-略 <a class="header-anchor" href="#linux安装-略" aria-label="Permalink to &quot;linux安装-略&quot;">​</a></h2><p><strong>集群里 有记录</strong></p><h2 id="%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E4%B8%8E%E6%A6%82%E5%BF%B5" tabindex="-1">基础命令与概念 <a class="header-anchor" href="#基础命令与概念" aria-label="Permalink to &quot;基础命令与概念&quot;">​</a></h2><ul><li><p>登录后可查看已有数据库：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SHOW DATABASES;</span></span></code></pre></div></li><li><p>区分术语：</p><ul><li>MySQL 是 <strong>RDBMS（关系型数据库管理系统）</strong></li><li>system databases 如：<code>mysql</code>、<code>information_schema</code> 等叫“数据库”（database）</li><li>数据库中包含多个“表”（table），表由字段和记录组成</li></ul></li></ul><p><img src="'+n+`" alt="image-20250503233856289"></p><h1 id="Mysql%E9%85%8D%E7%BD%AE%E7%9B%AE%E5%BD%95" tabindex="-1">Mysql配置目录 <a class="header-anchor" href="#Mysql配置目录" aria-label="Permalink to &quot;Mysql配置目录&quot;">​</a></h1><h2 id="MySQL%20%E9%BB%98%E8%AE%A4%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84" tabindex="-1">MySQL 默认目录结构 <a class="header-anchor" href="#MySQL 默认目录结构" aria-label="Permalink to &quot;MySQL 默认目录结构&quot;">​</a></h2><ol><li><strong>默认安装目录：</strong><ul><li>通常位于 <code>/var/lib/mysql</code>。</li><li>是 MySQL 的 <strong>数据目录</strong>，保存所有数据库和表的数据文件。</li></ul></li><li><strong>数据目录结构说明：</strong><ul><li>每个数据库对应一个子目录（类似 Windows 下结构）。</li><li>每张表通常包含多个文件，如 <code>.frm</code>（旧版本表结构）、<code>.ibd</code>（InnoDB 数据文件）、<code>.MYD</code>、<code>.MYI</code> 等（MyISAM）。</li><li>不同的存储引擎使用不同后缀。</li></ul></li></ol><hr><h2 id="MySQL%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6" tabindex="-1">MySQL 配置文件 <a class="header-anchor" href="#MySQL 配置文件" aria-label="Permalink to &quot;MySQL 配置文件&quot;">​</a></h2><ol><li><p><strong>配置文件位置：</strong></p><ul><li>通常在 <code>/etc/my.cnf</code>，有些系统中可能不存在，需要手动创建。--- 或者在 <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>--ubuntu22.04</li><li>ubuntu22.04 <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>（服务器配置） <code>/etc/mysql/mysql.conf.d/mysql.cnf</code>（客户端配置）</li><li>可使用 <code>touch /etc/my.cnf</code> 创建，并使用编辑器（如 vim）添加内容。</li></ul></li><li><p><strong>常见配置项示例（放在 <code>[mysqld]</code> 区块）：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[mysqld]</span></span>
<span class="line"><span>datadir=/var/lib/mysql</span></span>
<span class="line"><span>log-error=/var/log/mysqld.log</span></span>
<span class="line"><span>character-set-server=utf8    # 修改 编码格式</span></span>
<span class="line"><span>default-storage-engine=InnoDB # 默认存储引擎</span></span></code></pre></div><ul><li>修改配置后，需使用 <code>systemctl restart mysqld</code> 重启服务。</li></ul><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><h2 id="%E8%A1%A5%E5%85%85" tabindex="-1">补充 <a class="header-anchor" href="#补充" aria-label="Permalink to &quot;补充&quot;">​</a></h2><ol><li><p><strong><code>mysqld</code></strong> 是 MySQL 服务器的实际守护进程名称（<code>d</code> 表示 daemon），常见于 RHEL/CentOS 或手动编译安装的环境。</p></li><li><p><strong><code>mysql</code></strong> 是某些发行版（如 Ubuntu/Debian）的服务别名，简化了操作，但底层调用的仍是 <code>mysqld</code> 进程。</p></li><li><p><strong>MariaDB</strong> 可能使用 <code>mysql</code> 或 <code>mariadb</code> 作为服务名以保持兼容性。</p></li><li><p><code>systemctl</code> 命令 可以自动补全</p></li><li><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>systemctl restart mysql</span></span></code></pre></div></li></ol><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>特性</strong></th><th style="text-align:left;"><strong>systemctl</strong> (Systemd)</th><th style="text-align:left;"><strong>service</strong> (SysVinit)</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>所属体系</strong></td><td style="text-align:left;">现代 Linux（Ubuntu 16.04+/CentOS 7+）</td><td style="text-align:left;">传统 Linux（旧版本）</td></tr><tr><td style="text-align:left;"><strong>配置文件</strong></td><td style="text-align:left;"><code>.service</code> 文件（如 <code>mysql.service</code>）</td><td style="text-align:left;"><code>/etc/init.d/</code> 下的脚本</td></tr><tr><td style="text-align:left;"><strong>功能</strong></td><td style="text-align:left;">更强大（依赖管理、日志集成等）</td><td style="text-align:left;">基础功能（启动/停止/状态）</td></tr><tr><td style="text-align:left;"><strong>命令示例</strong></td><td style="text-align:left;"><code>sudo systemctl restart mysql</code></td><td style="text-align:left;"><code>sudo service mysql restart</code></td></tr><tr><td style="text-align:left;"><strong>日志查看</strong></td><td style="text-align:left;"><code>journalctl -u mysql</code></td><td style="text-align:left;">需手动查 <code>/var/log/</code> 文件</td></tr></tbody></table></div></li></ol><hr><h2 id="%E6%94%AF%E6%8C%81%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E9%85%8D%E7%BD%AE" tabindex="-1">支持远程连接配置 <a class="header-anchor" href="#支持远程连接配置" aria-label="Permalink to &quot;支持远程连接配置&quot;">​</a></h2><p><img src="`+h+`" alt="image-20250510091316326"></p><ol><li><p><strong>登录 MySQL 并查看用户权限：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysql -u root -p</span></span>
<span class="line"><span>USE mysql;</span></span>
<span class="line"><span>SELECT Host, User FROM user;</span></span></code></pre></div></li><li><p><strong>默认情况：</strong></p><ul><li>root 用户默认只能通过 <code>localhost</code> 登录，远程连接被拒绝（错误：<code>host is not allowed to connect</code>）。</li></ul></li><li><p><strong>授予远程连接权限：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39; WITH GRANT OPTION;</span></span>
<span class="line"><span>FLUSH PRIVILEGES;</span></span></code></pre></div><ul><li><code>@&#39;%&#39;</code> 表示允许任意 IP 登录。---- % 可修为 <strong>特定ip</strong></li><li><code>FLUSH PRIVILEGES</code> 必须执行，刷新权限才会生效。</li></ul></li><li><p><strong>远程登录命令示例：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mysql -h &lt;IP地址&gt; -P 3306 -u root -p</span></span></code></pre></div></li><li><p><strong>注意密码策略：</strong></p><ul><li>如果提示密码不符合策略（如太简单），可临时放宽密码强度策略，或者设置更复杂的密码。</li></ul></li></ol><h2 id="%E9%BB%98%E8%AE%A4%E5%A4%8D%E6%9D%82%E5%AF%86%E7%A0%81%E9%97%AE%E9%A2%98" tabindex="-1">默认复杂密码问题 <a class="header-anchor" href="#默认复杂密码问题" aria-label="Permalink to &quot;默认复杂密码问题&quot;">​</a></h2><p><code>set global validate_password_policy=0;</code></p><ul><li><strong>作用</strong>：将密码策略设为最低强度（<code>0</code>=只检查长度）。</li><li><strong>其他可选值</strong>： <ul><li><code>1</code>（默认）：需包含数字、大小写字母、特殊字符。</li><li><code>2</code>：严格模式（额外字典检查）。</li></ul></li></ul><p><code>set global validate_password_length=1;</code></p><ul><li><strong>作用</strong>：允许密码最小长度为 1 个字符（默认通常为 8）。</li></ul><h2 id="%E5%AE%9E%E7%94%A8%E5%BB%BA%E8%AE%AE" tabindex="-1">实用建议 <a class="header-anchor" href="#实用建议" aria-label="Permalink to &quot;实用建议&quot;">​</a></h2><ul><li><strong>真实环境中</strong>应使用复杂密码，并<strong>仅为特定 IP 开放远程</strong>权限。</li><li>熟练掌握配置文件的位置与作用，对 MySQL 管理尤为重要。</li><li><strong>操作习惯建议：</strong> 配置修改后重启服务、权限修改后刷新权限。</li></ul><h1 id="mysql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" tabindex="-1">mysql数据类型 <a class="header-anchor" href="#mysql数据类型" aria-label="Permalink to &quot;mysql数据类型&quot;">​</a></h1><h2 id="%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E9%87%8D%E8%A7%86%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E9%80%89%E6%8B%A9%EF%BC%9F" tabindex="-1">为什么要重视数据类型选择？ <a class="header-anchor" href="#为什么要重视数据类型选择？" aria-label="Permalink to &quot;为什么要重视数据类型选择？&quot;">​</a></h2><ul><li><strong>数据库是最先遇到性能瓶颈的环节</strong>，因其涉及磁盘 I/O。</li><li>字段类型选择过大，浪费存储空间，增加磁盘读取开销。</li><li><strong>合理的数据类型选择 = 更少的 I/O = 更高的性能</strong>。</li><li>例如：相同1000万行，如果字段选型合理，可能只占 1GB 而不是 2GB。</li></ul><hr><h2 id="%E6%95%B4%E5%9E%8B%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B%EF%BC%88Numeric%20Types%EF%BC%89" tabindex="-1">整型数值类型（Numeric Types） <a class="header-anchor" href="#整型数值类型（Numeric Types）" aria-label="Permalink to &quot;整型数值类型（Numeric Types）&quot;">​</a></h2><table tabindex="0"><thead><tr><th>类型</th><th>字节数</th><th>有符号范围</th><th>无符号范围</th></tr></thead><tbody><tr><td><code>TINYINT</code></td><td>1</td><td>-128 ~ 127</td><td>0 ~ 255</td></tr><tr><td><code>SMALLINT</code></td><td>2</td><td>-32,768 ~ 32,767</td><td>0 ~ 65,535</td></tr><tr><td><code>MEDIUMINT</code></td><td>3</td><td>-8,388,608 ~ 8,388,607</td><td>0 ~ 16,777,215</td></tr><tr><td><code>INT</code></td><td>4</td><td>-2^31 ~ 2^31-1</td><td>0 ~ 2^32-1</td></tr><tr><td><code>BIGINT</code></td><td>8</td><td>-2^63 ~ 2^63-1</td><td>0 ~ 2^64-1</td></tr></tbody></table><p><strong>实际建议</strong>：</p><ul><li>年龄：<code>TINYINT UNSIGNED</code> 足够（0~255）。</li><li>身份证号、手机号：用字符串存储，避免整数溢出或丢失精度。</li></ul><hr><h2 id="%E6%B5%AE%E7%82%B9%E6%95%B0%E4%B8%8E%E9%AB%98%E7%B2%BE%E5%BA%A6%E8%AE%A1%E7%AE%97" tabindex="-1">浮点数与高精度计算 <a class="header-anchor" href="#浮点数与高精度计算" aria-label="Permalink to &quot;浮点数与高精度计算&quot;">​</a></h2><table tabindex="0"><thead><tr><th>类型</th><th>字节</th><th>精度（有效位）</th><th>场景</th></tr></thead><tbody><tr><td><code>FLOAT</code></td><td>4</td><td>约7位</td><td>对精度要求不高的场景</td></tr><tr><td><code>DOUBLE</code></td><td>8</td><td>约15位</td><td>普通浮点计算</td></tr><tr><td><code>DECIMAL(m,d)</code></td><td>可变</td><td>28位以上</td><td>高精度金融计算（推荐）</td></tr></tbody></table><p>⚠️注意：</p><ul><li><code>FLOAT</code> / <code>DOUBLE</code> 精度可能丢失，<strong>不会报错</strong>。</li><li><code>DECIMAL</code> 底层用字符串存储，计算精度高，溢出时会<strong>报错提醒</strong>。</li></ul><hr><h2 id="%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B" tabindex="-1">字符串类型 <a class="header-anchor" href="#字符串类型" aria-label="Permalink to &quot;字符串类型&quot;">​</a></h2><p>更多见 pdf</p><table tabindex="0"><thead><tr><th>类型</th><th>特点</th><th>最大长度</th></tr></thead><tbody><tr><td><code>CHAR(n)</code></td><td>固定长度，占满n字节</td><td>最多255字节</td></tr><tr><td><code>VARCHAR(n)</code></td><td>可变长度，更节省空间</td><td>最多65535字节</td></tr><tr><td><code>TEXT</code>--类似INIT多种</td><td>大文本存储，按长度分为多个级别</td><td>最多4GB（longtext）</td></tr><tr><td><code>BLOB</code></td><td>二进制数据，如图片、音频等</td><td>最多4GB（longblob）</td></tr></tbody></table><p>常见误区： <strong>面试</strong></p><ul><li><code>INT(4)</code> 里的 <strong>(4)</strong> 表示显示宽度，不影响存储大小。</li><li><code>VARCHAR(n)</code> 的 <strong>n</strong> 是字符数（字符 != 字节，UTF-8中文通常是3字节）。</li></ul><hr><h2 id="%E6%97%B6%E9%97%B4%E4%B8%8E%E6%97%A5%E6%9C%9F%E7%B1%BB%E5%9E%8B" tabindex="-1">时间与日期类型 <a class="header-anchor" href="#时间与日期类型" aria-label="Permalink to &quot;时间与日期类型&quot;">​</a></h2><table tabindex="0"><thead><tr><th>类型</th><th>说明</th><th>适用情况</th></tr></thead><tbody><tr><td><code>DATE</code></td><td>年-月-日</td><td>只存日期</td></tr><tr><td><code>DATETIME</code></td><td>年月日+时分秒</td><td>通常用于记录时间点--需要手动更新</td></tr><tr><td><code>TIMESTAMP</code></td><td>与时区相关，自动更新</td><td>不推荐用作更新时间戳--自动更新时间</td></tr><tr><td><code>YEAR</code></td><td>只存年份（1901-2155）</td><td>不推荐</td></tr><tr><td>推荐：使用整型字段存储 Unix 时间戳（<code>INT</code> 存 <code>time()</code>）</td><td></td><td></td></tr></tbody></table><blockquote><h3 id="TIMESTAMP%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%8E%A8%E8%8D%90%3F" tabindex="-1"><code>TIMESTAMP</code>为什么不推荐? <a class="header-anchor" href="#TIMESTAMP为什么不推荐%3F" aria-label="Permalink to &quot;\`TIMESTAMP\`为什么不推荐?&quot;">​</a></h3><p>实时更新, 涉及太多 磁盘io, 为了性能, 最好少 磁盘io</p><p>尽量 让 mysql 做最少的事</p></blockquote><h2 id="%E6%97%B6%E9%97%B4%E6%88%B3--%E7%94%A8%E7%9A%84%E5%A4%9A" tabindex="-1">时间戳--用的多 <a class="header-anchor" href="#时间戳--用的多" aria-label="Permalink to &quot;时间戳--用的多&quot;">​</a></h2><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">select</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> unix_timestamp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><p>显示 自 1970年 开始 到现在的 秒数</p><p>可以很方便的 转换为 当前时间</p><h2 id="enum%E5%92%8Cset" tabindex="-1">enum和set <a class="header-anchor" href="#enum和set" aria-label="Permalink to &quot;enum和set&quot;">​</a></h2><p>这两个类型，都是<strong>限制该字段只能取固定的值</strong>，但是<strong>枚举字段只能取一个唯一的值</strong>，而<strong>集合字段可以取</strong><strong>任意个值。</strong></p><p>比如 性别, 男女</p><h2 id="%E8%AE%BE%E8%AE%A1%E5%BB%BA%E8%AE%AE%20%26%20%E8%B8%A9%E5%9D%91%E6%8F%90%E7%A4%BA" tabindex="-1">设计建议 &amp; 踩坑提示 <a class="header-anchor" href="#设计建议 %26 踩坑提示" aria-label="Permalink to &quot;设计建议 &amp; 踩坑提示&quot;">​</a></h2><ol><li><strong>数据字段类型要“够用就好”，不是越大越好。</strong></li><li>约束条件（如 <code>NOT NULL</code>、<code>DEFAULT</code>）是完整性的一部分，<strong>便于数据规范化</strong>。</li><li><strong>避免使用 MySQL 的复杂特性</strong>如存储过程、触发器、外键 —— 将逻辑转移到业务层，减轻数据库负担。</li><li>避免 <code>TEXT</code> 存储字段内容超出预期导致截断，可结合实际加字符长度限制。</li></ol><h1 id="%E8%BF%90%E7%AE%97%E7%AC%A6" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h1><h2 id="%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88%2B%20-%20*%20%2F%20%25%EF%BC%89" tabindex="-1">算术运算符（+ - * / %） <a class="header-anchor" href="#算术运算符（%2B - * %2F %）" aria-label="Permalink to &quot;算术运算符（+ - * / %）&quot;">​</a></h2><ul><li><p>与大多数编程语言类似，用于数值计算。</p></li><li><p><strong>示例</strong>：学生升学，年龄+1</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>UPDATE user SET age = age + 1;</span></span></code></pre></div></li><li><p><strong>注意事项</strong>：</p><ul><li>数据<strong>类型要匹配</strong>，避免越界。</li><li>浮点数（float、double）精度有限，<strong>可能导致溢出或截断</strong>。</li><li>若对精度要求高，应使用 <code>DECIMAL</code> 类型。</li></ul></li></ul><hr><h2 id="%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88AND%E3%80%81OR%E3%80%81NOT%EF%BC%89" tabindex="-1">逻辑运算符（AND、OR、NOT） <a class="header-anchor" href="#逻辑运算符（AND、OR、NOT）" aria-label="Permalink to &quot;逻辑运算符（AND、OR、NOT）&quot;">​</a></h2><ul><li>常用于 <code>WHERE</code> 条件组合。</li></ul><blockquote><h4 id="1.%20AND%EF%BC%9A%E9%80%BB%E8%BE%91%E4%B8%8E%EF%BC%88%E9%83%BD%E6%BB%A1%E8%B6%B3%EF%BC%89" tabindex="-1">1. AND：逻辑与（都满足） <a class="header-anchor" href="#1. AND：逻辑与（都满足）" aria-label="Permalink to &quot;1. AND：逻辑与（都满足）&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT * FROM user WHERE sex = &#39;男&#39; AND score &gt;= 90;</span></span></code></pre></div><h4 id="2.%20OR%EF%BC%9A%E9%80%BB%E8%BE%91%E6%88%96%EF%BC%88%E6%BB%A1%E8%B6%B3%E4%BB%BB%E4%B8%80%E5%8D%B3%E5%8F%AF%EF%BC%89" tabindex="-1">2. OR：逻辑或（满足任一即可） <a class="header-anchor" href="#2. OR：逻辑或（满足任一即可）" aria-label="Permalink to &quot;2. OR：逻辑或（满足任一即可）&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT * FROM user WHERE sex = &#39;男&#39; OR score &gt; 90;</span></span></code></pre></div><h4 id="3.%20NOT%EF%BC%9A%E9%80%BB%E8%BE%91%E9%9D%9E" tabindex="-1">3. NOT：逻辑非 <a class="header-anchor" href="#3. NOT：逻辑非" aria-label="Permalink to &quot;3. NOT：逻辑非&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT * FROM user WHERE NOT (score &gt; 90);</span></span></code></pre></div></blockquote><h2 id="%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88%3D%E3%80%81!%3D%E3%80%81%3E%E3%80%81%3C%E3%80%81%3E%3D%E3%80%81%3C%3D%E3%80%81BETWEEN%E3%80%81IN%EF%BC%89" tabindex="-1">比较运算符（=、!=、&gt;、&lt;、&gt;=、&lt;=、BETWEEN、IN） <a class="header-anchor" href="#比较运算符（%3D、!%3D、&gt;、&lt;、&gt;%3D、&lt;%3D、BETWEEN、IN）" aria-label="Permalink to &quot;比较运算符（=、!=、&gt;、&lt;、&gt;=、&lt;=、BETWEEN、IN）&quot;">​</a></h2><blockquote><h4 id="1.%20%E5%9F%BA%E6%9C%AC%E8%BF%90%E7%AE%97%E7%AC%A6" tabindex="-1">1. 基本运算符 <a class="header-anchor" href="#1. 基本运算符" aria-label="Permalink to &quot;1. 基本运算符&quot;">​</a></h4><ul><li><code>=</code>：等于</li><li><code>!=</code> 或 <code>&lt;&gt;</code>：不等于（推荐使用 <code>!=</code>，<code>&lt;&gt;</code> 未来可能弃用）</li><li><code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code>：大小比较</li></ul><h4 id="2.%20BETWEEN%20...%20AND%20..." tabindex="-1">2. BETWEEN ... AND ... <a class="header-anchor" href="#2. BETWEEN ... AND ..." aria-label="Permalink to &quot;2. BETWEEN ... AND ...&quot;">​</a></h4><ul><li>判断某个字段值是否<strong>在某个范围之间</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT * FROM user WHERE age BETWEEN 20 AND 22;</span></span></code></pre></div><h4 id="3.%20IN%20(...)" tabindex="-1">3. IN (...) <a class="header-anchor" href="#3. IN (...)" aria-label="Permalink to &quot;3. IN (...)&quot;">​</a></h4><ul><li>判断字段是否<strong>属于多个值中的一个</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT * FROM user WHERE score IN (90, 99, 100);</span></span></code></pre></div></blockquote><h2 id="IS%20NULL%20%2F%20IS%20NOT%20NULL" tabindex="-1">IS NULL / IS NOT NULL <a class="header-anchor" href="#IS NULL %2F IS NOT NULL" aria-label="Permalink to &quot;IS NULL / IS NOT NULL&quot;">​</a></h2><ul><li>用于判断字段值是否为空（<strong>不能用 = NULL 或 != NULL</strong>）</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT * FROM user WHERE score IS NULL;</span></span>
<span class="line"><span>SELECT * FROM user WHERE score IS NOT NULL;</span></span></code></pre></div><ul><li>常出现在： <ul><li><strong>字段未加 <code>NOT NULL</code> 约束时</strong>----- <strong>条件</strong></li><li>外连接（LEFT JOIN / RIGHT JOIN）结果中，缺失值默认为 NULL</li></ul></li></ul><hr><h2 id="LIKE%20%E9%80%9A%E9%85%8D%E7%AC%A6%EF%BC%88%E6%A8%A1%E7%B3%8A%E5%8C%B9%E9%85%8D%EF%BC%89" tabindex="-1">LIKE 通配符（模糊匹配） <a class="header-anchor" href="#LIKE 通配符（模糊匹配）" aria-label="Permalink to &quot;LIKE 通配符（模糊匹配）&quot;">​</a></h2><blockquote><h4 id="1.%20%E9%80%9A%E9%85%8D%E7%AC%A6" tabindex="-1">1. 通配符 <a class="header-anchor" href="#1. 通配符" aria-label="Permalink to &quot;1. 通配符&quot;">​</a></h4><ul><li><code>%</code>：匹配<strong>任意多个字符</strong></li><li><code>_</code>：匹配<strong>任意一个字符</strong></li></ul><h4 id="2.%20%E7%A4%BA%E4%BE%8B%EF%BC%9A%E6%9F%A5%E6%89%BE%E5%A7%93%E5%90%8D%E4%BB%A5%E2%80%9C%E5%BC%A0%E2%80%9D%E5%BC%80%E5%A4%B4%E7%9A%84%E7%94%A8%E6%88%B7" tabindex="-1">2. 示例：查找姓名以“张”开头的用户 <a class="header-anchor" href="#2. 示例：查找姓名以“张”开头的用户" aria-label="Permalink to &quot;2. 示例：查找姓名以“张”开头的用户&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT * FROM user WHERE name LIKE &#39;张%&#39;;</span></span></code></pre></div><ul><li><code>LIKE &#39;张%&#39;</code> 匹配“张三”、“张晓阿达”、“张瑶是”等。</li><li><code>LIKE &#39;张_&#39;</code> 只匹配“张三”、“张强”这类 <strong>两个字</strong> 的。</li></ul><h4 id="3.%20%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98---%20%E6%B3%A8%E6%84%8F-%E5%9D%91%E7%82%B9" tabindex="-1">3. 索引优化问题--- <strong>注意-坑点</strong> <a class="header-anchor" href="#3. 索引优化问题--- 注意-坑点" aria-label="Permalink to &quot;3. 索引优化问题--- **注意-坑点**&quot;">​</a></h4><ul><li>是否能使用索引： <ul><li>通配符在<strong>末尾</strong>或<strong>中间</strong>（如 <code>&#39;张%&#39;</code>, <code>&#39;张_强&#39;</code>）：<strong>可能用到索引</strong></li><li>通配符在<strong>开头</strong>（如 <code>&#39;%三&#39;</code>）：<strong>无法使用索引</strong>，全表扫描。</li></ul></li></ul></blockquote><hr><h2 id="%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E4%B8%8E%E9%81%BF%E5%9D%91%E6%8C%87%E5%8D%97" tabindex="-1">注意事项与避坑指南 <a class="header-anchor" href="#注意事项与避坑指南" aria-label="Permalink to &quot;注意事项与避坑指南&quot;">​</a></h2><ol><li><strong>数据类型选择需谨慎</strong>，避免： <ul><li>数值溢出（int 溢出）</li><li>浮点精度误差（float/double）</li></ul></li><li><strong>空值判断</strong>一定要用 <code>IS NULL / IS NOT NULL</code>，<strong>不能用 <code>=</code> 比较</strong></li><li><strong>LIKE 查询是否走索引</strong>取决于通配符位置，<strong>查询效率需考虑</strong></li><li><strong>提前考虑边界问题与异常数据</strong>，避免线上出错 <ul><li>出错不仅影响业务，还影响绩效、奖金等</li></ul></li></ol><hr><h2 id="%E6%80%BB%E7%BB%93" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>掌握 <strong>MySQL 中常用运算符</strong></li><li>理解其在实际业务中的常见应用</li><li><strong>避免常见错误（如空值判断、索引失效）</strong></li><li>建立正确的数据处理思维，提前规避问题</li></ul><h1 id="mysql%E5%AE%8C%E6%95%B4%E6%80%A7%E7%BA%A6%E6%9D%9F%E6%9D%A1%E4%BB%B6" tabindex="-1">mysql完整性约束条件 <a class="header-anchor" href="#mysql完整性约束条件" aria-label="Permalink to &quot;mysql完整性约束条件&quot;">​</a></h1><h2 id="%E4%B8%BB%E9%94%AE%E7%BA%A6%E6%9D%9F%EF%BC%88PRIMARY%20KEY%EF%BC%89%E4%B8%8E%20%E8%87%AA%E5%A2%9E%E9%94%AE%E7%BA%A6%E6%9D%9F" tabindex="-1">主键约束（<code>PRIMARY KEY</code>）与 自增键约束 <a class="header-anchor" href="#主键约束（PRIMARY KEY）与 自增键约束" aria-label="Permalink to &quot;主键约束（\`PRIMARY KEY\`）与 自增键约束&quot;">​</a></h2><ul><li><p><strong>作用</strong>：唯一标识一条记录，<strong>不能重复，不能为 NULL</strong>。</p></li><li><p><strong>说明</strong>：</p><ul><li>一个表只能有一个主键（可由多个字段联合组成）。</li><li>通常用于 id 字段，可搭配 <code>AUTO_INCREMENT</code>-- <strong>自增键约束</strong> 实现自增。</li></ul></li><li><p><strong>示例</strong>： 无需 not null</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TABLE user(</span></span>
<span class="line"><span>id INT PRIMARY KEY AUTO_INCREMENT COMMENT &#39;用户的主键id&#39;</span></span></code></pre></div></li></ul><hr><h2 id="%E5%94%AF%E4%B8%80%E7%BA%A6%E6%9D%9F%EF%BC%88UNIQUE%EF%BC%89" tabindex="-1">唯一约束（<code>UNIQUE</code>） <a class="header-anchor" href="#唯一约束（UNIQUE）" aria-label="Permalink to &quot;唯一约束（\`UNIQUE\`）&quot;">​</a></h2><ul><li><p><strong>作用</strong>：字段值不能重复，但<strong>可以为 NULL</strong>（可多个字段为 NULL）。</p></li><li><p><strong>说明</strong>：</p><ul><li>一个表可定义多个 <code>UNIQUE</code> 约束。</li><li>常用于邮箱、用户名等不能重复的字段。</li></ul></li><li><p><strong>示例</strong>： 根据实际 是否需要 not null</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TABLE user(</span></span>
<span class="line"><span>id INT PRIMARY KEY AUTO_INCREMENT COMMENT &#39;用户的主键id&#39;,</span></span>
<span class="line"><span>nickname varchar(50) UNIQUE NOT NULL COMMENT &#39;用户的名称&#39;,</span></span></code></pre></div></li></ul><hr><h2 id="%E9%9D%9E%E7%A9%BA%E7%BA%A6%E6%9D%9F%EF%BC%88NOT%20NULL%EF%BC%89" tabindex="-1">非空约束（<code>NOT NULL</code>） <a class="header-anchor" href="#非空约束（NOT NULL）" aria-label="Permalink to &quot;非空约束（\`NOT NULL\`）&quot;">​</a></h2><ul><li><p><strong>作用</strong>：字段值不能为空。</p></li><li><p><strong>说明</strong>：</p><ul><li>常用于必须填写的字段，如用户名、密码等。</li><li>可搭配 <code>DEFAULT</code> 提供默认值。</li></ul></li><li><p><strong>示例</strong>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TABLE user(</span></span>
<span class="line"><span>id INT PRIMARY KEY AUTO_INCREMENT COMMENT &#39;用户的主键id&#39;,</span></span>
<span class="line"><span>nickname varchar(50) UNIQUE NOT NULL COMMENT &#39;用户的名称&#39;,</span></span>
<span class="line"><span>age TINYINT UNSIGNED NOT NULL DEFAULT 18,</span></span></code></pre></div></li></ul><hr><h2 id="%E6%9E%9A%E4%B8%BE%E4%BD%BF%E7%94%A8" tabindex="-1">枚举使用 <a class="header-anchor" href="#枚举使用" aria-label="Permalink to &quot;枚举使用&quot;">​</a></h2><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CREATE TABLE </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">id INT PRIMARY KEY AUTO_INCREMENT COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;用户的主键id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nickname </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) UNIQUE NOT </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;用户的名称&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age TINYINT UNSIGNED NOT </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DEFAULT </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sex </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ENUM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;male&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;famale&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div><h2 id="%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8C%E8%A1%A8" tabindex="-1">创建数据库和表 <a class="header-anchor" href="#创建数据库和表" aria-label="Permalink to &quot;创建数据库和表&quot;">​</a></h2><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">create database test;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">use test;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CREATE TABLE </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">id INT PRIMARY KEY AUTO_INCREMENT COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;用户的主键id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nickname </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) UNIQUE NOT </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;用户的名称&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age TINYINT UNSIGNED NOT </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DEFAULT </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sex </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ENUM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;male&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;famale&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">desc user\\G   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  无分号</span></span></code></pre></div><p><code>\\G</code> 是一个特殊的语法，用于将查询结果按行垂直显示，而非默认的水平表格形式。</p><h2 id="%E9%BB%98%E8%AE%A4%E5%80%BC%E7%BA%A6%E6%9D%9F%EF%BC%88DEFAULT%EF%BC%89" tabindex="-1">默认值约束（<code>DEFAULT</code>） <a class="header-anchor" href="#默认值约束（DEFAULT）" aria-label="Permalink to &quot;默认值约束（\`DEFAULT\`）&quot;">​</a></h2><ul><li><p><strong>作用</strong>：字段未赋值时使用默认值。</p></li><li><p><strong>说明</strong>：</p><ul><li>可与 <code>NOT NULL</code> 一起使用，避免插入 NULL。</li></ul></li><li><p><strong>示例</strong>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>status INT NOT NULL DEFAULT 1</span></span></code></pre></div></li></ul><hr><h2 id="%E6%A3%80%E6%9F%A5%E7%BA%A6%E6%9D%9F%EF%BC%88CHECK%EF%BC%89" tabindex="-1">检查约束（<code>CHECK</code>） <a class="header-anchor" href="#检查约束（CHECK）" aria-label="Permalink to &quot;检查约束（\`CHECK\`）&quot;">​</a></h2><ul><li><p><strong>作用</strong>：限制字段取值范围或满足的条件。</p></li><li><p><strong>说明</strong>：</p><ul><li>✅ <strong>MySQL 8.0.16+ 才真正支持 <code>CHECK</code> 约束！</strong></li><li>✅ 可用 <code>ENUM</code> 类型替代一些简单的检查需求。</li><li>❌ MySQL 5.x 虽可写 <code>CHECK</code>，但<strong>不会生效</strong>。</li></ul></li><li><p><strong>示例</strong>（MySQL 8.0.16+ 才有效）：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>age INT CHECK (age &gt;= 0 AND age &lt;= 120)</span></span></code></pre></div></li></ul><hr><h2 id="%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F%EF%BC%88FOREIGN%20KEY%EF%BC%89--%20%E4%B8%80%E8%88%AC%E4%B8%8D%E7%94%A8" tabindex="-1">外键约束（<code>FOREIGN KEY</code>）-- 一般不用 <a class="header-anchor" href="#外键约束（FOREIGN KEY）-- 一般不用" aria-label="Permalink to &quot;外键约束（\`FOREIGN KEY\`）-- 一般不用&quot;">​</a></h2><ul><li><p><strong>作用</strong>：建立两张表之间的关系，保证引用字段存在于目标表。</p></li><li><p><strong>实际场景说明</strong>：</p><ul><li>如学生表 <code>student</code> 和考试表 <code>exam</code> 之间通过学号建立关联。</li><li><strong>现在后台开发中一般不使用外键</strong>，因为： <ul><li>会影响性能。</li><li>多表逻辑通常放在业务代码中处理更灵活、可控。</li></ul></li></ul></li><li><p><strong>说明</strong>：</p><ul><li>✅ 外键字段必须引用另一表的 <strong>主键或唯一键</strong>。</li><li>✅ <strong>仅 InnoDB 引擎支持</strong>，MyISAM 等不支持外键。</li><li>✅ 可设置级联操作，如： <ul><li><code>ON DELETE CASCADE</code>：删除父表记录时，自动删除子表记录。</li><li><code>ON UPDATE CASCADE</code>：更新主键时，自动更新子表。</li></ul></li><li><strong>⚠️ 实际开发中</strong>，大型系统常通过程序控制逻辑，<strong>不使用外键</strong>（为降低耦合，提高扩展性）。</li></ul></li><li><p><strong>示例</strong>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CONSTRAINT fk_user_id</span></span>
<span class="line"><span>FOREIGN KEY (user_id) REFERENCES user(id)</span></span>
<span class="line"><span>ON DELETE CASCADE</span></span></code></pre></div></li></ul><p><img src="`+e+'" alt="image-20250510113513694"></p><h2 id="%E4%B8%BA%E4%BB%80%E4%B9%88%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E4%B8%AD%E9%80%9A%E5%B8%B8%E4%B8%8D%E7%94%A8%E5%A4%96%E9%94%AE%E3%80%81%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E3%80%81%E8%A7%A6%E5%8F%91%E5%99%A8%E7%AD%89%20MySQL%20%E9%80%BB%E8%BE%91%E5%8A%9F%E8%83%BD%EF%BC%9F" tabindex="-1">为什么后台开发中通常不用外键、存储过程、触发器等 MySQL 逻辑功能？ <a class="header-anchor" href="#为什么后台开发中通常不用外键、存储过程、触发器等 MySQL 逻辑功能？" aria-label="Permalink to &quot;为什么后台开发中通常不用外键、存储过程、触发器等 MySQL 逻辑功能？&quot;">​</a></h2><blockquote><h3 id="%E5%90%8E%E5%8F%B0%E5%BC%80%E5%8F%91%E7%9A%84%E5%AE%9E%E8%B7%B5%E5%80%BE%E5%90%91" tabindex="-1"><strong>后台开发的实践倾向</strong> <a class="header-anchor" href="#后台开发的实践倾向" aria-label="Permalink to &quot;**后台开发的实践倾向**&quot;">​</a></h3><ul><li>在实际开发中，<strong>后台逻辑尽量不写在数据库中</strong>。</li><li>外键、存储过程、触发器等机制，<strong>在现代系统中使用非常少</strong>。</li></ul><h3 id="%E6%A0%B8%E5%BF%83%E5%8E%9F%E5%9B%A0%EF%BC%9A%E6%80%A7%E8%83%BD%E4%B8%8E%E5%8F%AF%E7%BB%B4%E6%8A%A4%E6%80%A7" tabindex="-1"><strong>核心原因：性能与可维护性</strong> <a class="header-anchor" href="#核心原因：性能与可维护性" aria-label="Permalink to &quot;**核心原因：性能与可维护性**&quot;">​</a></h3><ul><li>数据库（MySQL）的 <strong>存储层最容易成为性能瓶颈</strong>。</li><li>将复杂逻辑放在数据库执行，会： <ul><li>增加数据库的负担；</li><li>降低扩展性（逻辑封闭在数据库中，调试与迁移困难）；</li><li>不利于分布式架构和微服务的逻辑分拆。</li></ul></li></ul><h3 id="%E6%9B%B4%E5%A5%BD%E7%9A%84%E5%81%9A%E6%B3%95%EF%BC%9A%E9%80%BB%E8%BE%91%E4%B8%8A%E7%A7%BB" tabindex="-1"><strong>更好的做法：逻辑上移</strong> <a class="header-anchor" href="#更好的做法：逻辑上移" aria-label="Permalink to &quot;**更好的做法：逻辑上移**&quot;">​</a></h3><ul><li>外键约束、字段检查、级联操作等应由<strong>后端业务代码来控制</strong>。</li><li>增删改查、数据校验、逻辑处理等操作建议： <ul><li>放在 <strong>服务层 / 业务逻辑层</strong> 完成；</li><li>数据库只负责 <strong>纯粹的数据存储与读取</strong>。</li></ul></li></ul></blockquote><h1 id="%E8%A1%A8%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99(%E4%B8%80)-%E9%87%8D%E7%82%B9" tabindex="-1">表设计原则(一)-<strong>重点</strong> <a class="header-anchor" href="#表设计原则(一)-重点" aria-label="Permalink to &quot;表设计原则(一)-**重点**&quot;">​</a></h1><blockquote><p>了解与范式、约束、外键等相关的基本设计原则</p></blockquote><h2 id="%E8%83%8C%E6%99%AF%E4%B8%8E%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF" tabindex="-1">背景与应用场景 <a class="header-anchor" href="#背景与应用场景" aria-label="Permalink to &quot;背景与应用场景&quot;">​</a></h2><ul><li>在项目初期进行需求分析后，需要进行<strong>库表设计</strong>；</li><li>表设计涉及<strong>实体建模、字段定义、字段类型、主键选择、表间关系</strong>等；</li><li>与面向对象设计类比：<strong>表 = 实体类</strong>；<strong>表间关系 = 实体间关系（组合、继承）</strong>；</li><li>表间关系常见三种： <ul><li><strong>一对一</strong></li><li><strong>一对多</strong></li><li><strong>多对多</strong></li></ul></li></ul><h2 id="%E4%B8%80%E5%AF%B9%E4%B8%80%E5%85%B3%E7%B3%BB%E5%AE%9A%E4%B9%89%E4%B8%8E%E7%A4%BA%E4%BE%8B" tabindex="-1">一对一关系定义与示例 <a class="header-anchor" href="#一对一关系定义与示例" aria-label="Permalink to &quot;一对一关系定义与示例&quot;">​</a></h2><blockquote><h4 id="%E6%A6%82%E5%BF%B5%E8%AF%B4%E6%98%8E%EF%BC%9A" tabindex="-1">概念说明： <a class="header-anchor" href="#概念说明：" aria-label="Permalink to &quot;概念说明：&quot;">​</a></h4><ul><li>一个实体 A 对应一个实体 B；</li><li>示例：<code>用户 user</code> 与 <code>身份信息 info</code>； <ul><li>一个用户仅有一个身份信息；</li><li>一个身份信息也仅属于一个用户。</li></ul></li></ul><h4 id="%E7%A4%BA%E4%BE%8B%E8%A1%A8%E7%BB%93%E6%9E%84%EF%BC%9A" tabindex="-1">示例表结构： <a class="header-anchor" href="#示例表结构：" aria-label="Permalink to &quot;示例表结构：&quot;">​</a></h4><ul><li><strong>用户表 user</strong>： <ul><li><code>uid</code>（用户ID，主键）</li><li><code>name</code>（姓名）</li><li><code>age</code>（年龄）</li><li><code>gender</code>（性别）</li></ul></li><li><strong>身份信息表 info</strong>： <ul><li><code>id_card</code>（身份证号，主键或唯一字段）</li><li><code>address_info</code>（地址信息）</li><li><code>uid</code>（用户ID，用于关联 user 表）</li></ul></li></ul></blockquote><h2 id="%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E5%85%B3%E8%81%94%EF%BC%9F" tabindex="-1">如何建立关联？ <a class="header-anchor" href="#如何建立关联？" aria-label="Permalink to &quot;如何建立关联？&quot;">​</a></h2><ul><li><p>在 <strong>子表（info）中添加外键列 <code>uid</code></strong>，逻辑上关联 user 表的主键 <code>uid</code>；</p></li><li><p><code>uid</code> 的类型必须与主表中的类型一致；</p></li><li><p>实际查询示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT * FROM info WHERE uid = 2010;</span></span></code></pre></div><p>可查出王同学的身份信息。</p></li></ul><p><img src="'+E+`" alt="image-20250510131529738"></p><h2 id="%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%E4%B8%8E%E5%AE%9E%E8%B7%B5%E5%BB%BA%E8%AE%AE" tabindex="-1">注意事项与实践建议 <a class="header-anchor" href="#注意事项与实践建议" aria-label="Permalink to &quot;注意事项与实践建议&quot;">​</a></h2><ul><li><p><strong>理论上是外键约束，但实际开发中不推荐使用数据库外键约束机制</strong>：</p><ul><li>原因：数据库（如 MySQL）存储层 IO 压力大，容易成为性能瓶颈；</li><li>建议将关联逻辑放在 <strong>后端服务层代码中控制</strong>；</li><li>例如，通过业务代码确保某 UID 在 user 表存在，保持一致性；</li></ul></li><li><p>所以：</p><blockquote><p>“<strong>不要让 MySQL 做过多限制逻辑，只负责存储核心数据，逻辑由后端控制</strong>”</p></blockquote></li></ul><blockquote><p>一对一表设计：<strong>在子表中添加一列逻辑外键，关联主表主键；关联控制应在业务代码中完成，而不是依赖数据库约束机制。</strong></p></blockquote><h1 id="%E8%A1%A8%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99(%E4%BA%8C)-%E9%87%8D%E7%82%B9" tabindex="-1">表设计原则(二)-<strong>重点</strong> <a class="header-anchor" href="#表设计原则(二)-重点" aria-label="Permalink to &quot;表设计原则(二)-**重点**&quot;">​</a></h1><h2 id="%E4%B8%80%E5%AF%B9%E5%A4%9A%20%26%20%E5%A4%9A%E5%AF%B9%E5%A4%9A%20%E5%85%B3%E7%B3%BB%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E8%AE%BE%E8%AE%A1%E4%BE%8B%E5%AD%90" tabindex="-1">一对多 &amp; 多对多 关系的理解与数据库表设计例子 <a class="header-anchor" href="#一对多 %26 多对多 关系的理解与数据库表设计例子" aria-label="Permalink to &quot;一对多 &amp; 多对多 关系的理解与数据库表设计例子&quot;">​</a></h2><h2 id="%E7%94%B5%E5%95%86%E7%B3%BB%E7%BB%9F%E6%B6%89%E5%8F%8A%E7%9A%84%E6%A0%B8%E5%BF%83%E5%AE%9E%E4%BD%93%EF%BC%9A" tabindex="-1">电商系统涉及的核心实体： <a class="header-anchor" href="#电商系统涉及的核心实体：" aria-label="Permalink to &quot;电商系统涉及的核心实体：&quot;">​</a></h2><ul><li><code>User（用户）</code></li><li><code>Product（商品）</code></li><li><code>Order（订单）</code></li></ul><hr><h2 id="%E5%AE%9E%E4%BD%93%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB%E5%88%86%E6%9E%90%EF%BC%9A" tabindex="-1">实体之间的关系分析： <a class="header-anchor" href="#实体之间的关系分析：" aria-label="Permalink to &quot;实体之间的关系分析：&quot;">​</a></h2><table tabindex="0"><thead><tr><th>实体关系</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>用户 ⇄ 商品</td><td>无直接关系</td><td>用户只是<strong>查看</strong>商品，未购买前无交集</td></tr><tr><td>用户 → 订单</td><td>一对多</td><td>一个用户可以有<strong>多个订单</strong>，每个订单只属于<strong>一个用户</strong></td></tr><tr><td>订单 ⇄ 商品</td><td>多对多</td><td>一个订单可以包含<strong>多个商品</strong>，一个商品也可以出现在<strong>多个订单中</strong></td></tr></tbody></table><hr><h2 id="%E8%A1%A8%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F" tabindex="-1">表结构设计方式 <a class="header-anchor" href="#表结构设计方式" aria-label="Permalink to &quot;表结构设计方式&quot;">​</a></h2><blockquote><h4 id="%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB%E8%AE%BE%E8%AE%A1%20%E2%80%94%E2%80%94%20%E7%94%A8%E6%88%B7%E4%B8%8E%E8%AE%A2%E5%8D%95" tabindex="-1">一对多关系设计 —— 用户与订单 <a class="header-anchor" href="#一对多关系设计 —— 用户与订单" aria-label="Permalink to &quot;一对多关系设计 —— 用户与订单&quot;">​</a></h4><ul><li>方案：<strong>在子表（订单表）中添加父表（用户表）的主键 <code>UID</code> 作为外键</strong></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>用户表（user）</span></span>
<span class="line"><span>--------------------------</span></span>
<span class="line"><span>UID (PK) | Name | Age | Sex</span></span>
<span class="line"><span></span></span>
<span class="line"><span>订单表（order）</span></span>
<span class="line"><span>---------------------------------------------</span></span>
<span class="line"><span>OrderID (PK) | UID (FK) | TotalPrice | Address</span></span></code></pre></div><ul><li>表达关系：一个 UID 可以对应多条订单记录（OrderID），即实现一对多。</li></ul></blockquote><hr><h2 id="%E6%80%BB%E7%BB%93%E8%A1%A8%E9%97%B4%E5%85%B3%E7%B3%BB%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F" tabindex="-1">总结表间关系设计方式 <a class="header-anchor" href="#总结表间关系设计方式" aria-label="Permalink to &quot;总结表间关系设计方式&quot;">​</a></h2><table tabindex="0"><thead><tr><th>关系类型</th><th>设计方式</th><th>本例实体</th></tr></thead><tbody><tr><td>一对多</td><td>子表添加外键, 并不是约束, 要分清</td><td>用户 → 订单</td></tr><tr><td>多对多</td><td>引入中间表，包含双方主键</td><td>订单 ⇄ 商品</td></tr></tbody></table><hr><h2 id="%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E8%BF%99%E4%B9%88%E8%AE%BE%E8%AE%A1%EF%BC%9F" tabindex="-1">为什么要这么设计？ <a class="header-anchor" href="#为什么要这么设计？" aria-label="Permalink to &quot;为什么要这么设计？&quot;">​</a></h2><ul><li><p>保持数据 <strong>规范性</strong>（避免冗余）；</p></li><li><p>保证查询 <strong>高效性</strong>（字段冗余最小化 + 结构清晰）；</p></li><li><p>支持 <strong>灵活扩展</strong>（例如后续给订单加评价、商品加分类）。</p></li></ul><p><img src="`+p+'" alt="image-20250510134252131"></p><h1 id="%E8%A1%A8%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99(%E4%B8%89)-%E9%87%8D%E7%82%B9" tabindex="-1">表设计原则(三)-<strong>重点</strong> <a class="header-anchor" href="#表设计原则(三)-重点" aria-label="Permalink to &quot;表设计原则(三)-**重点**&quot;">​</a></h1><h2 id="%E7%94%A8%E4%B8%AD%E9%97%B4%E8%A1%A8%E6%9D%A5%E5%BB%BA%E7%AB%8B%E2%80%9C%E5%A4%9A%E5%AF%B9%E5%A4%9A%E2%80%9D%E5%85%B3%E7%B3%BB" tabindex="-1">用中间表来建立“多对多”关系 <a class="header-anchor" href="#用中间表来建立“多对多”关系" aria-label="Permalink to &quot;用中间表来建立“多对多”关系&quot;">​</a></h2><h2 id="%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E8%AE%BE%E8%AE%A1%E4%B8%AD%E9%97%B4%E8%A1%A8%EF%BC%88%E9%81%BF%E5%85%8D%E6%95%B0%E6%8D%AE%E5%86%97%E4%BD%99%EF%BC%89" tabindex="-1">为什么要设计中间表（避免数据冗余） <a class="header-anchor" href="#为什么要设计中间表（避免数据冗余）" aria-label="Permalink to &quot;为什么要设计中间表（避免数据冗余）&quot;">​</a></h2><ul><li><strong>问题场景</strong>：一个订单中可能包含多个商品，一个商品也可能出现在多个订单中，属于<strong>多对多关系</strong>。</li><li><strong>如果直接在订单表中冗余存商品信息</strong>： <ul><li>会产生<strong>重复数据</strong>（如相同的订单 ID、地址、总价等被重复存储）。</li><li>对订单中商品的增删改操作，会导致<strong>批量更新或删除</strong>，<strong>影响性能和一致性</strong>。</li></ul></li><li><strong>冗余带来的问题</strong>： <ul><li>修改一项数据（如地址或总价）需改多行，易造成数据不一致。</li><li>删除订单时需删多条记录，逻辑复杂。</li><li>占用存储空间、效率低。</li></ul></li></ul><p><img src="'+k+'" alt="image-20250510145917847"></p><h2 id="%E8%A1%A8%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F-1" tabindex="-1">表结构设计方式 <a class="header-anchor" href="#表结构设计方式-1" aria-label="Permalink to &quot;表结构设计方式&quot;">​</a></h2><blockquote><h3 id="%E5%A4%9A%E5%AF%B9%E5%A4%9A%E5%85%B3%E7%B3%BB%E8%AE%BE%E8%AE%A1%20%E2%80%94%E2%80%94%20%E5%95%86%E5%93%81%E4%B8%8E%E8%AE%A2%E5%8D%95" tabindex="-1">多对多关系设计 —— 商品与订单 <a class="header-anchor" href="#多对多关系设计 —— 商品与订单" aria-label="Permalink to &quot;多对多关系设计 —— 商品与订单&quot;">​</a></h3><h4 id="%E5%95%86%E5%93%81%E8%A1%A8%EF%BC%88product%EF%BC%89%EF%BC%9A" tabindex="-1">商品表（<code>product</code>）： <a class="header-anchor" href="#商品表（product）：" aria-label="Permalink to &quot;商品表（`product`）：&quot;">​</a></h4><table tabindex="0"><thead><tr><th>字段名</th><th>含义</th></tr></thead><tbody><tr><td>PID</td><td>商品ID（主键）</td></tr><tr><td>name</td><td>商品名称</td></tr><tr><td>price</td><td>单价</td></tr></tbody></table><h4 id="%E8%AE%A2%E5%8D%95%E8%A1%A8%EF%BC%88order%EF%BC%89%EF%BC%9A" tabindex="-1">订单表（<code>order</code>）： <a class="header-anchor" href="#订单表（order）：" aria-label="Permalink to &quot;订单表（`order`）：&quot;">​</a></h4><table tabindex="0"><thead><tr><th>字段名</th><th>含义</th></tr></thead><tbody><tr><td>orderID</td><td>订单ID（主键）</td></tr><tr><td>UID</td><td>用户ID（外键）</td></tr><tr><td>total_price</td><td>总价</td></tr><tr><td>address_info</td><td>配送地址</td></tr></tbody></table><h4 id="%E4%B8%AD%E9%97%B4%E8%A1%A8%EF%BC%88order_list%20%E6%88%96%20order_detail%EF%BC%89%EF%BC%9A" tabindex="-1">中间表（<code>order_list</code> 或 <code>order_detail</code>）： <a class="header-anchor" href="#中间表（order_list 或 order_detail）：" aria-label="Permalink to &quot;中间表（`order_list` 或 `order_detail`）：&quot;">​</a></h4><table tabindex="0"><thead><tr><th>字段名</th><th>含义</th></tr></thead><tbody><tr><td>orderID</td><td>外键：对应某一订单</td></tr><tr><td>PID</td><td>外键：对应某一商品</td></tr><tr><td>number</td><td>商品数量</td></tr><tr><td>money</td><td>商品对应金额（单价×数量）</td></tr></tbody></table><blockquote><p><strong>联合主键建议</strong>：<code>orderID + PID</code>，防止重复添加相同商品到同一订单中。</p></blockquote></blockquote><h2 id="%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E9%80%BB%E8%BE%91%EF%BC%88%E5%A6%82%E4%BD%95%E7%94%A8%EF%BC%89" tabindex="-1">数据查询逻辑（如何用） <a class="header-anchor" href="#数据查询逻辑（如何用）" aria-label="Permalink to &quot;数据查询逻辑（如何用）&quot;">​</a></h2><ul><li>想看某个订单的所有商品： <ul><li>从 <code>order_list</code> 查出所有 <code>PID</code>，再查 <code>product</code> 表获得商品详情。</li></ul></li><li>想看某个用户的订单： <ul><li>从 <code>order</code> 查出 <code>UID</code> 对应的订单，结合 <code>order_list</code> 得出每个订单包含的商品清单。</li></ul></li></ul><h2 id="%E6%8F%90%E9%86%92%E4%B8%8E%E5%BB%BA%E8%AE%AE" tabindex="-1">提醒与建议 <a class="header-anchor" href="#提醒与建议" aria-label="Permalink to &quot;提醒与建议&quot;">​</a></h2><ul><li>多对多中避免把重复信息（如地址、总价）存在多条记录中。</li><li>表设计应考虑可维护性、扩展性、操作简便性。</li><li>避免数据冗余，是数据库设计中的核心目标之一。</li><li>多实践、多思考，遇到新业务场景时灵活应用。</li></ul><h1 id="%E9%9D%A2%E8%AF%95%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B%E8%AE%BE%E8%AE%A1" tabindex="-1">面试中的泛型设计 <a class="header-anchor" href="#面试中的泛型设计" aria-label="Permalink to &quot;面试中的泛型设计&quot;">​</a></h1><blockquote><p>配合pdf食用</p></blockquote><h2 id="%E4%BB%80%E4%B9%88%E6%98%AF%E8%8C%83%E5%BC%8F%E8%AE%BE%E8%AE%A1%EF%BC%9F" tabindex="-1">什么是范式设计？ <a class="header-anchor" href="#什么是范式设计？" aria-label="Permalink to &quot;什么是范式设计？&quot;">​</a></h2><ul><li><strong>范式（Normalization）</strong>：是一套数据库设计准则，目的是<strong>减少数据冗余、提高数据一致性和可维护性</strong>。</li><li>与之前讲的“一对一/一对多/多对多”关系设计<strong>相辅相成</strong>： <ul><li>关系设计解决“表与表的连接关系”；</li><li>范式设计解决“表内部字段组织结构”的合理性。</li></ul></li></ul><hr><h2 id="%E8%8C%83%E5%BC%8F%E7%9A%84%E5%88%86%E7%B1%BB%EF%BC%88%E9%87%8D%E7%82%B9%E5%89%8D%E4%B8%89%E4%B8%AA%EF%BC%89" tabindex="-1">范式的分类（重点前三个） <a class="header-anchor" href="#范式的分类（重点前三个）" aria-label="Permalink to &quot;范式的分类（重点前三个）&quot;">​</a></h2><blockquote><ol><li><h3 id="%E7%AC%AC%E4%B8%80%E8%8C%83%E5%BC%8F%EF%BC%881NF%EF%BC%89%E2%80%94%E2%80%94%E5%88%97%E7%9A%84%E5%8E%9F%E5%AD%90%E6%80%A7" tabindex="-1"><strong>第一范式（1NF）——列的原子性</strong> <a class="header-anchor" href="#第一范式（1NF）——列的原子性" aria-label="Permalink to &quot;**第一范式（1NF）——列的原子性**&quot;">​</a></h3><ul><li>每一列都要是<strong>不可再分的原子值</strong>，<strong>不能存储复合信息</strong>。</li><li>✅ 正确做法：地址字段应拆为 <code>国家</code>、<code>城市</code>、<code>街道</code>，甚至可以独立成表。</li><li>❌ 错误做法：将“地址”字段直接存成 <code>&quot;中国北京市朝阳区&quot;</code>。------ <strong>退化为 key-value 了!!!</strong></li></ul><p><img src="'+r+`" alt="image-20250510151309235"></p><p><strong>举例</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>错误：address = “中国北京市朝阳区”</span></span>
<span class="line"><span>正确：country = “中国”，city = “北京”，district = “朝阳”</span></span></code></pre></div><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p></p><p>1NF 都不满足, 就不是 <strong>关系型数据库</strong>了, 而是 <strong>非关系型 数据库</strong></p></div></li><li><h3 id="%E7%AC%AC%E4%BA%8C%E8%8C%83%E5%BC%8F%EF%BC%882NF%EF%BC%89%E2%80%94%E2%80%94%E6%B6%88%E9%99%A4%E2%80%9C%E9%83%A8%E5%88%86%E4%BE%9D%E8%B5%96%E2%80%9D" tabindex="-1"><strong>第二范式（2NF）——消除“部分依赖”</strong> <a class="header-anchor" href="#第二范式（2NF）——消除“部分依赖”" aria-label="Permalink to &quot;**第二范式（2NF）——消除“部分依赖”**&quot;">​</a></h3><ul><li>前提：存在联合主键（即主键由多个字段组成）。</li><li>要求：所有非主属性必须<strong>完全依赖于联合主键的所有字段</strong>，不能只依赖其中的一部分。</li><li>✅ 正确做法：将只依赖部分主键的字段拆分成新表。</li><li>❌ 错误做法：比如课程的“学分”只依赖于课程ID，不应放在学号+课程ID的联合表里。</li></ul><p><img src="`+d+`" alt="image-20250510152930275"></p><p><strong>举例</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>表：学号 + 课程名称 -&gt; 成绩、学分、学生姓名、年龄    ------------ 学分和成绩 要区分清楚</span></span>
<span class="line"><span>问题：</span></span>
<span class="line"><span>- 学分只依赖课程，不依赖学号 ➜ 数据冗余</span></span>
<span class="line"><span>- 姓名、年龄只依赖学号 ➜ 数据冗余</span></span>
<span class="line"><span>正确做法：</span></span>
<span class="line"><span>- 拆分出学生表、课程表、选课关系表（中间表）</span></span></code></pre></div><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><p>pdf 里 第一范式的 图片里, 不遵循 第二范式!! ---- 拆分!</p></div></li><li><h3 id="%E7%AC%AC%E4%B8%89%E8%8C%83%E5%BC%8F%EF%BC%883NF%EF%BC%89%E2%80%94%E2%80%94%E6%B6%88%E9%99%A4%E2%80%9C%E4%BC%A0%E9%80%92%E4%BE%9D%E8%B5%96%E2%80%9D" tabindex="-1"><strong>第三范式（3NF）——消除“传递依赖”</strong> <a class="header-anchor" href="#第三范式（3NF）——消除“传递依赖”" aria-label="Permalink to &quot;**第三范式（3NF）——消除“传递依赖”**&quot;">​</a></h3><ul><li><p>要求：非主属性不能依赖于其它非主属性。</p></li><li><p><strong>在满足2NF基础上，消除对“非主属性”的依赖（传递依赖）。</strong></p><p>✅ 所有非主属性都<strong>必须依赖主键</strong>，<strong>不能依赖其他非主属性</strong>。</p><p>举例：学生表中的“学院地点”“学院电话”依赖“学院”，不是学号 ➝ 应拆分成两个表（学生表、学院表）。</p></li></ul></li><li><h3 id="BC%E8%8C%83%E5%BC%8F%EF%BC%88Boyce-Codd%20Normal%20Form%EF%BC%8CBCNF%EF%BC%89" tabindex="-1"><strong>BC范式（Boyce-Codd Normal Form，BCNF）</strong> <a class="header-anchor" href="#BC范式（Boyce-Codd Normal Form，BCNF）" aria-label="Permalink to &quot;**BC范式（Boyce-Codd Normal Form，BCNF）**&quot;">​</a></h3><ul><li><strong>在3NF基础上，要求每个决定因素都是候选键。</strong></li><li>✅ 表中只能有一个候选键（主键），非主键字段不能依赖非候选键。</li><li>⚠️ 使用场景少，通常满足3NF即可。</li></ul><blockquote><p><strong>候选键 = 能唯一标识记录的最小字段组合；是主键的候选人。</strong></p></blockquote></li><li><h3 id="%E7%AC%AC%E5%9B%9B%E8%8C%83%E5%BC%8F%EF%BC%884NF%EF%BC%89" tabindex="-1"><strong>第四范式（4NF）</strong> <a class="header-anchor" href="#第四范式（4NF）" aria-label="Permalink to &quot;**第四范式（4NF）**&quot;">​</a></h3><ul><li><strong>在BCNF基础上，消除多值依赖。</strong></li><li>可以减少维护数据一致性的工作</li><li>举例：员工表中存储技能（Skill）时，不应该在一个字段中存储多个值 ➝ 应将技能拆分成一张新表（多行单值）。</li><li>有的人是“java，mysql”，有的人描述的是“Java，MySQL”，这样 数据就不一致了，解决办法就是将多值属性放入一个新表</li></ul><p><img src="`+o+'" alt="image-20250510162648922"></p></li></ol></blockquote><h2 id="%E8%8C%83%E5%BC%8F%E4%B8%8E%E6%80%A7%E8%83%BD%E7%9A%84%E5%8F%96%E8%88%8D" tabindex="-1">范式与性能的取舍 <a class="header-anchor" href="#范式与性能的取舍" aria-label="Permalink to &quot;范式与性能的取舍&quot;">​</a></h2><p><img src="'+g+`" alt="image-20250510163045097"></p><ul><li>范式高 ➝ 表拆得多 ➝ 查询更复杂 ➝ 性能更差（多表 JOIN）。</li><li>实际项目中： <ul><li>通常满足 <strong>第三范式即可</strong>；</li><li>有时会 <strong>适当冗余</strong>，换取性能；</li><li>根据业务频率和场景决定是否范式化。</li></ul></li></ul><h2 id="%E5%80%99%E9%80%89%E9%94%AE" tabindex="-1">候选键 <a class="header-anchor" href="#候选键" aria-label="Permalink to &quot;候选键&quot;">​</a></h2><blockquote><p>在关系型数据库中，<strong>候选键（Candidate Key）</strong> 是能够唯一标识表中每一行数据的最小属性集。它是数据库设计的基础概念，用于确保数据的完整性和查询效率。以下是详细解释：</p><h3 id="%E5%AE%9A%E4%B9%89%E4%B8%8E%E7%89%B9%E6%80%A7" tabindex="-1"><strong>定义与特性</strong> <a class="header-anchor" href="#定义与特性" aria-label="Permalink to &quot;**定义与特性**&quot;">​</a></h3><ol><li><strong>唯一性</strong>：候选键的任何两个元组（行）在该属性集上的值都不相同。</li><li><strong>最小性</strong>：候选键的任何真子集都不能唯一标识元组（即去掉任何一个属性后，剩余属性无法保证唯一性）。</li><li><strong>可选性</strong>：一个表可以有多个候选键，但至少存在一个（主键通常从候选键中选择）。</li></ol><h3 id="%E7%A4%BA%E4%BE%8B%E8%AF%B4%E6%98%8E" tabindex="-1"><strong>示例说明</strong> <a class="header-anchor" href="#示例说明" aria-label="Permalink to &quot;**示例说明**&quot;">​</a></h3><p>假设有学生表 <code>Student</code> 包含以下字段： <code>(学号, 身份证号, 姓名, 年龄, 班级)</code></p><ul><li><strong>候选键分析</strong>： <ol><li><strong>{学号}</strong>：唯一标识学生，不可再分。</li><li><strong>{身份证号}</strong>：唯一标识学生，不可再分。</li><li><strong>{学号，姓名}</strong>：虽然组合能唯一标识，但非最小集（因单独<code>学号</code>已足够）。</li></ol></li><li><strong>结论</strong>：<code>{学号}</code> 和 <code>{身份证号}</code> 是候选键，而 <code>{学号, 姓名}</code> 不是。</li></ul><h3 id="%E5%80%99%E9%80%89%E9%94%AE%20vs%20%E4%B8%BB%E9%94%AE%20vs%20%E8%B6%85%E9%94%AE" tabindex="-1"><strong>候选键 vs 主键 vs 超键</strong> <a class="header-anchor" href="#候选键 vs 主键 vs 超键" aria-label="Permalink to &quot;**候选键 vs 主键 vs 超键**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>概念</th><th>定义</th><th>示例（学生表）</th></tr></thead><tbody><tr><td><strong>候选键</strong></td><td>唯一且最小的属性集</td><td><code>{学号}</code>、<code>{身份证号}</code></td></tr><tr><td><strong>主键</strong></td><td>从候选键中选定的 “主” 标识（唯一且非空）</td><td><code>{学号}</code>（假设选为主键）</td></tr><tr><td><strong>超键</strong></td><td>包含候选键的属性集（可能不满足最小性）</td><td><code>{学号}</code>、<code>{学号, 姓名}</code></td></tr></tbody></table></blockquote><h2 id="%E9%9D%A2%E8%AF%95%E9%97%AE%E6%B3%95%E4%B8%8E%E7%AD%94%E9%A2%98%E5%A5%97%E8%B7%AF%EF%BC%88%E5%BB%BA%E8%AE%AE%E8%BF%99%E6%A0%B7%E7%AD%94%EF%BC%89" tabindex="-1">面试问法与答题套路（建议这样答） <a class="header-anchor" href="#面试问法与答题套路（建议这样答）" aria-label="Permalink to &quot;面试问法与答题套路（建议这样答）&quot;">​</a></h2><blockquote><p><strong>Q: 你对数据库范式的理解？</strong></p></blockquote><p>可从两个角度答：</p><p><strong>① 作用：</strong></p><ul><li>避免数据冗余，提高数据一致性，防止异常（更新、插入、删除）。</li></ul><p><strong>② 常用范式说明：</strong></p><ul><li>第一范式：字段原子性；--- 不可再分</li><li>第二范式：消除部分依赖；--- 基本完全依赖于主键-主要针对联合主键</li><li>第三范式：消除传递依赖（推荐遵守）；--- 在满足2NF基础上，消除对“非主属性”的依赖</li><li>BCNF：理解即可，实际少用； --- 每个都是 候选键 , 能通过候选键 都能唯一 查到</li><li>第四范式: 避免 出现 多值, 保持 一致性--比如 大小写</li><li>实际开发中：遵循第三范式，必要时做性能优化可容忍冗余。</li></ul><h1 id="%E5%BA%93%E6%93%8D%E4%BD%9C" tabindex="-1">库操作 <a class="header-anchor" href="#库操作" aria-label="Permalink to &quot;库操作&quot;">​</a></h1><h2 id="SQL%EF%BC%88Structured%20Query%20Language%EF%BC%89%E6%98%AF%E9%80%9A%E7%94%A8%E8%AF%AD%E8%A8%80" tabindex="-1">SQL（Structured Query Language）是通用语言 <a class="header-anchor" href="#SQL（Structured Query Language）是通用语言" aria-label="Permalink to &quot;SQL（Structured Query Language）是通用语言&quot;">​</a></h2><ul><li><strong>SQL 是结构化查询语言，不专属于 MySQL</strong>。</li><li>几乎所有关系型数据库系统（RDBMS）都支持 SQL，例如： <ul><li>MySQL、SQL Server、Oracle、DB2、MariaDB、PostgreSQL、SQLite 等。</li></ul></li><li>各个数据库对 SQL 的支持有细微差异（比如分页语法），但大约 <strong>95% 是相同的</strong>。</li></ul><hr><h2 id="SQL%20%E4%B8%AD%E6%9C%80%E6%A0%B8%E5%BF%83%E3%80%81%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84%E6%98%AF%E3%80%8C%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%EF%BC%88SELECT%EF%BC%89%E3%80%8D" tabindex="-1">SQL 中最核心、最常用的是「查询语句（SELECT）」 <a class="header-anchor" href="#SQL 中最核心、最常用的是「查询语句（SELECT）」" aria-label="Permalink to &quot;SQL 中最核心、最常用的是「查询语句（SELECT）」&quot;">​</a></h2><ul><li>在 CRUD（增删改查）四种操作中，<strong>查询（Read）使用频率远高于其他操作</strong>。 <ul><li>例如：电商 App 中用户的浏览（查询）远多于购买（新增）。</li></ul></li><li>查询 SQL 涉及内容非常多： <ul><li>单表查询</li><li>多表查询（内连接、外连接）</li><li>子查询</li><li>索引优化</li><li>查询性能分析</li></ul></li><li><strong>实际工作和面试中经常会被问到“SQL 优化”和“索引设计”等问题。</strong></li></ul><hr><h2 id="SQL%20%E5%88%86%E7%B1%BB%EF%BC%9A%E4%B8%89%E5%A4%A7%E7%B1%BB%E8%AF%AD%E5%8F%A5" tabindex="-1">SQL 分类：三大类语句 <a class="header-anchor" href="#SQL 分类：三大类语句" aria-label="Permalink to &quot;SQL 分类：三大类语句&quot;">​</a></h2><table tabindex="0"><thead><tr><th>类型</th><th>全称</th><th>含义</th><th>常见指令</th></tr></thead><tbody><tr><td>DDL</td><td>Data Definition Language</td><td>数据定义语言（库、表结构定义）</td><td><code>CREATE</code>、<code>DROP</code>删除数据库对象、<code>ALTER</code>修改已有的数据库对象结构(少用)</td></tr><tr><td>DML</td><td>Data Manipulation Language</td><td>数据操作语言（增删改查）</td><td><code>INSERT</code>、<code>DELETE</code>、<code>UPDATE</code>、<code>SELECT</code>---CRUD</td></tr><tr><td>DCL</td><td>Data Control Language</td><td>数据控制语言（权限）</td><td><code>GRANT</code>、<code>REVOKE</code></td></tr></tbody></table><h2 id="GRANT" tabindex="-1"><code>GRANT</code> <a class="header-anchor" href="#GRANT" aria-label="Permalink to &quot;\`GRANT\`&quot;">​</a></h2><p>用于<strong>授予用户权限</strong>，例如对数据库、表、列的操作权限。 <strong>常见权限</strong>：<code>SELECT</code>、<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>、<code>ALL</code> 等。</p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GRANT SELECT, INSERT ON users TO </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;alice&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;localhost&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="REVOKE" tabindex="-1"><code>REVOKE</code> <a class="header-anchor" href="#REVOKE" aria-label="Permalink to &quot;\`REVOKE\`&quot;">​</a></h2><p>用于<strong>收回已授予的权限</strong>。</p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">REVOKE INSERT ON users FROM </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;alice&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;localhost&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><hr><h2 id="%E9%87%8D%E7%82%B9%E5%BC%BA%E8%B0%83%E7%9A%84%E5%87%A0%E7%82%B9%E5%BB%BA%E8%AE%AE" tabindex="-1">重点强调的几点建议 <a class="header-anchor" href="#重点强调的几点建议" aria-label="Permalink to &quot;重点强调的几点建议&quot;">​</a></h2><blockquote><ul><li><h3 id="%E5%BA%93%E5%92%8C%E8%A1%A8%E7%9A%84%E5%91%BD%E5%90%8D%E4%B8%8D%E8%A6%81%E4%B8%8E%20SQL%20%E5%85%B3%E9%94%AE%E5%AD%97%E9%87%8D%E5%A4%8D" tabindex="-1"><strong>库和表的命名</strong>不要与 SQL 关键字重复 <a class="header-anchor" href="#库和表的命名不要与 SQL 关键字重复" aria-label="Permalink to &quot;**库和表的命名**不要与 SQL 关键字重复&quot;">​</a></h3><p>例如不要命名为 <code>select</code>、<code>user</code> 等。</p></li><li><h3 id="%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%EF%BC%88%E5%A6%82%20MySQL%EF%BC%89%E6%9C%AC%E8%BA%AB%E5%8F%AB%E5%81%9A%20RDBMS%EF%BC%88%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%89" tabindex="-1">数据库系统（如 MySQL）本身叫做 <strong>RDBMS（关系型数据库管理系统）</strong> <a class="header-anchor" href="#数据库系统（如 MySQL）本身叫做 RDBMS（关系型数据库管理系统）" aria-label="Permalink to &quot;数据库系统（如 MySQL）本身叫做 **RDBMS（关系型数据库管理系统）**&quot;">​</a></h3><p>可以创建多个数据库（库名），每个数据库下可以建多个表（表名）。</p></li><li><h3 id="%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8%20%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93%20%E8%80%8C%E9%9D%9E%20GUI%20%E5%B7%A5%E5%85%B7%EF%BC%88%E5%A6%82%20Navicat%EF%BC%89" tabindex="-1">推荐使用 <strong>命令行操作数据库</strong> 而非 GUI 工具（如 Navicat） <a class="header-anchor" href="#推荐使用 命令行操作数据库 而非 GUI 工具（如 Navicat）" aria-label="Permalink to &quot;推荐使用 **命令行操作数据库** 而非 GUI 工具（如 Navicat）&quot;">​</a></h3><p>以加强对 SQL 的熟练掌握。</p></li><li><p>实际项目中，数据库命名要 <strong>遵守统一规范</strong>，以保证团队协作与维护便利。</p></li></ul></blockquote><hr><h2 id="%E5%AE%9E%E8%B7%B5%E6%93%8D%E4%BD%9C%E6%BC%94%E7%A4%BA%E8%A6%81%E7%82%B9%EF%BC%88%E5%9F%BA%E4%BA%8E%20ubuntu22.04%20%2B%20MySQL%EF%BC%89" tabindex="-1">实践操作演示要点（基于 ubuntu22.04 + MySQL） <a class="header-anchor" href="#实践操作演示要点（基于 ubuntu22.04 %2B MySQL）" aria-label="Permalink to &quot;实践操作演示要点（基于 ubuntu22.04 + MySQL）&quot;">​</a></h2><ol><li><p><strong>查看当前已有数据库：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SHOW DATABASES;</span></span></code></pre></div></li><li><p><strong>创建新数据库：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE DATABASE chat;</span></span></code></pre></div></li><li><p><strong>选择数据库（进入库）：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>USE chat;</span></span></code></pre></div></li><li><p><strong>查看当前库下的所有表：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SHOW TABLES;</span></span></code></pre></div></li><li><p><strong>删除数据库：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DROP DATABASE chat;</span></span></code></pre></div></li></ol><hr><h2 id="RDBMS%20%E7%9A%84%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84%E5%92%8C%E8%8C%83%E5%BC%8F%E7%90%86%E8%A7%A3" tabindex="-1">RDBMS 的组织结构和范式理解 <a class="header-anchor" href="#RDBMS 的组织结构和范式理解" aria-label="Permalink to &quot;RDBMS 的组织结构和范式理解&quot;">​</a></h2><ul><li><p>RDBMS 组织结构是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>MySQL Server</span></span>
<span class="line"><span>   └── 数据库（库）</span></span>
<span class="line"><span>          └── 表（table）</span></span>
<span class="line"><span>                └── 行（记录）和列（字段）</span></span></code></pre></div></li><li><p>为什么叫“关系型”？表与表之间可以建立关联（如外键），且<strong>每一列具有原子性（第一范式）</strong>。</p></li><li><p>相对的，非关系型数据库（如 NoSQL 的 KV 存储）则不满足原子性。</p></li></ul><h1 id="%E8%A1%A8%E6%93%8D%E4%BD%9C" tabindex="-1">表操作 <a class="header-anchor" href="#表操作" aria-label="Permalink to &quot;表操作&quot;">​</a></h1><h2 id="%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C" tabindex="-1">数据库与表的基本操作 <a class="header-anchor" href="#数据库与表的基本操作" aria-label="Permalink to &quot;数据库与表的基本操作&quot;">​</a></h2><blockquote><h4 id="1.%20%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C" tabindex="-1">1. 数据库操作 <a class="header-anchor" href="#1. 数据库操作" aria-label="Permalink to &quot;1. 数据库操作&quot;">​</a></h4><ul><li><p><strong>创建数据库</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE DATABASE school;</span></span></code></pre></div></li><li><p><strong>使用数据库</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>USE school;</span></span></code></pre></div></li><li><p><strong>查看当前数据库所有表</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SHOW TABLES;</span></span></code></pre></div></li></ul><h4 id="2.%20%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%BA%93%2F%E8%A1%A8" tabindex="-1">2. 删除数据库/表 <a class="header-anchor" href="#2. 删除数据库%2F表" aria-label="Permalink to &quot;2. 删除数据库/表&quot;">​</a></h4><ul><li><p><strong>删除数据库</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DROP DATABASE dbname;</span></span></code></pre></div></li><li><p><strong>删除表</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DROP TABLE user;</span></span></code></pre></div></li></ul></blockquote><h2 id="%E5%88%9B%E5%BB%BA%E8%A1%A8%E7%9A%84%E8%AF%AD%E6%B3%95%E4%B8%8E%E5%AE%9E%E8%B7%B5" tabindex="-1">创建表的语法与实践 <a class="header-anchor" href="#创建表的语法与实践" aria-label="Permalink to &quot;创建表的语法与实践&quot;">​</a></h2><blockquote><h4 id="%E7%A4%BA%E4%BE%8B%EF%BC%9A%E5%88%9B%E5%BB%BA%20user%20%E8%A1%A8" tabindex="-1">示例：创建 <code>user</code> 表 <a class="header-anchor" href="#示例：创建 user 表" aria-label="Permalink to &quot;示例：创建 \`user\` 表&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TABLE user (</span></span>
<span class="line"><span>  id INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT &#39;主键ID&#39;,</span></span>
<span class="line"><span>  name VARCHAR(50) NOT NULL UNIQUE COMMENT &#39;用户名&#39;,</span></span>
<span class="line"><span>  age TINYINT NOT NULL COMMENT &#39;年龄&#39;,</span></span>
<span class="line"><span>  sex ENUM(&#39;man&#39;, &#39;woman&#39;) NOT NULL COMMENT &#39;性别&#39;,</span></span>
<span class="line"><span>  PRIMARY KEY (id)</span></span>
<span class="line"><span>) ENGINE=InnoDB DEFAULT CHARSET=utf8; </span></span>
<span class="line"><span>//  有时候, 设置不能为空, 又不知道值, 可以设置一个 默认值</span></span></code></pre></div><h4 id="%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%EF%BC%88%E5%AE%B9%E6%98%93%E5%86%99%E9%94%99%EF%BC%89%EF%BC%9A" tabindex="-1">常见问题（容易写错）： <a class="header-anchor" href="#常见问题（容易写错）：" aria-label="Permalink to &quot;常见问题（容易写错）：&quot;">​</a></h4><ul><li><code>AUTO_INCREMENT</code> 中间有下划线，不是空格。</li><li><code>PRIMARY KEY</code> 是两个词。</li><li><code>VARCHAR(n)</code> 中 <code>n</code> 表示最大<strong>字节数</strong>，不是字符数。</li><li>整数类型的长度（如 <code>INT(8)</code>）只是<strong>显示宽度</strong>，不影响存储大小。</li></ul></blockquote><hr><h2 id="%E5%AD%97%E6%AE%B5%E5%AE%8C%E6%95%B4%E6%80%A7%E7%BA%A6%E6%9D%9F%EF%BC%886%E7%A7%8D%EF%BC%89" tabindex="-1">字段完整性约束（6种） <a class="header-anchor" href="#字段完整性约束（6种）" aria-label="Permalink to &quot;字段完整性约束（6种）&quot;">​</a></h2><table tabindex="0"><thead><tr><th>约束类型</th><th>含义与作用</th></tr></thead><tbody><tr><td><code>PRIMARY KEY</code></td><td>主键，唯一且不能为空</td></tr><tr><td><code>UNIQUE</code></td><td>唯一约束，可以为空，但值不可重复</td></tr><tr><td><code>NOT NULL</code></td><td>不能为空</td></tr><tr><td><code>DEFAULT</code></td><td>设置默认值</td></tr><tr><td><code>AUTO_INCREMENT</code></td><td>自增，只能用于整数类型，通常用于主键</td></tr><tr><td><code>FOREIGN KEY</code></td><td>外键，表示表与表之间的关联</td></tr></tbody></table><blockquote><h3 id="%E5%BC%80%E5%8F%91%E4%B8%AD%E5%AE%9E%E8%B7%B5%E5%BB%BA%E8%AE%AE%EF%BC%9A" tabindex="-1"><strong>开发中实践建议：</strong> <a class="header-anchor" href="#开发中实践建议：" aria-label="Permalink to &quot;**开发中实践建议：**&quot;">​</a></h3><ul><li>外键约束<strong>通常不直接设置</strong>在数据库层，而是放在业务逻辑中维护数据一致性，以减少数据库压力（避免磁盘 I/O 瓶颈）。</li></ul></blockquote><h2 id="%E8%A1%A8%E7%BB%93%E6%9E%84%E6%9F%A5%E7%9C%8B" tabindex="-1">表结构查看 <a class="header-anchor" href="#表结构查看" aria-label="Permalink to &quot;表结构查看&quot;">​</a></h2><ul><li><h3 id="%E6%9F%A5%E7%9C%8B%E8%A1%A8%E7%BB%93%E6%9E%84" tabindex="-1"><strong>查看表结构</strong> <a class="header-anchor" href="#查看表结构" aria-label="Permalink to &quot;**查看表结构**&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DESC user;</span></span></code></pre></div></li><li><h3 id="%E6%9F%A5%E7%9C%8B%E8%A1%A8%E5%88%9B%E5%BB%BA%E8%AF%AD%E5%8F%A5" tabindex="-1"><strong>查看表创建语句</strong> <a class="header-anchor" href="#查看表创建语句" aria-label="Permalink to &quot;**查看表创建语句**&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SHOW CREATE TABLE user;</span></span></code></pre></div></li><li><h3 id="%E8%A1%A8%E5%9C%A8%E5%88%9B%E5%BB%BA%E6%97%B6%2C%20%E5%AE%9E%E9%99%85%E6%98%AF%E5%88%9B%E5%BB%BA%E4%B8%89%E4%B8%AA%E4%B8%9C%E8%A5%BF" tabindex="-1">表在创建时, 实际是创建三个东西 <a class="header-anchor" href="#表在创建时%2C 实际是创建三个东西" aria-label="Permalink to &quot;表在创建时, 实际是创建三个东西&quot;">​</a></h3><ul><li><h3 id="%E8%A1%A8%E7%9A%84%E7%BB%93%E6%9E%84" tabindex="-1"><strong>表的结构</strong> <a class="header-anchor" href="#表的结构" aria-label="Permalink to &quot;**表的结构**&quot;">​</a></h3></li><li><h3 id="%E8%A1%A8%E7%9A%84%E6%95%B0%E6%8D%AE" tabindex="-1"><strong>表的数据</strong> <a class="header-anchor" href="#表的数据" aria-label="Permalink to &quot;**表的数据**&quot;">​</a></h3></li><li><h3 id="%E8%A1%A8%E7%9A%84%E7%B4%A2%E5%BC%95" tabindex="-1"><strong>表的索引</strong> <a class="header-anchor" href="#表的索引" aria-label="Permalink to &quot;**表的索引**&quot;">​</a></h3></li></ul></li></ul><hr><h2 id="%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E5%BC%95%E6%93%8E%E8%AE%BE%E7%BD%AE" tabindex="-1">字符集与引擎设置 <a class="header-anchor" href="#字符集与引擎设置" aria-label="Permalink to &quot;字符集与引擎设置&quot;">​</a></h2><ul><li><p>建议在创建表时显式设置：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ENGINE=InnoDB DEFAULT CHARSET=utf8;</span></span></code></pre></div></li><li><p><strong>MySQL 配置文件修改默认设置</strong></p><ul><li>Windows: <code>C:\\ProgramData\\MySQL\\my.ini</code></li><li>Linux: <code>/etc/my.cnf</code> 或 <code>/etc/mysql/my.cnf</code>----不同系统, 不同版本 不一样</li></ul></li></ul><hr><h2 id="%E6%80%9D%E7%BB%B4%E8%AE%AD%E7%BB%83%E4%B8%8E%E9%9D%A2%E8%AF%95%E5%BB%BA%E8%AE%AE" tabindex="-1">思维训练与面试建议 <a class="header-anchor" href="#思维训练与面试建议" aria-label="Permalink to &quot;思维训练与面试建议&quot;">​</a></h2><ul><li><strong>遇到数据库问题，要联想多个知识点一起思考：</strong><ul><li>是否索引未命中导致查询慢？</li><li>API 响应超时是否源于 SQL 性能？</li><li>是否将业务逻辑合理分层处理？</li></ul></li><li><strong>学习技巧：</strong><ul><li>把常用 SQL 写入文本文档，养成积累习惯。</li><li>遇到报错优先看关键字拼写、语法符号、字段类型是否正确。</li></ul></li></ul><h1 id="%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9Cselect" tabindex="-1">单表查询操作select <a class="header-anchor" href="#单表查询操作select" aria-label="Permalink to &quot;单表查询操作select&quot;">​</a></h1><h2 id="insert" tabindex="-1">insert <a class="header-anchor" href="#insert" aria-label="Permalink to &quot;insert&quot;">​</a></h2><blockquote><h3 id="%E4%BB%80%E4%B9%88%E6%98%AF%20INSERT%20%E8%AF%AD%E5%8F%A5%EF%BC%9F" tabindex="-1">什么是 <code>INSERT</code> 语句？ <a class="header-anchor" href="#什么是 INSERT 语句？" aria-label="Permalink to &quot;什么是 \`INSERT\` 语句？&quot;">​</a></h3><p><code>INSERT</code> 语句用于<strong>向表中插入数据</strong>。</p><hr><h3 id="%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95" tabindex="-1">基本语法 <a class="header-anchor" href="#基本语法" aria-label="Permalink to &quot;基本语法&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>INSERT INTO 表名 (列1, 列2, ...) VALUES (值1, 值2, ...);</span></span></code></pre></div><hr><h3 id="%E7%A4%BA%E4%BE%8B%E4%B8%80%EF%BC%9A%E6%8F%92%E5%85%A5%E4%B8%80%E6%9D%A1%E6%95%B0%E6%8D%AE" tabindex="-1">示例一：插入一条数据 <a class="header-anchor" href="#示例一：插入一条数据" aria-label="Permalink to &quot;示例一：插入一条数据&quot;">​</a></h3><p>假设我们有如下用户表：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TABLE user (</span></span>
<span class="line"><span>  id INT PRIMARY KEY,</span></span>
<span class="line"><span>  name VARCHAR(50),</span></span>
<span class="line"><span>  age INT,</span></span>
<span class="line"><span>  email VARCHAR(100)</span></span>
<span class="line"><span>);</span></span></code></pre></div><p>我们向表中插入一个用户：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>INSERT INTO user (id, name, age, email) VALUES (1, &#39;张三&#39;, 20, &#39;zhangsan@example.com&#39;);</span></span></code></pre></div><hr><h3 id="%E7%A4%BA%E4%BE%8B%E4%BA%8C%EF%BC%9A%E4%B8%80%E6%AC%A1%E6%8F%92%E5%85%A5%E5%A4%9A%E6%9D%A1%E6%95%B0%E6%8D%AE" tabindex="-1">示例二：一次插入多条数据 <a class="header-anchor" href="#示例二：一次插入多条数据" aria-label="Permalink to &quot;示例二：一次插入多条数据&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>INSERT INTO user (id, name, age, email) VALUES</span></span>
<span class="line"><span>(2, &#39;李四&#39;, 22, &#39;lisi@example.com&#39;),</span></span>
<span class="line"><span>(3, &#39;王五&#39;, 23, &#39;wangwu@example.com&#39;);</span></span></code></pre></div><hr><h3 id="%E7%A4%BA%E4%BE%8B%E4%B8%89%EF%BC%9A%E7%9C%81%E7%95%A5%E5%88%97%E5%90%8D%EF%BC%88%E4%B8%8D%E6%8E%A8%E8%8D%90%EF%BC%8C%E8%A6%81%E6%B1%82%E5%80%BC%E9%A1%BA%E5%BA%8F%E5%92%8C%E6%89%80%E6%9C%89%E5%88%97%E5%AE%8C%E5%85%A8%E4%B8%80%E8%87%B4%EF%BC%89" tabindex="-1">示例三：省略列名（<strong>不推荐</strong>，要求值顺序和所有列完全一致） <a class="header-anchor" href="#示例三：省略列名（不推荐，要求值顺序和所有列完全一致）" aria-label="Permalink to &quot;示例三：省略列名（**不推荐**，要求值顺序和所有列完全一致）&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>INSERT INTO user VALUES (4, &#39;赵六&#39;, 25, &#39;zhaoliu@example.com&#39;);</span></span></code></pre></div><hr><h3 id="%F0%9F%94%B8%20%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%9A" tabindex="-1">🔸 注意事项： <a class="header-anchor" href="#🔸 注意事项：" aria-label="Permalink to &quot;🔸 注意事项：&quot;">​</a></h3><ul><li><code>id</code> 是主键，不能重复；</li><li>插入数据时必须满足表结构和字段约束（比如类型、非空、唯一等）；</li><li>插入失败时数据库会报错，如违反主键唯一性。</li></ul></blockquote><h2 id="select" tabindex="-1">select <a class="header-anchor" href="#select" aria-label="Permalink to &quot;select&quot;">​</a></h2><ul><li>主要讲解的是 <strong>单表查询的 SQL 语句（SELECT）</strong>。</li><li>SELECT 是日常开发、面试、项目中最常见的 SQL 操作。</li><li>学好 SELECT 为后续学习 <strong>索引与 SQL 优化</strong> 打基础。</li><li>尽管此节暂未讲索引，但已提前强调一些 <strong>与索引密切相关的概念（如: 回表）</strong>。</li></ul><h2 id="%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E7%BB%93%E6%9E%84%EF%BC%9ASELECT%20%2B%20FROM" tabindex="-1">基本语法结构：SELECT + FROM <a class="header-anchor" href="#基本语法结构：SELECT %2B FROM" aria-label="Permalink to &quot;基本语法结构：SELECT + FROM&quot;">​</a></h2><blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT * FROM user;</span></span></code></pre></div><ul><li><code>SELECT</code> 和 <code>FROM</code> 是 SQL 的关键字，语法结构是固定的。</li><li><code>*</code> 是通配符，表示选择所有字段。</li></ul><h3 id="%E5%BB%BA%E8%AE%AE%EF%BC%9A%E4%B8%8D%E8%A6%81%E8%BD%BB%E6%98%93%E4%BD%BF%E7%94%A8%20*%EF%BC%8C%E5%8E%9F%E5%9B%A0%E5%A6%82%E4%B8%8B%EF%BC%9A" tabindex="-1">建议：不要轻易使用 <code>*</code>，原因如下： <a class="header-anchor" href="#建议：不要轻易使用 *，原因如下：" aria-label="Permalink to &quot;建议：不要轻易使用 \`*\`，原因如下：&quot;">​</a></h3><ol><li><strong>表结构变化风险大</strong>：以后字段增减时可能造成数据逻辑异常。</li><li><strong>不利于性能优化</strong>：会增加 IO 与网络传输的负担。</li><li><strong>可能影响索引优化效果</strong>：增加“回表”风险（后面详细讲）。</li></ol><h3 id="%E6%9B%B4%E6%8E%A8%E8%8D%90%E7%9A%84%E5%86%99%E6%B3%95%EF%BC%9A" tabindex="-1">更推荐的写法： <a class="header-anchor" href="#更推荐的写法：" aria-label="Permalink to &quot;更推荐的写法：&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT name, age, sex FROM user;</span></span></code></pre></div></blockquote><h2 id="WHERE%20%E5%AD%90%E5%8F%A5%EF%BC%9A%E6%B7%BB%E5%8A%A0%E8%BF%87%E6%BB%A4%E6%9D%A1%E4%BB%B6" tabindex="-1">WHERE 子句：添加过滤条件 <a class="header-anchor" href="#WHERE 子句：添加过滤条件" aria-label="Permalink to &quot;WHERE 子句：添加过滤条件&quot;">​</a></h2><blockquote><ul><li><code>WHERE</code> 后面可以添加 <strong>各种比较或逻辑条件</strong>，用于筛选数据。</li></ul><h3 id="%E5%B8%B8%E7%94%A8%E6%9D%A1%E4%BB%B6%E7%B1%BB%E5%9E%8B%E7%A4%BA%E4%BE%8B%EF%BC%9A" tabindex="-1">常用条件类型示例： <a class="header-anchor" href="#常用条件类型示例：" aria-label="Permalink to &quot;常用条件类型示例：&quot;">​</a></h3><table tabindex="0"><thead><tr><th>类型</th><th>示例语法</th><th>说明</th></tr></thead><tbody><tr><td>比较运算</td><td><code>age &gt;= 21</code></td><td>年龄大于等于 21</td></tr><tr><td>逻辑运算</td><td><code>sex = &#39;woman&#39; AND age &gt; 20</code> ---- 还有 OR</td><td>同时满足两个条件</td></tr><tr><td>范围查询</td><td><code>age BETWEEN 20 AND 22</code></td><td>包含 20 和 22</td></tr><tr><td>多值匹配</td><td><code>age IN (20, 21)</code></td><td>年龄为 20 或 21</td></tr><tr><td>排除匹配</td><td><code>age NOT IN (20, 21)</code></td><td>年龄不是 20 或 21</td></tr><tr><td>模糊匹配</td><td><code>name LIKE &#39;张%&#39;</code></td><td>以“张”开头的名字</td></tr><tr><td>空值判断</td><td><code>name IS NULL</code> / <code>IS NOT NULL</code></td><td>判断是否为空</td></tr></tbody></table><p>⚠️ 注意：</p><ul><li>使用通配符 <code>%</code> 或 <code>_</code> 时，需要搭配 <code>LIKE</code> 使用，不能用 <code>=</code>。</li><li>判断空值用 <code>IS NULL</code> 或 <code>IS NOT NULL</code>，不能用 <code>= NULL</code>。</li></ul></blockquote><h2 id="%E5%8E%BB%E9%87%8Ddistinct%20%E4%B8%8E%20GROUP%20BY" tabindex="-1">去重distinct 与 GROUP BY <a class="header-anchor" href="#去重distinct 与 GROUP BY" aria-label="Permalink to &quot;去重distinct 与 GROUP BY&quot;">​</a></h2><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">select distinct age from user;</span></span></code></pre></div><p>可以通过这种 方式 查看 age 的分布, 不需要重复</p><p>GROUP BY 大材小用!!</p><h2 id="%E4%BB%80%E4%B9%88%E6%98%AF%20UNION%EF%BC%9F" tabindex="-1">什么是 <code>UNION</code>？ <a class="header-anchor" href="#什么是 UNION？" aria-label="Permalink to &quot;什么是 \`UNION\`？&quot;">​</a></h2><blockquote><ul><li><code>UNION</code> 用于 <strong>合并两个或多个 <code>SELECT</code> 查询结果</strong>。---- 仅是显示, 不 创建新表</li><li>每个 <code>SELECT</code> 语句的字段数量和顺序必须相同，字段类型也要兼容。</li><li>默认情况下，<code>UNION</code> 会自动去重（即重复的行只保留一条）。</li></ul><hr><h3 id="%F0%9F%94%B9%20UNION%20%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95" tabindex="-1">🔹 <code>UNION</code> 基本语法 <a class="header-anchor" href="#🔹 UNION 基本语法" aria-label="Permalink to &quot;🔹 \`UNION\` 基本语法&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT column1, column2 FROM table1</span></span>
<span class="line"><span>UNION</span></span>
<span class="line"><span>SELECT column1, column2 FROM table2;</span></span></code></pre></div><hr><h3 id="%F0%9F%94%B9%20UNION%20ALL%20%E4%B8%8E%20UNION%20%E7%9A%84%E5%8C%BA%E5%88%AB" tabindex="-1">🔹 <code>UNION ALL</code> 与 <code>UNION</code> 的区别 <a class="header-anchor" href="#🔹 UNION ALL 与 UNION 的区别" aria-label="Permalink to &quot;🔹 \`UNION ALL\` 与 \`UNION\` 的区别&quot;">​</a></h3><table tabindex="0"><thead><tr><th>关键字</th><th>是否去重</th><th>性能</th></tr></thead><tbody><tr><td><code>UNION</code></td><td>✅ 自动去重</td><td>较慢（有去重计算）</td></tr><tr><td><code>UNION ALL</code></td><td>❌ 不去重</td><td>更快（直接合并）</td></tr></tbody></table><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-- 会去除重复记录</span></span>
<span class="line"><span>SELECT name FROM user1</span></span>
<span class="line"><span>UNION</span></span>
<span class="line"><span>SELECT name FROM user2;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 不去除重复记录</span></span>
<span class="line"><span>SELECT name FROM user1</span></span>
<span class="line"><span>UNION ALL</span></span>
<span class="line"><span>SELECT name FROM user2;</span></span></code></pre></div></blockquote><h2 id="%E5%85%B3%E4%BA%8E%E2%80%9C%E5%9B%9E%E8%A1%A8%E2%80%9D%E7%9A%84%E6%8F%90%E5%89%8D%E6%8F%90%E9%86%92" tabindex="-1">关于“回表”的提前提醒 <a class="header-anchor" href="#关于“回表”的提前提醒" aria-label="Permalink to &quot;关于“回表”的提前提醒&quot;">​</a></h2><ul><li><strong>什么是回表？</strong><ul><li>当使用覆盖索引查询字段时，如果你查询的字段不在索引中，数据库需回到主表读取完整数据，这就叫回表。</li></ul></li><li><strong>为什么要避免回表？</strong><ul><li>回表会造成额外的磁盘 IO，性能下降。</li></ul></li><li><strong>如何减少回表？</strong><ul><li>查询时精确指定字段，并结合索引的设计来决定。</li><li>使用覆盖索引的思维：尽量只查在索引列中的字段。</li></ul></li></ul><h2 id="%E9%80%BB%E8%BE%91%E6%88%96%EF%BC%88OR%EF%BC%89%E3%80%81IN%E3%80%81NOT%20IN%20%E7%AD%89%E5%88%B0%E5%BA%95%E8%83%BD%E4%B8%8D%E8%83%BD%E7%94%A8%E7%B4%A2%E5%BC%95%EF%BC%9F%E8%AF%AF%E5%8C%BA" tabindex="-1">逻辑或（<code>OR</code>）、<code>IN</code>、<code>NOT IN</code> 等到底能不能用索引？误区 <a class="header-anchor" href="#逻辑或（OR）、IN、NOT IN 等到底能不能用索引？误区" aria-label="Permalink to &quot;逻辑或（\`OR\`）、\`IN\`、\`NOT IN\` 等到底能不能用索引？误区&quot;">​</a></h2><blockquote><h3 id="%E5%B8%B8%E8%A7%81%E8%AF%AF%E5%8C%BA%EF%BC%9A" tabindex="-1">常见误区： <a class="header-anchor" href="#常见误区：" aria-label="Permalink to &quot;常见误区：&quot;">​</a></h3><p>很多资料或书上说——<strong>“逻辑或（<code>OR</code>）不能用索引”、“<code>NOT IN</code> 不能用索引”</strong>，这其实是<strong>不严谨甚至错误的理解！</strong></p><h3 id="%E6%AD%A3%E7%A1%AE%E7%90%86%E8%A7%A3%EF%BC%9AMySQL%20%E6%98%AF%E4%BC%9A%E8%87%AA%E5%8A%A8%E4%BC%98%E5%8C%96%20SQL%20%E7%9A%84%EF%BC%81" tabindex="-1">正确理解：MySQL 是会自动优化 SQL 的！ <a class="header-anchor" href="#正确理解：MySQL 是会自动优化 SQL 的！" aria-label="Permalink to &quot;正确理解：MySQL 是会自动优化 SQL 的！&quot;">​</a></h3><h4 id="%F0%9F%94%B8%20%E4%B8%BE%E4%B8%AA%E4%BE%8B%E5%AD%90%EF%BC%8COR%20%E6%9D%A1%E4%BB%B6%EF%BC%9A" tabindex="-1">🔸 举个例子，<code>OR</code> 条件： <a class="header-anchor" href="#🔸 举个例子，OR 条件：" aria-label="Permalink to &quot;🔸 举个例子，\`OR\` 条件：&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT name, age, sex FROM user WHERE age = 20 OR age = 21;</span></span></code></pre></div><p>看起来是一个 <code>OR</code> 条件，<strong>好像不能用索引？</strong></p><p>不对！MySQL 会对这个 SQL 自动进行<strong>优化转换</strong>，转换成两个单独的 <code>SELECT</code>，再使用 <code>UNION ALL</code> 合并结果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT name, age, sex FROM user WHERE age = 20</span></span>
<span class="line"><span>UNION ALL</span></span>
<span class="line"><span>SELECT name, age, sex FROM user WHERE age = 21;</span></span></code></pre></div><p>这两个 <code>SELECT</code> 查询都可以<strong>分别使用索引</strong>，也就达到了使用索引的目的。</p><h3 id="MySQL%20%E4%BC%9A%E8%87%AA%E5%8A%A8%E8%BD%AC%E6%8D%A2%E6%88%90%E6%9B%B4%E9%80%82%E5%90%88%E8%B5%B0%E7%B4%A2%E5%BC%95%E7%9A%84%E7%BB%93%E6%9E%84%EF%BC%9A" tabindex="-1">MySQL 会自动转换成更适合走索引的结构： <a class="header-anchor" href="#MySQL 会自动转换成更适合走索引的结构：" aria-label="Permalink to &quot;MySQL 会自动转换成更适合走索引的结构：&quot;">​</a></h3><table tabindex="0"><thead><tr><th>场景</th><th>原始写法</th><th>优化后可能转换为</th><th>是否能走索引</th></tr></thead><tbody><tr><td><code>OR</code> 条件</td><td><code>a = 1 OR a = 2</code></td><td>两个子查询 + <code>UNION ALL</code></td><td>✅ 能</td></tr><tr><td><code>IN</code> 条件</td><td><code>a IN (1,2,3)</code></td><td>相当于多个 <code>OR</code></td><td>✅ 能</td></tr><tr><td><code>NOT IN</code></td><td><code>a NOT IN (1,2)</code></td><td>复杂逻辑，<strong>可能不能</strong>优化</td><td>⚠️ 有时不能走索引</td></tr><tr><td><code>NOT EXISTS</code> / <code>NOT IN</code> 替换</td><td>推荐用 <code>NOT EXISTS</code></td><td>✅ 更好优化</td><td>✅ 更建议</td></tr></tbody></table><h3 id="%E5%85%B3%E9%94%AE%E6%8F%90%E9%86%92%EF%BC%9A" tabindex="-1">关键提醒： <a class="header-anchor" href="#关键提醒：" aria-label="Permalink to &quot;关键提醒：&quot;">​</a></h3><ul><li>不要<strong>死背教条</strong>：“某个语法就一定不能用索引”——这只是在<strong>SQL 没被优化</strong>的前提下；</li><li>实际情况中，MySQL 会<strong>根据执行计划自动选择是否拆分、合并查询</strong>；</li><li>所以：<strong>逻辑或（<code>OR</code>）、<code>IN</code> 是有可能、甚至是常常可以用到索引的！</strong></li></ul></blockquote><h2 id="%E7%A4%BA%E4%BE%8B" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><blockquote><p>pdf 有 带 in 子查询, in 里面还可以 是 select语句</p></blockquote><blockquote><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">create database test;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">use test;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CREATE TABLE </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  id INT UNSIGNED NOT </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AUTO_INCREMENT COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;主键ID&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) NOT </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UNIQUE COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;用户名&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  age TINYINT NOT </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;年龄&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  sex </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ENUM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;man&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;woman&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) NOT </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;性别&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  PRIMARY </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ENGINE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">InnoDB DEFAULT CHARSET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">utf8; </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">insert into </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name,age,sex) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hui sang&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">28</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;man&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xu ting&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">26</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;man&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xing huai&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">27</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;man&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hai sang&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;woman&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;jiji ko&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;woman&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SELECT name, age, sex FROM user WHERE age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UNION ALL SELECT name, age, sex FROM user WHERE sex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;man&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> select age from user where age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">select distinct age from user;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> select </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> from user where age </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">28</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></blockquote><h2 id="%E9%94%99%E8%AF%AF" tabindex="-1">错误 <a class="header-anchor" href="#错误" aria-label="Permalink to &quot;错误&quot;">​</a></h2><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">select name age sex from user age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> union</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> all</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> select</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> age</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sex</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> from</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> user</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;man&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>语法错误点：</p><p>缺了 WHERE（应该是 WHERE age &gt; 25）；</p><p>列之间少了逗号（应写作 SELECT name, age, sex）；</p><h1 id="limiit%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2(%E4%B8%80)" tabindex="-1">limiit分页查询(一) <a class="header-anchor" href="#limiit分页查询(一)" aria-label="Permalink to &quot;limiit分页查询(一)&quot;">​</a></h1><h2 id="%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E7%9A%84%E5%BF%85%E8%A6%81%E6%80%A7" tabindex="-1">分页查询的必要性 <a class="header-anchor" href="#分页查询的必要性" aria-label="Permalink to &quot;分页查询的必要性&quot;">​</a></h2><blockquote><h3 id="1.%20%E9%81%BF%E5%85%8D%E4%B8%80%E6%AC%A1%E5%8A%A0%E8%BD%BD%E8%BF%87%E5%A4%9A%E6%95%B0%E6%8D%AE" tabindex="-1">1. 避免一次加载过多数据 <a class="header-anchor" href="#1. 避免一次加载过多数据" aria-label="Permalink to &quot;1. 避免一次加载过多数据&quot;">​</a></h3><ul><li>比如电商平台中有几千上万商品，不能全部一口气展示。</li><li>分页可以提高可读性，方便定位查看。</li></ul><h3 id="2.%20%E6%8F%90%E5%8D%87%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C" tabindex="-1">2. 提升用户体验 <a class="header-anchor" href="#2. 提升用户体验" aria-label="Permalink to &quot;2. 提升用户体验&quot;">​</a></h3><ul><li>页面加载更快。</li><li>翻到第几页、找回看过内容更容易。</li></ul><h3 id="3.%20%E9%99%8D%E4%BD%8E%E7%B3%BB%E7%BB%9F%E8%B4%9F%E8%BD%BD" tabindex="-1">3. 降低系统负载 <a class="header-anchor" href="#3. 降低系统负载" aria-label="Permalink to &quot;3. 降低系统负载&quot;">​</a></h3><ul><li>每次只查询并传输少量数据，减少数据库压力。</li></ul><p>分页常结合 <code>LIMIT</code> 或 <code>OFFSET</code> 使用，并配合索引优化查询效率，是现代数据库开发中的基础功能。</p></blockquote><h2 id="LIMIT%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95" tabindex="-1">LIMIT基本语法 <a class="header-anchor" href="#LIMIT基本语法" aria-label="Permalink to &quot;LIMIT基本语法&quot;">​</a></h2><blockquote><ol><li><h3 id="%E5%9F%BA%E6%9C%AC%E5%BD%A2%E5%BC%8F%EF%BC%9A" tabindex="-1"><strong>基本形式</strong>： <a class="header-anchor" href="#基本形式：" aria-label="Permalink to &quot;**基本形式**：&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT * FROM user LIMIT n;</span></span></code></pre></div><ul><li>返回查询结果的前n条记录</li><li>等价于<code>LIMIT 0, n</code></li></ul></li><li><h3 id="%E5%B8%A6%E5%81%8F%E7%A7%BB%E9%87%8F%E7%9A%84%E5%BD%A2%E5%BC%8F%EF%BC%9A" tabindex="-1"><strong>带偏移量的形式</strong>： <a class="header-anchor" href="#带偏移量的形式：" aria-label="Permalink to &quot;**带偏移量的形式**：&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT * FROM user LIMIT m, n;</span></span></code></pre></div><ul><li>m表示偏移量(从0开始)，n表示要返回的记录数</li><li>例如<code>LIMIT 1, 3</code>表示<strong>跳过1条记录，返回接下来的3条</strong></li></ul></li><li><h3 id="%E4%BD%BF%E7%94%A8OFFSET%E5%85%B3%E9%94%AE%E5%AD%97%EF%BC%9A%20%20%20%E5%8F%AF%E8%AF%BB%E6%80%A7%E6%9B%B4%E5%BC%BA%E7%9A%84%E8%AF%AD%E6%B3%95" tabindex="-1"><strong>使用OFFSET关键字</strong>： 可读性更强的语法 <a class="header-anchor" href="#使用OFFSET关键字：   可读性更强的语法" aria-label="Permalink to &quot;**使用OFFSET关键字**：   可读性更强的语法&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT * FROM user LIMIT n OFFSET m;</span></span></code></pre></div><ul><li>与<code>LIMIT m, n</code>效果相同，但语法更清晰</li><li>这是SQL标准语法，兼容性更好</li></ul></li></ol></blockquote><h2 id="LIMIT%E4%B8%8E%E6%9F%A5%E8%AF%A2%E6%95%88%E7%8E%87" tabindex="-1">LIMIT与查询效率 <a class="header-anchor" href="#LIMIT与查询效率" aria-label="Permalink to &quot;LIMIT与查询效率&quot;">​</a></h2><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p></p><p>区别 <strong>不加 where</strong> 和 <strong>加了 where</strong></p><h3 id="%E4%B8%8D%E5%8A%A0%3A%20%20%E8%BF%94%E5%9B%9E%20%E5%89%8Dn%20%E8%A1%8C" tabindex="-1"><strong>不加: 返回 前n 行</strong> <a class="header-anchor" href="#不加%3A  返回 前n 行" aria-label="Permalink to &quot;**不加:  返回 前n 行**&quot;">​</a></h3><h3 id="%E5%8A%A0%3A%20%E6%9C%80%E5%A4%9A%E6%98%BE%E7%A4%BA%20n%E6%9D%A1%E8%AE%B0%E5%BD%95" tabindex="-1"><strong>加: 最多显示 n条记录</strong> <a class="header-anchor" href="#加%3A 最多显示 n条记录" aria-label="Permalink to &quot;**加: 最多显示 n条记录**&quot;">​</a></h3></div><blockquote><ol><li><h3 id="LIMIT%E5%AF%B9%E6%80%A7%E8%83%BD%E7%9A%84%E5%BD%B1%E5%93%8D%EF%BC%9A" tabindex="-1"><strong>LIMIT对性能的影响</strong>： <a class="header-anchor" href="#LIMIT对性能的影响：" aria-label="Permalink to &quot;**LIMIT对性能的影响**：&quot;">​</a></h3><ul><li><h4 id="%E5%BD%93%E8%A1%A8%E6%B2%A1%E6%9C%89%E7%B4%A2%E5%BC%95%E6%97%B6%EF%BC%8CLIMIT%E5%8F%AF%E4%BB%A5%E6%8F%90%E5%89%8D%E7%BB%88%E6%AD%A2%E5%85%A8%E8%A1%A8%E6%89%AB%E6%8F%8F" tabindex="-1">当<strong>表没有索引时</strong>，LIMIT可以<strong>提前终止全表扫描</strong> <a class="header-anchor" href="#当表没有索引时，LIMIT可以提前终止全表扫描" aria-label="Permalink to &quot;当**表没有索引时**，LIMIT可以**提前终止全表扫描**&quot;">​</a></h4></li><li><p>例如<code>SELECT * FROM user WHERE age=20 LIMIT 1</code>，找到第一条匹配记录后就停止扫描</p></li><li><p>但<strong>EXPLAIN可能无法显示这种优化</strong>，实际执行时确实有效</p></li></ul></li><li><h3 id="%E7%B4%A2%E5%BC%95%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7%EF%BC%9A" tabindex="-1"><strong>索引的重要性</strong>： <a class="header-anchor" href="#索引的重要性：" aria-label="Permalink to &quot;**索引的重要性**：&quot;">​</a></h3><ul><li>对于<strong>经常用作查询条件的字段(如name,age)应该建立索引</strong></li><li>有索引的字段查询效率高，<strong>不受数据位置影响</strong></li><li>无<strong>索引字段查询需要全表扫描</strong>，数据量大时性能差</li></ul></li><li><h3 id="LIMIT%20%E6%98%AF%E5%90%A6%E8%83%BD%E6%8F%90%E9%AB%98%E6%9F%A5%E8%AF%A2%E6%95%88%E7%8E%87%EF%BC%9F" tabindex="-1"><code>LIMIT</code> 是否能提高查询效率？ <a class="header-anchor" href="#LIMIT 是否能提高查询效率？" aria-label="Permalink to &quot;\`LIMIT\` 是否能提高查询效率？&quot;">​</a></h3><h4 id="%E9%94%99%E8%AF%AF%E7%90%86%E8%A7%A3%EF%BC%9A" tabindex="-1">错误理解： <a class="header-anchor" href="#错误理解：" aria-label="Permalink to &quot;错误理解：&quot;">​</a></h4><blockquote><p>有些同学以为 <code>LIMIT</code> 会加快 SQL 查询的速度。</p></blockquote><h4 id="%E6%AD%A3%E7%A1%AE%E7%90%86%E8%A7%A3%EF%BC%9A" tabindex="-1">正确理解： <a class="header-anchor" href="#正确理解：" aria-label="Permalink to &quot;正确理解：&quot;">​</a></h4><ul><li><h2 id="LIMIT%20%E5%8F%AA%E6%98%AF%E9%99%90%E5%88%B6%E8%BF%94%E5%9B%9E%E7%9A%84%E8%AE%B0%E5%BD%95%E6%95%B0" tabindex="-1"><code>LIMIT</code> 只是<strong>限制返回的记录数</strong> <a class="header-anchor" href="#LIMIT 只是限制返回的记录数" aria-label="Permalink to &quot;\`LIMIT\` 只是**限制返回的记录数**&quot;">​</a></h2><p><strong>不会减少数据库实际读取的行数</strong>。</p></li><li><h3 id="%E5%A6%82%E6%9E%9C%E9%85%8D%E5%90%88%E4%BA%86%E5%90%88%E9%80%82%E7%9A%84%20%E7%B4%A2%E5%BC%95%EF%BC%8C%E6%89%8D%E8%83%BD%E6%8F%90%E5%8D%87%E6%95%88%E7%8E%87%E3%80%82" tabindex="-1">如果配合了合适的 <strong>索引</strong>，才能提升效率。 <a class="header-anchor" href="#如果配合了合适的 索引，才能提升效率。" aria-label="Permalink to &quot;如果配合了合适的 **索引**，才能提升效率。&quot;">​</a></h3></li><li><p>否则即使只返回 1 条数据，也可能扫描了整个表（<strong>全表扫描</strong>）。</p></li></ul></li></ol></blockquote><h2 id="EXPLAIN%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92--%E9%9D%A2%E8%AF%95%E9%87%8D%E7%82%B9" tabindex="-1">EXPLAIN执行计划--<strong>面试重点</strong> <a class="header-anchor" href="#EXPLAIN执行计划--面试重点" aria-label="Permalink to &quot;EXPLAIN执行计划--**面试重点**&quot;">​</a></h2><blockquote><ol><li><h3 id="EXPLAIN%E7%9A%84%E4%BD%9C%E7%94%A8%EF%BC%9A" tabindex="-1"><strong>EXPLAIN的作用</strong>： <a class="header-anchor" href="#EXPLAIN的作用：" aria-label="Permalink to &quot;**EXPLAIN的作用**：&quot;">​</a></h3><ul><li><strong>查看SQL语句的执行计划</strong></li><li>分析查询性能瓶颈</li><li>显示可能用到的索引、实际使用的索引等信息</li></ul></li><li><h3 id="%E5%85%B3%E9%94%AE%E5%AD%97%E6%AE%B5%E8%A7%A3%E8%AF%BB%EF%BC%9A" tabindex="-1"><strong>关键字段解读</strong>： <a class="header-anchor" href="#关键字段解读：" aria-label="Permalink to &quot;**关键字段解读**：&quot;">​</a></h3><p><code>type</code>：访问类型（如 const, ref, ALL）—— 越靠近 <code>const</code> 越好。</p><p><code>rows</code>：<strong>预估要扫描的行数</strong>。</p><p><code>key</code>：实际使用的索引。</p><p><code>possible_keys</code>：可能用到的索引。</p><p><code>extra</code>：额外信息，如是否使用了临时表或排序等。</p></li><li><table tabindex="0"><thead><tr><th>查询条件</th><th>是否建索引</th><th>扫描行数（rows）</th><th>访问类型（type）</th></tr></thead><tbody><tr><td><code>WHERE name = ?</code></td><td>✅（唯一键）</td><td>1</td><td>const</td></tr><tr><td><code>WHERE age = ?</code></td><td>❌（无索引）</td><td>所有行（如5）</td><td>ALL（全表扫描）</td></tr></tbody></table></li></ol></blockquote><h2 id="EXPLAIN%E5%88%86%E6%9E%90%E6%9F%A5%E8%AF%A2" tabindex="-1">EXPLAIN分析查询 <a class="header-anchor" href="#EXPLAIN分析查询" aria-label="Permalink to &quot;EXPLAIN分析查询&quot;">​</a></h2><blockquote><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">explain select </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> from user where name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;第一个/第三个&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="%E4%BC%9A%E5%8F%91%E7%8E%B0%20%E5%AE%9E%E9%99%85%20%E6%9F%A5%E8%AF%A2%20%E9%83%BD%E6%98%AF%20%E5%8F%AA%E6%9F%A5%E4%BA%86%20%E4%B8%80%E8%A1%8C%20---%20%3E%20%20%E7%9C%8B%20rows" tabindex="-1">会发现 实际 查询 <strong>都是 只查了 一行</strong> --- &gt; 看 rows <a class="header-anchor" href="#会发现 实际 查询 都是 只查了 一行 --- &gt;  看 rows" aria-label="Permalink to &quot;会发现 实际 查询 **都是 只查了 一行** --- &gt;  看 rows&quot;">​</a></h3><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> select_type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> table </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> partitions </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> possible_keys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key_len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ref   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rows </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filtered </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Extra </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+----+-------------+-------+------------+-------+---------------+------+---------+-------+------+----------+-------+</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SIMPLE      </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name          </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 152</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   100.00</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span></span></code></pre></div><h3 id="%E5%9B%A0%E4%B8%BA%20name%E5%8A%A0%E4%BA%86%20%E7%B4%A2%E5%BC%95" tabindex="-1"><strong>因为 name加了 索引</strong> <a class="header-anchor" href="#因为 name加了 索引" aria-label="Permalink to &quot;**因为 name加了 索引**&quot;">​</a></h3><h3 id="%E6%9F%A5%20age%2Csex%20%E6%B2%A1%E6%9C%89%E7%B4%A2%E5%BC%95%2C%20%E5%AF%BC%E8%87%B4%E6%9F%A5%E4%BA%86%20%E5%85%A8%E9%83%A8" tabindex="-1">查 age,sex <strong>没有索引, 导致查了 全部</strong> <a class="header-anchor" href="#查 age%2Csex 没有索引%2C 导致查了 全部" aria-label="Permalink to &quot;查 age,sex **没有索引, 导致查了 全部**&quot;">​</a></h3><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">explain select </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> from user where age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> select_type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> table </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> partitions </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> possible_keys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key_len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ref  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rows </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filtered </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Extra       </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SIMPLE      </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ALL  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    6</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    16.67</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Using where </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+-------------+</span></span></code></pre></div></blockquote><h2 id="%E5%8A%A0limit%E4%BC%98%E5%8C%96--%E7%89%B9%E5%88%AB%E6%B3%A8%E6%84%8F%E6%84%8F%E6%80%9D" tabindex="-1">加limit优化--<strong>特别注意意思</strong> <a class="header-anchor" href="#加limit优化--特别注意意思" aria-label="Permalink to &quot;加limit优化--**特别注意意思**&quot;">​</a></h2><blockquote><p>限制 行数, 再查询</p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SELECT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FROM user WHERE age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LIMIT </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>的意思是：</p><h2 id="%E5%9C%A8%20user%20%E8%A1%A8%E4%B8%AD%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%20age%20%3D%2025%20%E7%9A%84%E7%94%A8%E6%88%B7%EF%BC%8C%E5%8F%AA%E8%BF%94%E5%9B%9E%E6%9C%80%E5%A4%9A3%E6%9D%A1%E8%AE%B0%E5%BD%95%E3%80%82" tabindex="-1"><strong>在 user 表中查询所有 age = 25 的用户，只返回最多3条记录。</strong> <a class="header-anchor" href="#在 user 表中查询所有 age %3D 25 的用户，只返回最多3条记录。" aria-label="Permalink to &quot;**在 user 表中查询所有 age = 25 的用户，只返回最多3条记录。**&quot;">​</a></h2><p>使用 explain 会发现, 读取行数 并没有减少</p></blockquote><blockquote><h3 id="%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2%E6%98%AFWeb%E5%BC%80%E5%8F%91%E4%B8%AD%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8A%80%E6%9C%AF%E4%B9%8B%E4%B8%80%EF%BC%8C%E5%90%88%E7%90%86%E4%BD%BF%E7%94%A8LIMIT%E8%83%BD%E6%98%BE%E8%91%97%E6%8F%90%E9%AB%98%E6%9F%A5%E8%AF%A2%E6%95%88%E7%8E%87%EF%BC%8C%E7%89%B9%E5%88%AB%E6%98%AF%E5%9C%A8%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%87%8F%E5%9C%BA%E6%99%AF%E4%B8%8B%E3%80%82%E7%90%86%E8%A7%A3%E5%85%B6%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E5%92%8C%E6%80%A7%E8%83%BD%E7%89%B9%E7%82%B9%E5%AF%B9%E4%BA%8E%E5%BC%80%E5%8F%91%E9%AB%98%E6%80%A7%E8%83%BD%E5%BA%94%E7%94%A8%E8%87%B3%E5%85%B3%E9%87%8D%E8%A6%81%E3%80%82" tabindex="-1">分页查询是Web开发中最常用的技术之一，合理使用LIMIT能显著提高查询效率，<strong>特别是在大数据量场景下</strong>。理解其工作原理和性能特点对于开发高性能应用至关重要。 <a class="header-anchor" href="#分页查询是Web开发中最常用的技术之一，合理使用LIMIT能显著提高查询效率，特别是在大数据量场景下。理解其工作原理和性能特点对于开发高性能应用至关重要。" aria-label="Permalink to &quot;分页查询是Web开发中最常用的技术之一，合理使用LIMIT能显著提高查询效率，**特别是在大数据量场景下**。理解其工作原理和性能特点对于开发高性能应用至关重要。&quot;">​</a></h3></blockquote><h1 id="25-05-10%E5%AE%8C" tabindex="-1">25-05-10完 <a class="header-anchor" href="#25-05-10完" aria-label="Permalink to &quot;25-05-10完&quot;">​</a></h1><h1 id="explain%E5%AD%97%E6%AE%B5%E8%A7%A3%E6%9E%90" tabindex="-1">explain字段解析 <a class="header-anchor" href="#explain字段解析" aria-label="Permalink to &quot;explain字段解析&quot;">​</a></h1><blockquote><p>在 MySQL 中，<code>EXPLAIN</code> 是一个用于分析 SQL 查询执行计划的工具。通过 <code>EXPLAIN</code>，可以了解查询的执行方式、索引的使用情况以及潜在的性能问题。<code>EXPLAIN</code> 的输出包含多个字段，每个字段都有特定的含义。</p><hr><h3 id="1.%20id" tabindex="-1">1. <strong>id</strong> <a class="header-anchor" href="#1. id" aria-label="Permalink to &quot;1. **id**&quot;">​</a></h3><ul><li><strong>含义</strong>：查询中每个操作的标识符，表示执行顺序。</li><li><strong>值</strong>： <ul><li>数字越大，优先级越高。</li><li>如果是子查询或联合查询，<code>id</code> 会区分不同的查询块。</li></ul></li></ul><hr><h3 id="2.%20select_type" tabindex="-1">2. <strong>select_type</strong> <a class="header-anchor" href="#2. select_type" aria-label="Permalink to &quot;2. **select_type**&quot;">​</a></h3><ul><li><strong>含义</strong>：查询的类型，表示当前查询的操作类型。</li><li><strong>常见值</strong>： <ul><li><code>SIMPLE</code>：简单查询，不包含子查询或联合查询。</li><li><code>PRIMARY</code>：最外层查询。</li><li><code>SUBQUERY</code>：子查询。</li><li><code>DERIVED</code>：派生表（子查询作为 <code>FROM</code> 子句的一部分）。</li><li><code>UNION</code>：联合查询的第二个或后续部分。</li><li><code>UNION RESULT</code>：存储联合查询结果的临时表。</li></ul></li></ul><hr><h3 id="3.%20table" tabindex="-1">3. <strong>table</strong> <a class="header-anchor" href="#3. table" aria-label="Permalink to &quot;3. **table**&quot;">​</a></h3><ul><li><strong>含义</strong>：查询涉及的表名或临时表的名称。</li><li><strong>值</strong>： <ul><li>如果是子查询或派生表，可能显示为 <code>&lt;derivedN&gt;</code>，其中 <code>N</code> 是派生表的编号。</li></ul></li></ul><hr><h3 id="4.%20partitions" tabindex="-1">4. <strong>partitions</strong> <a class="header-anchor" href="#4. partitions" aria-label="Permalink to &quot;4. **partitions**&quot;">​</a></h3><ul><li><strong>含义</strong>：查询涉及的分区（如果表使用了分区）。</li><li><strong>值</strong>： <ul><li>显示具体使用的分区名称。</li><li>如果未使用分区，则为 <code>NULL</code>。</li></ul></li></ul><hr><h3 id="5.%20type" tabindex="-1">5. <strong>type</strong> <a class="header-anchor" href="#5. type" aria-label="Permalink to &quot;5. **type**&quot;">​</a></h3><ul><li><strong>含义</strong>：访问类型，表示查询的效率。</li><li><strong>值（按效率从高到低排序）</strong>： <ul><li><code>system</code>：表只有一行（系统表）。</li><li><code>const</code>：通过主键或唯一索引一次定位一行。</li><li><code>eq_ref</code>：对每个结果行进行索引查找，通常用于连接查询。</li><li><code>ref</code>：非唯一索引查找，返回匹配的多行。</li><li><code>range</code>：索引范围扫描。</li><li><code>index</code>：全索引扫描。</li><li><code>ALL</code>：全表扫描（效率最低）。</li></ul></li></ul><hr><h3 id="6.%20possible_keys" tabindex="-1">6. <strong>possible_keys</strong> <a class="header-anchor" href="#6. possible_keys" aria-label="Permalink to &quot;6. **possible_keys**&quot;">​</a></h3><ul><li><strong>含义</strong>：查询可能使用的索引。</li><li><strong>值</strong>： <ul><li>显示查询中可以使用的索引。</li><li>如果为 <code>NULL</code>，表示没有可用索引。</li></ul></li></ul><hr><h3 id="7.%20key" tabindex="-1">7. <strong>key</strong> <a class="header-anchor" href="#7. key" aria-label="Permalink to &quot;7. **key**&quot;">​</a></h3><ul><li><strong>含义</strong>：实际使用的索引。</li><li><strong>值</strong>： <ul><li>显示查询实际使用的索引名称。</li><li>如果为 <code>NULL</code>，表示未使用索引。</li></ul></li></ul><hr><h3 id="8.%20key_len" tabindex="-1">8. <strong>key_len</strong> <a class="header-anchor" href="#8. key_len" aria-label="Permalink to &quot;8. **key_len**&quot;">​</a></h3><ul><li><strong>含义</strong>：使用的索引长度（字节数）。</li><li><strong>值</strong>： <ul><li>表示 MySQL 实际使用索引的部分长度。</li><li>值越小，使用的索引字段越少。</li></ul></li></ul><hr><h3 id="9.%20ref" tabindex="-1">9. <strong>ref</strong> <a class="header-anchor" href="#9. ref" aria-label="Permalink to &quot;9. **ref**&quot;">​</a></h3><ul><li><strong>含义</strong>：索引列与查询条件的比较方式。</li><li><strong>值</strong>： <ul><li>显示查询条件中与索引匹配的字段或常量。</li></ul></li></ul><hr><h3 id="10.%20rows" tabindex="-1">10. <strong>rows</strong> <a class="header-anchor" href="#10. rows" aria-label="Permalink to &quot;10. **rows**&quot;">​</a></h3><ul><li><strong>含义</strong>：MySQL 估算需要扫描的行数。</li><li><strong>值</strong>： <ul><li>是一个估算值，表示查询需要处理的行数。</li></ul></li></ul><hr><h3 id="11.%20filtered" tabindex="-1">11. <strong>filtered</strong> <a class="header-anchor" href="#11. filtered" aria-label="Permalink to &quot;11. **filtered**&quot;">​</a></h3><ul><li><strong>含义</strong>：查询条件过滤后的行百分比。</li><li><strong>值</strong>： <ul><li>表示满足查询条件的行占总扫描行数的百分比。</li></ul></li></ul><hr><h3 id="12.%20extra" tabindex="-1">12. <strong>extra</strong> <a class="header-anchor" href="#12. extra" aria-label="Permalink to &quot;12. **extra**&quot;">​</a></h3><ul><li><strong>含义</strong>：额外信息，描述查询的其他操作。</li><li><strong>常见值</strong>： <ul><li><code>Using index</code>：查询只使用索引，不需要回表。</li><li><code>Using where</code>：查询使用了 <code>WHERE</code> 条件过滤。</li><li><code>Using filesort</code>：查询需要额外的排序操作（性能较差）。</li><li><code>Using temporary</code>：查询需要使用临时表（性能较差）。</li><li><h3 id="NULL%EF%BC%9A%E6%B2%A1%E6%9C%89%E9%A2%9D%E5%A4%96%E6%93%8D%E4%BD%9C%E3%80%82---%20%E4%BD%86%E6%98%AF%2C%20%E4%BD%BF%E7%94%A8%E4%BA%86%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95%2C%20%E4%B8%94%E5%9B%9E%E8%A1%A8%E4%BA%86%2C%20%E4%BC%9A%E6%98%BE%E7%A4%BAnull%E5%9B%9E%E8%A1%A8%E7%9A%84%E6%A6%82%E5%BF%B5-explain" tabindex="-1"><code>NULL</code>：没有额外操作。--- <strong>但是, 使用了二级索引, 且回表了, 会显示null</strong><a href="##回表的概念-explain">回表的概念-explain</a> <a class="header-anchor" href="#NULL：没有额外操作。--- 但是%2C 使用了二级索引%2C 且回表了%2C 会显示null回表的概念-explain" aria-label="Permalink to &quot;\`NULL\`：没有额外操作。--- **但是, 使用了二级索引, 且回表了, 会显示null**[回表的概念-explain](##回表的概念-explain)&quot;">​</a></h3></li></ul></li></ul><hr><h3 id="%E7%A4%BA%E4%BE%8B-1" tabindex="-1">示例 <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EXPLAIN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> UID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><strong>结果</strong>：</p><table tabindex="0"><thead><tr><th>id</th><th>select_type</th><th>table</th><th>type</th><th>possible_keys</th><th>key</th><th>key_len</th><th>ref</th><th>rows</th><th>extra</th></tr></thead><tbody><tr><td>1</td><td>SIMPLE</td><td>student</td><td>const</td><td>PRIMARY</td><td>PRIMARY</td><td>4</td><td>const</td><td>1</td><td>NULL</td></tr></tbody></table><p><strong>解释</strong>：</p><ul><li>查询是一个简单查询（<code>SIMPLE</code>）。</li><li>查询的表是 <code>student</code>。</li><li>使用了主键索引（<code>PRIMARY</code>）。</li><li>访问类型是 <code>const</code>，表示通过主键一次定位到一行。</li><li><code>extra</code> 为 <code>NULL</code>，表示没有额外操作。</li></ul><hr><h3 id="%E6%80%BB%E7%BB%93-1" tabindex="-1">总结 <a class="header-anchor" href="#总结-1" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>通过分析 <code>EXPLAIN</code> 的输出，可以清楚了解查询的执行计划，识别潜在的性能问题（如全表扫描、排序、临时表等），并通过优化索引或调整查询语句来提高性能。</p></blockquote><h1 id="limiit%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2(%E4%BA%8C)--%E9%87%8D%E7%82%B9" tabindex="-1">limiit分页查询(二)--<strong>重点</strong> <a class="header-anchor" href="#limiit分页查询(二)--重点" aria-label="Permalink to &quot;limiit分页查询(二)--**重点**&quot;">​</a></h1><blockquote><p>直接看 <a href="##本节创建函数示例">本节创建函数示例</a></p><p>看不明白 再看这节 前面几个</p></blockquote><h2 id="%E4%BD%BF%E7%94%A8delimiter(de-limit-er)" tabindex="-1">使用delimiter(de-limit-er) <a class="header-anchor" href="#使用delimiter(de-limit-er)" aria-label="Permalink to &quot;使用delimiter(de-limit-er)&quot;">​</a></h2><blockquote><h2 id="1.%20DELIMITER%20%E7%9A%84%E4%BD%9C%E7%94%A8" tabindex="-1"><strong>1. DELIMITER 的作用</strong> <a class="header-anchor" href="#1. DELIMITER 的作用" aria-label="Permalink to &quot;**1. DELIMITER 的作用**&quot;">​</a></h2><p><code>DELIMITER</code> 是 MySQL 的一个客户端命令（不是 SQL 语句），用于<strong>临时修改 SQL 语句的结束符</strong>。默认情况下，MySQL 使用分号 <code>;</code> 作为语句结束符，但在定义存储过程、函数、触发器时，由于这些对象内部可能包含多个 <code>;</code>，因此需要临时修改结束符。</p><h2 id="2.%20%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95" tabindex="-1"><strong>2. 基本语法</strong> <a class="header-anchor" href="#2. 基本语法" aria-label="Permalink to &quot;**2. 基本语法**&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DELIMITER 新结束符</span></span></code></pre></div><ul><li>新结束符可以是任意字符或字符串（如 <code>$$</code>、<code>//</code>、<code>@@</code> 等）</li><li>修改后，所有 SQL 语句直到遇到新结束符才会被执行</li></ul><h2 id="3.%20%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" tabindex="-1"><strong>3. 注意事项</strong> <a class="header-anchor" href="#3. 注意事项" aria-label="Permalink to &quot;**3. 注意事项**&quot;">​</a></h2><ol><li><strong>DELIMITER 是客户端命令</strong>，不是 SQL 标准的一部分</li><li><strong>只在定义复合语句时使用</strong>（存储过程、函数、触发器）</li><li><strong>必须成对使用</strong>：修改后要恢复默认的 <code>;</code></li><li><strong>工具兼容性</strong>： <ul><li>MySQL 命令行客户端支持</li><li>部分 GUI 工具（如 Navicat）可能自动处理</li><li>编程语言接口（如 JDBC）通常不需要手动设置</li></ul></li></ol><h2 id="4.%20%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98" tabindex="-1"><strong>4. 常见问题</strong> <a class="header-anchor" href="#4. 常见问题" aria-label="Permalink to &quot;**4. 常见问题**&quot;">​</a></h2><h3 id="4.1%20%E5%BF%98%E8%AE%B0%E6%81%A2%E5%A4%8D%20DELIMITER" tabindex="-1"><strong>4.1 忘记恢复 DELIMITER</strong> <a class="header-anchor" href="#4.1 忘记恢复 DELIMITER" aria-label="Permalink to &quot;**4.1 忘记恢复 DELIMITER**&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DELIMITER $$</span></span>
<span class="line"><span>-- 创建存储过程...</span></span>
<span class="line"><span>-- 忘记执行 DELIMITER ;</span></span></code></pre></div><p>后果：后续所有 SQL 必须用 <code>$$</code> 结束，直到再次修改</p><h3 id="4.2%20%E4%BD%BF%E7%94%A8%E7%A9%BA%E6%A0%BC" tabindex="-1"><strong>4.2 使用空格</strong> <a class="header-anchor" href="#4.2 使用空格" aria-label="Permalink to &quot;**4.2 使用空格**&quot;">​</a></h3><p>错误写法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DELIMITER $ $  -- 中间不能有空格</span></span></code></pre></div><h3 id="4.3%20%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E5%86%B2%E7%AA%81" tabindex="-1"><strong>4.3 特殊字符冲突</strong> <a class="header-anchor" href="#4.3 特殊字符冲突" aria-label="Permalink to &quot;**4.3 特殊字符冲突**&quot;">​</a></h3><p>如果存储过程内容包含 <code>$$</code>，应选择其他分隔符：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DELIMITER //</span></span>
<span class="line"><span>CREATE PROCEDURE check_balance()</span></span>
<span class="line"><span>BEGIN</span></span>
<span class="line"><span>    -- 这里可以使用 $$</span></span>
<span class="line"><span>    SELECT * FROM accounts WHERE balance &gt; 100.00;</span></span>
<span class="line"><span>END//</span></span>
<span class="line"><span>DELIMITER ;</span></span></code></pre></div><h2 id="5.%20%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5" tabindex="-1"><strong>5. 最佳实践</strong> <a class="header-anchor" href="#5. 最佳实践" aria-label="Permalink to &quot;**5. 最佳实践**&quot;">​</a></h2><ol><li>推荐使用 <code>$$</code> 或 <code>//</code> 作为临时分隔符</li><li>在脚本中显式恢复默认分隔符</li><li>复杂的存储过程建议单独保存为 <code>.sql</code> 文件</li><li>在应用程序中，优先使用预处理语句而非存储过程</li></ol><p>通过合理使用 <code>DELIMITER</code>，可以确保 MySQL 正确解析包含多个语句的存储程序定义。</p></blockquote><h2 id="delimiter%E5%85%B8%E5%9E%8B%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" tabindex="-1">delimiter典型使用场景 <a class="header-anchor" href="#delimiter典型使用场景" aria-label="Permalink to &quot;delimiter典型使用场景&quot;">​</a></h2><blockquote><h3 id="%E6%9C%AC%E8%8A%82%E9%87%8D%E7%82%B9%E6%98%AF%20%E5%88%9B%E5%BB%BA%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B" tabindex="-1">本节重点是 <strong>创建存储过程</strong> <a class="header-anchor" href="#本节重点是 创建存储过程" aria-label="Permalink to &quot;本节重点是 **创建存储过程**&quot;">​</a></h3></blockquote><blockquote><h3 id="%E5%88%9B%E5%BB%BA%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B" tabindex="-1"><strong>创建存储过程</strong> <a class="header-anchor" href="#创建存储过程" aria-label="Permalink to &quot;**创建存储过程**&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DELIMITER $$</span></span>
<span class="line"><span>CREATE PROCEDURE my_procedure()</span></span>
<span class="line"><span>BEGIN</span></span>
<span class="line"><span>    SELECT * FROM users;</span></span>
<span class="line"><span>    SELECT * FROM orders;</span></span>
<span class="line"><span>END$$</span></span>
<span class="line"><span>DELIMITER ;</span></span></code></pre></div><ul><li>第一行 <code>DELIMITER $$</code> 将结束符改为 <code>$$</code></li><li>存储过程内的 <code>;</code> 不会导致语句立即执行</li><li>最后 <code>DELIMITER ;</code> 恢复默认结束符</li></ul><h3 id="%E5%88%9B%E5%BB%BA%E5%87%BD%E6%95%B0" tabindex="-1"><strong>创建函数</strong> <a class="header-anchor" href="#创建函数" aria-label="Permalink to &quot;**创建函数**&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DELIMITER //</span></span>
<span class="line"><span>CREATE FUNCTION add_tax(price DECIMAL(10,2)) </span></span>
<span class="line"><span>RETURNS DECIMAL(10,2)</span></span>
<span class="line"><span>DETERMINISTIC</span></span>
<span class="line"><span>BEGIN</span></span>
<span class="line"><span>    RETURN price * 1.1;</span></span>
<span class="line"><span>END//</span></span>
<span class="line"><span>DELIMITER ;</span></span></code></pre></div><h3 id="%E5%88%9B%E5%BB%BA%E8%A7%A6%E5%8F%91%E5%99%A8" tabindex="-1"><strong>创建触发器</strong> <a class="header-anchor" href="#创建触发器" aria-label="Permalink to &quot;**创建触发器**&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DELIMITER $$</span></span>
<span class="line"><span>CREATE TRIGGER before_insert_user</span></span>
<span class="line"><span>BEFORE INSERT ON users</span></span>
<span class="line"><span>FOR EACH ROW</span></span>
<span class="line"><span>BEGIN</span></span>
<span class="line"><span>    SET NEW.created_at = NOW();</span></span>
<span class="line"><span>END$$</span></span>
<span class="line"><span>DELIMITER ;</span></span></code></pre></div><h2 id="%E7%A4%BA%E4%BE%8B%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B" tabindex="-1"><strong>示例完整流程</strong> <a class="header-anchor" href="#示例完整流程" aria-label="Permalink to &quot;**示例完整流程**&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-- 1. 修改分隔符</span></span>
<span class="line"><span>DELIMITER $$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 2. 创建存储过程</span></span>
<span class="line"><span>CREATE PROCEDURE update_salary(IN emp_id INT, IN increase DECIMAL(10,2))</span></span>
<span class="line"><span>BEGIN</span></span>
<span class="line"><span>    UPDATE employees </span></span>
<span class="line"><span>    SET salary = salary + increase </span></span>
<span class="line"><span>    WHERE id = emp_id;</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    SELECT CONCAT(&#39;Updated salary for employee &#39;, emp_id) AS message;</span></span>
<span class="line"><span>END$$</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 3. 恢复默认分隔符</span></span>
<span class="line"><span>DELIMITER ;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 4. 调用存储过程</span></span>
<span class="line"><span>CALL update_salary(1001, 500.00);</span></span></code></pre></div></blockquote><h2 id="mysql%E5%88%9B%E5%BB%BA%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B-%E5%85%88%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3" tabindex="-1">mysql创建存储过程-先简单了解 <a class="header-anchor" href="#mysql创建存储过程-先简单了解" aria-label="Permalink to &quot;mysql创建存储过程-先简单了解&quot;">​</a></h2><blockquote><h2 id="%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h2><p><strong>存储过程是预编译的SQL语句集合，存储在数据库中，可通过名称调用执行。</strong></p><h2 id="%E6%A0%B8%E5%BF%83%E8%AF%AD%E6%B3%95" tabindex="-1">核心语法 <a class="header-anchor" href="#核心语法" aria-label="Permalink to &quot;核心语法&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DELIMITER //</span></span>
<span class="line"><span>CREATE PROCEDURE 过程名([参数])</span></span>
<span class="line"><span>BEGIN</span></span>
<span class="line"><span>    -- SQL语句</span></span>
<span class="line"><span>END//</span></span>
<span class="line"><span>DELIMITER ;</span></span></code></pre></div><h2 id="%E5%8F%82%E6%95%B0%E7%B1%BB%E5%9E%8B" tabindex="-1">参数类型 <a class="header-anchor" href="#参数类型" aria-label="Permalink to &quot;参数类型&quot;">​</a></h2><ol><li><strong>IN</strong>：输入参数（默认）</li><li><strong>OUT</strong>：输出参数</li><li><strong>INOUT</strong>：输入输出参数</li></ol><h2 id="%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B" tabindex="-1">简单示例 <a class="header-anchor" href="#简单示例" aria-label="Permalink to &quot;简单示例&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DELIMITER //</span></span>
<span class="line"><span>CREATE PROCEDURE get_employee(IN emp_id INT)</span></span>
<span class="line"><span>BEGIN</span></span>
<span class="line"><span>    SELECT * FROM employees WHERE id = emp_id;</span></span>
<span class="line"><span>END//</span></span>
<span class="line"><span>DELIMITER ;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 调用</span></span>
<span class="line"><span>CALL get_employee(1001);</span></span></code></pre></div><h2 id="%E4%B8%BB%E8%A6%81%E7%89%B9%E7%82%B9" tabindex="-1">主要特点 <a class="header-anchor" href="#主要特点" aria-label="Permalink to &quot;主要特点&quot;">​</a></h2><ol><li>提高性能（预编译）</li><li>减少网络流量</li><li>增强安全性</li><li>支持复杂业务逻辑</li><li>可包含流程控制（IF/WHILE等）</li></ol><h2 id="%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4" tabindex="-1">管理命令 <a class="header-anchor" href="#管理命令" aria-label="Permalink to &quot;管理命令&quot;">​</a></h2><ul><li>查看：<code>SHOW PROCEDURE STATUS</code></li><li>查看定义：<code>SHOW CREATE PROCEDURE 过程名</code></li><li>删除：<code>DROP PROCEDURE 过程名</code></li></ul><h2 id="%E4%B8%8E%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB" tabindex="-1">与函数的区别 <a class="header-anchor" href="#与函数的区别" aria-label="Permalink to &quot;与函数的区别&quot;">​</a></h2><ol><li>存储过程不返回值，函数必须返回</li><li>存储过程可返回多个结果集</li><li>存储过程支持事务，函数不支持</li><li>调用方式不同（CALL vs SELECT）</li></ol></blockquote><h2 id="%E6%9C%AC%E8%8A%82%E5%88%9B%E5%BB%BA%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E7%A4%BA%E4%BE%8B" tabindex="-1">本节创建存储过程示例 <a class="header-anchor" href="#本节创建存储过程示例" aria-label="Permalink to &quot;本节创建存储过程示例&quot;">​</a></h2><blockquote><h3 id="%E5%88%9B%E5%BB%BA%E8%A1%A8" tabindex="-1">创建表 <a class="header-anchor" href="#创建表" aria-label="Permalink to &quot;创建表&quot;">​</a></h3><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">create table </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">t_user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> null primary key auto_increment,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    email </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> null,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    passwd </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)ENGINE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">InnoDB DEFAULT CHARSET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">utf8;</span></span></code></pre></div><h3 id="%E5%88%9B%E5%BB%BA%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B-1" tabindex="-1">创建存储过程 <a class="header-anchor" href="#创建存储过程-1" aria-label="Permalink to &quot;创建存储过程&quot;">​</a></h3><p><code>DECLARE i INIT;</code>----声明一个 init 的 i</p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">delimiter $</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 先改结束标志</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">create procedure </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add_t_user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(IN n INT)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BEGIN </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DECLARE i INT;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SET i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WHILE i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n DO</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">INSERT INTO t_user </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CONCAT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@xinghuai.com&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SET i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">END WHILE;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">END $</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">delimiter ;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 恢复结束标志</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add_t_user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 调用创建存储过程</span></span></code></pre></div></blockquote><h2 id="%E8%B0%83%E7%94%A8%E5%88%9B%E5%BB%BA%E5%AD%98%E5%82%A8%E5%87%BD%E6%95%B0%20%E9%80%9F%E5%BA%A6%E6%85%A2%20%E9%97%AE%E9%A2%98%E5%8E%9F%E5%9B%A0" tabindex="-1">调用创建存储函数 <strong>速度慢</strong> 问题原因 <a class="header-anchor" href="#调用创建存储函数 速度慢 问题原因" aria-label="Permalink to &quot;调用创建存储函数 **速度慢** 问题原因&quot;">​</a></h2><blockquote><h3 id="1.%20%E6%9F%A5%E7%9C%8B%20innodb_buffer_pool_size%EF%BC%9A" tabindex="-1">1. 查看 <code>innodb_buffer_pool_size</code>： <a class="header-anchor" href="#1. 查看 innodb_buffer_pool_size：" aria-label="Permalink to &quot;1. 查看 \`innodb_buffer_pool_size\`：&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SHOW VARIABLES LIKE &#39;innodb_buffer_pool_size&#39;;</span></span></code></pre></div><ul><li>返回的是字节数（Bytes），比如 <code>134217728</code> 表示 128MB。</li><li>建议在大数据量场景设置为几 GB 以上。</li></ul><hr><h3 id="2.%20%E6%9F%A5%E7%9C%8B%20innodb_flush_log_at_trx_commit%EF%BC%9A" tabindex="-1">2. 查看 <code>innodb_flush_log_at_trx_commit</code>： <a class="header-anchor" href="#2. 查看 innodb_flush_log_at_trx_commit：" aria-label="Permalink to &quot;2. 查看 \`innodb_flush_log_at_trx_commit\`：&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SHOW VARIABLES LIKE &#39;innodb_flush_log_at_trx_commit&#39;;</span></span></code></pre></div><ul><li>常见值： <ul><li><code>1</code>（默认，最安全）</li><li><code>2</code>（适度折中）</li><li><code>0</code>（最快，但有数据丢失风险）</li></ul></li></ul><ol start="3"><li><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SHOW VARIABLES LIKE </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sync_binlog&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li></ol></blockquote><blockquote><h2 id="1.%20innodb_buffer_pool_size%20%E8%AE%BE%E7%BD%AE%E8%BF%87%E5%B0%8F" tabindex="-1">1. <code>innodb_buffer_pool_size</code> 设置过小 <a class="header-anchor" href="#1. innodb_buffer_pool_size 设置过小" aria-label="Permalink to &quot;1. \`innodb_buffer_pool_size\` 设置过小&quot;">​</a></h2><h3 id="%E5%90%AB%E4%B9%89%EF%BC%9A" tabindex="-1">含义： <a class="header-anchor" href="#含义：" aria-label="Permalink to &quot;含义：&quot;">​</a></h3><p>该参数用于配置 InnoDB 存储引擎用于<strong>缓存数据页和索引</strong>的内存大小，是 InnoDB 最重要的性能参数之一。</p><h3 id="%E8%AE%BE%E7%BD%AE%E8%BF%87%E5%B0%8F%E7%9A%84%E5%BD%B1%E5%93%8D%EF%BC%9A" tabindex="-1">设置过小的影响： <a class="header-anchor" href="#设置过小的影响：" aria-label="Permalink to &quot;设置过小的影响：&quot;">​</a></h3><ul><li>数据访问频繁落盘（命中率低），严重影响查询和插入性能。</li><li>特别在处理大表或批量写入（如插入 200 万行）时，容易造成<strong>磁盘 I/O 瓶颈</strong>。</li></ul><h3 id="%E5%BB%BA%E8%AE%AE%EF%BC%9A" tabindex="-1">建议： <a class="header-anchor" href="#建议：" aria-label="Permalink to &quot;建议：&quot;">​</a></h3><ul><li>服务器专用于数据库时，可设为物理内存的 60%～80%。</li></ul><hr><h2 id="2.%20innodb_flush_log_at_trx_commit%20%3D%201" tabindex="-1">2. <code>innodb_flush_log_at_trx_commit = 1</code> <a class="header-anchor" href="#2. innodb_flush_log_at_trx_commit %3D 1" aria-label="Permalink to &quot;2. \`innodb_flush_log_at_trx_commit = 1\`&quot;">​</a></h2><h3 id="%E5%90%AB%E4%B9%89%EF%BC%9A-1" tabindex="-1">含义： <a class="header-anchor" href="#含义：-1" aria-label="Permalink to &quot;含义：&quot;">​</a></h3><p>每次事务提交时，<strong>立即写入 redo log 并刷新到磁盘</strong>，保证最强的数据安全（事务持久性）。</p><h3 id="%E6%80%A7%E8%83%BD%E5%BD%B1%E5%93%8D%EF%BC%9A" tabindex="-1">性能影响： <a class="header-anchor" href="#性能影响：" aria-label="Permalink to &quot;性能影响：&quot;">​</a></h3><ul><li>写入频繁时性能下降显著，因为每次提交都要进行磁盘刷写（fsync）。</li><li>在高并发大事务插入场景中尤其明显。</li></ul><h3 id="%E5%AE%89%E5%85%A8%E4%B8%8E%E6%80%A7%E8%83%BD%E6%9D%83%E8%A1%A1%EF%BC%9A" tabindex="-1">安全与性能权衡： <a class="header-anchor" href="#安全与性能权衡：" aria-label="Permalink to &quot;安全与性能权衡：&quot;">​</a></h3><table tabindex="0"><thead><tr><th>值</th><th>含义</th><th>安全性</th><th>性能</th></tr></thead><tbody><tr><td>1</td><td>每次事务提交立即刷盘（默认）</td><td>✅ 最高安全</td><td>❌ 最慢</td></tr><tr><td>2</td><td>每次提交写日志，不立即刷盘</td><td>⚠️ 较安全</td><td>✅ 快</td></tr><tr><td>0</td><td>日志写和刷盘都延迟</td><td>❌ 不安全</td><td>3.✅ 快</td></tr></tbody></table><h2 id="3.%20sync_binlog%20%3D%200%20%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F" tabindex="-1">3. <code>sync_binlog = 0</code> 是什么？ <a class="header-anchor" href="#3. sync_binlog %3D 0 是什么？" aria-label="Permalink to &quot;3. \`sync_binlog = 0\` 是什么？&quot;">​</a></h2><p>这是 MySQL 的一个参数，控制 <strong>二进制日志（binlog）</strong> 写入磁盘的频率。</p><hr><h3 id="%E5%8F%82%E6%95%B0%E5%90%AB%E4%B9%89%E5%AF%B9%E6%AF%94%E5%A6%82%E4%B8%8B%EF%BC%9A" tabindex="-1">参数含义对比如下： <a class="header-anchor" href="#参数含义对比如下：" aria-label="Permalink to &quot;参数含义对比如下：&quot;">​</a></h3><table tabindex="0"><thead><tr><th>值</th><th>含义</th><th>安全性</th><th>性能</th></tr></thead><tbody><tr><td><code>0</code></td><td>MySQL 不控制 binlog 何时刷盘，由操作系统自行决定（性能最好）</td><td>❌ 可能丢数据</td><td>✅ 最高</td></tr><tr><td><code>1</code></td><td>每次事务提交都 <strong>同步刷新 binlog 到磁盘</strong>（默认，最安全）</td><td>✅ 最安全</td><td>❌ 慢</td></tr><tr><td><code>N</code></td><td>每 N 个事务提交才刷新一次 binlog</td><td>⚠️ 折中</td><td>✅ 较快</td></tr></tbody></table><hr><h2 id="%E5%B0%8F%E7%BB%93%EF%BC%9A" tabindex="-1">小结： <a class="header-anchor" href="#小结：" aria-label="Permalink to &quot;小结：&quot;">​</a></h2><table tabindex="0"><thead><tr><th>配置项</th><th>作用</th><th>设置过小/默认值影响</th></tr></thead><tbody><tr><td><code>innodb_buffer_pool_size</code></td><td>控制 InnoDB 内存缓存大小</td><td>内存不足，频繁磁盘访问，性能下降</td></tr><tr><td><code>innodb_flush_log_at_trx_commit</code></td><td>控制事务提交日志写盘策略</td><td>默认值（1）最安全，但批量写入性能差</td></tr><tr><td><code>sync_binlog</code></td><td>控制 <strong>二进制日志（binlog）</strong> 写入磁盘的频率</td><td>默认值(1)最安全，但批量写入性能差</td></tr></tbody></table></blockquote><h2 id="%E9%80%9F%E5%BA%A6%E6%85%A2%E4%B8%B4%E6%97%B6%E8%AE%BE%E7%BD%AE----%E9%80%9F%E5%BA%A6%E5%BE%88%E5%BF%AB" tabindex="-1">速度慢临时设置----速度很快 <a class="header-anchor" href="#速度慢临时设置----速度很快" aria-label="Permalink to &quot;速度慢临时设置----速度很快&quot;">​</a></h2><blockquote><h3 id="%E4%B8%B4%E6%97%B6%E4%BF%AE%E6%94%B9%E5%91%BD%E4%BB%A4%EF%BC%88%E4%B8%8D%E5%BB%BA%E8%AE%AE%E7%94%9F%E4%BA%A7%E4%BD%BF%E7%94%A8%EF%BC%89" tabindex="-1"><strong>临时修改命令（不建议生产使用）</strong> <a class="header-anchor" href="#临时修改命令（不建议生产使用）" aria-label="Permalink to &quot;**临时修改命令（不建议生产使用）**&quot;">​</a></h3><p>可用于测试环境临时调优：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SET GLOBAL innodb_flush_log_at_trx_commit = 2;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>SET GLOBAL sync_binlog = 0;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 前两个 最重要</span></span>
<span class="line"><span></span></span>
<span class="line"><span>SET GLOBAL innodb_buffer_pool_size = 1073741824; -- 1GB</span></span></code></pre></div><p>需要有 <code>SUPER</code> 权限，且某些参数（如 <code>buffer_pool_size</code>）<strong>重启后生效</strong>，更推荐通过配置文件修改。</p><table tabindex="0"><thead><tr><th>参数</th><th>写入提速效果</th><th>是否建议用于大量插入</th></tr></thead><tbody><tr><td><code>innodb_flush_log_at_trx_commit=2</code></td><td>✅✅✅</td><td>✅ 强烈推荐（第一步）</td></tr><tr><td><code>sync_binlog=0</code></td><td>✅✅</td><td>✅ 推荐（与上面搭配）</td></tr><tr><td><code>innodb_buffer_pool_size=1GB</code></td><td>✅（间接）</td><td>⚠️ 可配合调大，但非核心</td></tr></tbody></table><h3 id="%E9%87%8D%E5%90%AF%E5%8D%B3%E5%8F%AF%E6%81%A2%E5%A4%8D%E9%BB%98%E8%AE%A4---%E6%98%AF%E9%87%8D%E5%90%AF%E6%9C%8D%E5%8A%A1" tabindex="-1"><strong>重启即可恢复默认</strong>---是重启服务 <a class="header-anchor" href="#重启即可恢复默认---是重启服务" aria-label="Permalink to &quot;**重启即可恢复默认**---是重启服务&quot;">​</a></h3><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">systemctl restart mysql.service</span></span></code></pre></div></blockquote><h2 id="%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0" tabindex="-1">聚合函数 <a class="header-anchor" href="#聚合函数" aria-label="Permalink to &quot;聚合函数&quot;">​</a></h2><blockquote><p>在 SQL 中，**聚合函数（Aggregate Functions）**是对一组数据进行计算后，返回单个结果值的函数，常用于 <code>GROUP BY</code> 或直接统计汇总数据。</p><hr><h2 id="%E5%B8%B8%E7%94%A8%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0%E6%B1%87%E6%80%BB" tabindex="-1">常用聚合函数汇总 <a class="header-anchor" href="#常用聚合函数汇总" aria-label="Permalink to &quot;常用聚合函数汇总&quot;">​</a></h2><table tabindex="0"><thead><tr><th>函数</th><th>含义</th><th>示例用途</th></tr></thead><tbody><tr><td><code>COUNT()</code></td><td>统计行数</td><td>总用户数</td></tr><tr><td><code>SUM()</code></td><td>计算总和（用于数值列）</td><td>总销售额</td></tr><tr><td><code>AVG()</code></td><td>平均值（用于数值列）</td><td>平均工资</td></tr><tr><td><code>MAX()</code></td><td>最大值</td><td>最高成绩</td></tr><tr><td><code>MIN()</code></td><td>最小值</td><td>最低库存</td></tr><tr><td><code>GROUP_CONCAT()</code></td><td>将一列多个值拼接为字符串</td><td>拼接多个标签、分类等</td></tr></tbody></table><h2 id="%E7%A4%BA%E4%BE%8B-2" tabindex="-1">示例 <a class="header-anchor" href="#示例-2" aria-label="Permalink to &quot;示例&quot;">​</a></h2><p>假设有如下表结构 <code>t_user</code>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TABLE t_user (</span></span>
<span class="line"><span>  id INT AUTO_INCREMENT PRIMARY KEY,</span></span>
<span class="line"><span>  email VARCHAR(50),</span></span>
<span class="line"><span>  passwd VARCHAR(50)</span></span>
<span class="line"><span>);</span></span></code></pre></div><hr><h3 id="1.%20%E7%BB%9F%E8%AE%A1%E7%94%A8%E6%88%B7%E6%95%B0%E9%87%8F" tabindex="-1">1. 统计用户数量 <a class="header-anchor" href="#1. 统计用户数量" aria-label="Permalink to &quot;1. 统计用户数量&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT COUNT(*) FROM t_user;</span></span></code></pre></div><hr><h3 id="2.%20%E6%9F%A5%E8%AF%A2%E5%AF%86%E7%A0%81%E5%AD%97%E6%AE%B5%E7%9A%84%E5%B9%B3%E5%9D%87%E2%80%9C%E6%95%B0%E5%80%BC%E2%80%9D%EF%BC%88%E5%81%87%E8%AE%BE%20passwd%20%E5%AD%98%E5%82%A8%E7%9A%84%E6%98%AF%E6%95%B0%E5%AD%97%EF%BC%89" tabindex="-1">2. 查询密码字段的平均“数值”（假设 passwd 存储的是数字） <a class="header-anchor" href="#2. 查询密码字段的平均“数值”（假设 passwd 存储的是数字）" aria-label="Permalink to &quot;2. 查询密码字段的平均“数值”（假设 passwd 存储的是数字）&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT AVG(passwd + 0) FROM t_user;</span></span></code></pre></div><hr><h3 id="3.%20%E6%9F%A5%E8%AF%A2%E6%9C%80%E5%A4%A7%20ID%20%E5%92%8C%E6%9C%80%E5%B0%8F%20ID" tabindex="-1">3. 查询最大 ID 和最小 ID <a class="header-anchor" href="#3. 查询最大 ID 和最小 ID" aria-label="Permalink to &quot;3. 查询最大 ID 和最小 ID&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT MAX(id), MIN(id) FROM t_user;</span></span></code></pre></div><hr><h3 id="4.%20%E5%88%86%E7%BB%84%E7%BB%9F%E8%AE%A1%EF%BC%88%E5%A6%82%E6%8C%89%E9%82%AE%E7%AE%B1%E5%90%8E%E7%BC%80%EF%BC%89" tabindex="-1">4. 分组统计（如按邮箱后缀） <a class="header-anchor" href="#4. 分组统计（如按邮箱后缀）" aria-label="Permalink to &quot;4. 分组统计（如按邮箱后缀）&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT</span></span>
<span class="line"><span>  SUBSTRING_INDEX(email, &#39;@&#39;, -1) AS domain,</span></span>
<span class="line"><span>  COUNT(*) AS user_count</span></span>
<span class="line"><span>FROM t_user</span></span>
<span class="line"><span>GROUP BY domain;</span></span></code></pre></div><hr><h3 id="5.%20%E6%8B%BC%E6%8E%A5%E6%9F%90%E7%B1%BB%E7%94%A8%E6%88%B7%E7%9A%84%E6%89%80%E6%9C%89%20email" tabindex="-1">5. 拼接某类用户的所有 email <a class="header-anchor" href="#5. 拼接某类用户的所有 email" aria-label="Permalink to &quot;5. 拼接某类用户的所有 email&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT GROUP_CONCAT(email) FROM t_user WHERE id &lt;= 10;</span></span></code></pre></div></blockquote><h2 id="%E9%94%99%E8%AF%AF%E9%97%AE%E9%A2%98" tabindex="-1">错误问题 <a class="header-anchor" href="#错误问题" aria-label="Permalink to &quot;错误问题&quot;">​</a></h2><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">create table </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">t_user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> null primary key auto_increment,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    email </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> null,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    passwd </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)engine</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">InnoDB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> charset</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">utf8;</span></span></code></pre></div><blockquote><p>括号里 以 <code>,</code> 划分, 而不是 <code>;</code> 划分</p><p>括号里 最后一句 不加 <code>,</code></p><p>引擎名 必须 严格 按照大小写</p></blockquote><h2 id="%E8%BF%9B%E8%A1%8Climit%E6%B5%8B%E8%AF%95" tabindex="-1">进行limit测试 <a class="header-anchor" href="#进行limit测试" aria-label="Permalink to &quot;进行limit测试&quot;">​</a></h2><blockquote><h3 id="1.%20%E6%97%A0%E7%B4%A2%E5%BC%95%E5%AD%97%E6%AE%B5%20%2B%20LIMIT%20%E4%BC%98%E5%8C%96" tabindex="-1">1. <strong>无索引字段 + LIMIT 优化</strong> <a class="header-anchor" href="#1. 无索引字段 %2B LIMIT 优化" aria-label="Permalink to &quot;1. **无索引字段 + LIMIT 优化**&quot;">​</a></h3><ul><li><strong>无索引字段查询</strong>（如 <code>WHERE email = &#39;xxx&#39;</code>）会触发全表扫描。</li><li><strong>加 <code>LIMIT</code> 后</strong>，MySQL 找到足够记录后立即停止扫描，提高效率。</li></ul><p><strong>示例对比：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT * FROM t_user WHERE email = &#39;1@xinghuai.com&#39;;  ---0.33s</span></span>
<span class="line"><span></span></span>
<span class="line"><span>SELECT * FROM t_user WHERE email = &#39;1@xinghuai.com&#39; limit 1;   -- 0.00s</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 无 LIMIT（扫描全表 200 万行）</span></span>
<span class="line"><span>SELECT * FROM t_user WHERE email = &#39;1000000@xinghuai.com&#39;;  -- 耗时 0.22s</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-- 加 LIMIT 1（找到第一条即停止）</span></span>
<span class="line"><span>SELECT * FROM t_user WHERE email = &#39;1000000@xinghuai.com&#39; LIMIT 1;  -- 耗时 0.12s</span></span></code></pre></div><h3 id="2.%20%E6%9C%89%E7%B4%A2%E5%BC%95%E5%AD%97%E6%AE%B5%20%2B%20LIMIT" tabindex="-1">2. <strong>有索引字段 + LIMIT</strong> <a class="header-anchor" href="#2. 有索引字段 %2B LIMIT" aria-label="Permalink to &quot;2. **有索引字段 + LIMIT**&quot;">​</a></h3><ul><li><p><strong>索引查询（如主键或唯一索引）</strong>，<code>LIMIT</code> 对性能影响较小，因为 MySQL 能直接定位数据。</p></li><li><p><strong>非唯一索引</strong>，<code>LIMIT</code> 仍可减少回表次数，提高效率。</p></li><li><p>主键 是 id, 主键有索引, 下面两个 都只扫 一行</p></li><li><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SELECT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FROM t_user WHERE id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SELECT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FROM t_user WHERE id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> limit </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li></ul><h3 id="3.%20%E5%A4%A7%E5%81%8F%E7%A7%BB%E9%87%8F%EF%BC%88OFFSET%EF%BC%89%E7%9A%84%E6%80%A7%E8%83%BD%E7%93%B6%E9%A2%88" tabindex="-1">3. <strong>大偏移量（OFFSET）的性能瓶颈</strong> <a class="header-anchor" href="#3. 大偏移量（OFFSET）的性能瓶颈" aria-label="Permalink to &quot;3. **大偏移量（OFFSET）的性能瓶颈**&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-- 查询第 100 万页（每页 10 条）</span></span>
<span class="line"><span>SELECT * FROM t_user LIMIT 1000000, 10;  -- 先扫描 100 万条，再返回 10 条</span></span></code></pre></div><p><strong>问题</strong>：</p><ul><li>MySQL 必须先读取 <code>1000010</code> 条记录，再丢弃前 <code>1000000</code> 条，效率极低。</li></ul></blockquote><h2 id="%E6%B3%A8%E6%84%8F-explain" tabindex="-1">注意-explain <a class="header-anchor" href="#注意-explain" aria-label="Permalink to &quot;注意-explain&quot;">​</a></h2><blockquote><h3 id="explain%20%20%E6%98%BE%E7%A4%BA%E4%B8%8D%E5%87%BA%20limit%20%E7%9A%84%E4%BC%98%E5%8C%96!!!" tabindex="-1"><strong>explain 显示不出 limit 的优化!!!</strong> <a class="header-anchor" href="#explain  显示不出 limit 的优化!!!" aria-label="Permalink to &quot;**explain  显示不出 limit 的优化!!!**&quot;">​</a></h3><h3 id="%E4%BB%85%E5%8F%8D%E6%98%A0%20%E5%A4%A7%E8%87%B4%E7%9A%84%20%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92!!" tabindex="-1">仅反映 大致的 执行计划!! <a class="header-anchor" href="#仅反映 大致的 执行计划!!" aria-label="Permalink to &quot;仅反映 大致的 执行计划!!&quot;">​</a></h3></blockquote><h1 id="%E7%94%9F%E4%BA%A7%E6%B5%8B%E8%AF%95%E7%94%A8--%E7%9F%A5%E8%AF%86%E7%82%B9" tabindex="-1">生产测试用--知识点 <a class="header-anchor" href="#生产测试用--知识点" aria-label="Permalink to &quot;生产测试用--知识点&quot;">​</a></h1><h3 id="%E6%9C%AC%E8%8A%82%E5%88%9B%E5%BB%BA%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E7%A4%BA%E4%BE%8B-1" tabindex="-1"><a href="##本节创建存储过程示例">本节创建存储过程示例</a> <a class="header-anchor" href="#本节创建存储过程示例-1" aria-label="Permalink to &quot;[本节创建存储过程示例](##本节创建存储过程示例)&quot;">​</a></h3><h1 id="limiit%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2(%E4%B8%89)--%E9%87%8D%E7%82%B9" tabindex="-1">limiit分页查询(三)--<strong>重点</strong> <a class="header-anchor" href="#limiit分页查询(三)--重点" aria-label="Permalink to &quot;limiit分页查询(三)--**重点**&quot;">​</a></h1><h2 id="%E5%9F%BA%E6%9C%AC%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2" tabindex="-1">基本分页查询 <a class="header-anchor" href="#基本分页查询" aria-label="Permalink to &quot;基本分页查询&quot;">​</a></h2><ul><li>使用 <code>LIMIT offset, count</code> 实现分页查询。</li><li><code>offset</code> 表示偏移量，<code>count</code> 表示每页显示的行数。</li><li>示例：<div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LIMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (page_number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page_size, page_size;</span></span></code></pre></div><ul><li><code>page_number</code> 是页码。</li><li><code>page_size</code> 是每页显示的行数。</li></ul></li></ul><h2 id="%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98" tabindex="-1">性能问题 <a class="header-anchor" href="#性能问题" aria-label="Permalink to &quot;性能问题&quot;">​</a></h2><ul><li>当 <code>offset</code> 值较大时，MySQL 会扫描大量数据，导致性能下降。</li><li>例如，<code>LIMIT 1000000, 20</code> 会先扫描 100 万行数据，再返回 20 行，耗时较长。</li></ul><h2 id="%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95" tabindex="-1">优化方法 <a class="header-anchor" href="#优化方法" aria-label="Permalink to &quot;优化方法&quot;">​</a></h2><ul><li><p>使用**索引字段（如主键 <code>ID</code>）**来避免大偏移量的性能问题。</p></li><li><p>通过 <code>WHERE</code> 条件过滤掉前面的数据，直接定位到需要的数据范围。</p></li><li><p>示例：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (上一页最后一条数据的 ID)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LIMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page_size;</span></span></code></pre></div><ul><li>这种方式利用索引快速定位数据，避免了大偏移量的性能开销。</li></ul><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><h4 id="limitt%20%E6%B2%A1%E6%9C%89%E5%81%8F%E7%A7%BB%20%E9%82%A3%E4%B8%AA%E5%8F%82%E6%95%B0%E4%BA%86" tabindex="-1">limitt 没有偏移 那个参数了 <a class="header-anchor" href="#limitt 没有偏移 那个参数了" aria-label="Permalink to &quot;limitt 没有偏移 那个参数了&quot;">​</a></h4></div></li></ul><blockquote><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SELECT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FROM t_user LIMIT </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">s</span></span></code></pre></div><h3 id="%E4%BC%98%E5%8C%96%E4%B8%BA" tabindex="-1">优化为 <a class="header-anchor" href="#优化为" aria-label="Permalink to &quot;优化为&quot;">​</a></h3><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SELECT </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FROM t_user where id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">999999</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LIMIT  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.01</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">s</span></span></code></pre></div></blockquote><h2 id="%E4%BC%98%E5%8C%96%E7%9A%84%E4%BC%98%E5%8A%BF" tabindex="-1">优化的优势 <a class="header-anchor" href="#优化的优势" aria-label="Permalink to &quot;优化的优势&quot;">​</a></h2><ul><li>无论是第一页还是最后一页，查询性能基本一致。</li><li>通过<strong>索引字段过滤</strong>，查询效率更高。</li></ul><h2 id="%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><ul><li>索引字段不一定必须是 <code>ID</code>，可以根据实际业务选择合适的字段。</li><li>如果没有索引，分页查询的性能优化会受到限制。</li></ul><h2 id="%E6%80%BB%E7%BB%93-2" tabindex="-1">总结 <a class="header-anchor" href="#总结-2" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>基本分页查询适合小数据量场景。</li><li>在大数据量场景中，推荐使用<strong>索引字段结合 <code>WHERE</code> 条件优化</strong>分页查询。</li><li>通过这种优化方式，可以确保每一页的查询性能均衡。</li></ul><h1 id="order%20by%E6%8E%92%E5%BA%8F" tabindex="-1">order by排序 <a class="header-anchor" href="#order by排序" aria-label="Permalink to &quot;order by排序&quot;">​</a></h1><h2 id="ORDER%20BY%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95" tabindex="-1"><strong><code>ORDER BY</code> 的基本用法</strong> <a class="header-anchor" href="#ORDER BY 的基本用法" aria-label="Permalink to &quot;**\`ORDER BY\` 的基本用法**&quot;">​</a></h2><ul><li>用于对查询结果进行排序。</li><li>支持升序（<code>ASC</code>）和降序（<code>DESC</code>），默认是升序。----<strong>Ascending</strong>上升 <strong>Descending</strong>下降</li><li>可以按单个字段或多个字段排序：<div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ORDER BY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ASC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DESC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li>当 <code>name</code> 相同时，按 <code>age</code> 降序排序。</li></ul></li></ul><hr><h2 id="ORDER%20BY%20%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98" tabindex="-1"><strong><code>ORDER BY</code> 的性能问题</strong> <a class="header-anchor" href="#ORDER BY 的性能问题" aria-label="Permalink to &quot;**\`ORDER BY\` 的性能问题**&quot;">​</a></h2><ul><li>如果排序字段<strong>没有索引</strong>，MySQL 会进行<strong>全表扫描</strong>(explain-type-all)，并使用文件排序（<code>Using filesort</code>）。</li><li>文件排序（外排序）： --- 一般使用 归并 <ul><li>当<strong>数据量较大且内存不足时</strong>，MySQL 会将数据写入磁盘进行排序。</li><li>涉及大量磁盘 I/O，<strong>性能较低</strong>。</li><li>可以通过 <code>EXPLAIN</code> 查看查询计划，<code>Extra</code> 列中显示 <code>Using filesort</code> 表示存在文件排序。</li></ul></li></ul><hr><h2 id="%E4%BC%98%E5%8C%96%20ORDER%20BY%20%E7%9A%84%E6%96%B9%E6%B3%95" tabindex="-1"><strong>优化 <code>ORDER BY</code> 的方法</strong> <a class="header-anchor" href="#优化 ORDER BY 的方法" aria-label="Permalink to &quot;**优化 \`ORDER BY\` 的方法**&quot;">​</a></h2><blockquote><h3 id="%E5%85%88%E7%9C%8B%E4%B8%AA%E4%BE%8B%E5%AD%90" tabindex="-1">先看个例子 <a class="header-anchor" href="#先看个例子" aria-label="Permalink to &quot;先看个例子&quot;">​</a></h3><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> explain select </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> from user order by name;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> select_type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> table </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> partitions </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> possible_keys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key_len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ref  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rows </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filtered </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Extra          </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SIMPLE      </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ALL  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   100.00</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Using filesort </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> row in set, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> warning</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.01</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sec)</span></span></code></pre></div><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> explain select name from user order by name;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> select_type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> table </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> partitions </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> possible_keys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> key_len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ref  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rows </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filtered </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Extra       </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SIMPLE      </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 152</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NULL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   100.00</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Using index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+-------------+</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> row in set, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> warning</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sec)</span></span></code></pre></div><h3 id="%E4%BB%85%E4%BB%85%E5%9C%A8%20%E5%8A%A0%E4%BA%86%20select%20name%20%E5%90%8E%2C%20%E5%B0%B1%E5%8F%98%E4%B8%BA%E4%BA%86%20%E7%B4%A2%E5%BC%95%E6%8E%92%E5%BA%8F" tabindex="-1">仅仅在 加了 select name 后, 就变为了 <strong>索引排序</strong> <a class="header-anchor" href="#仅仅在 加了 select name 后%2C 就变为了 索引排序" aria-label="Permalink to &quot;仅仅在 加了 select name 后, 就变为了 **索引排序**&quot;">​</a></h3><h3 id="%E5%87%8F%E5%B0%91%E4%BA%86%20%E5%9B%9E%E8%A1%A8%20------%20%E8%AF%B7%E7%9C%8B%20%E5%85%B3%E4%BA%8E%E2%80%9C%E5%9B%9E%E8%A1%A8%E2%80%9D%E7%9A%84%E6%8F%90%E5%89%8D%E6%8F%90%E9%86%92" tabindex="-1">减少了 回表 ------ 请看 <a href="##关于“回表”的提前提醒">关于“回表”的提前提醒</a> <a class="header-anchor" href="#减少了 回表 ------ 请看 关于“回表”的提前提醒" aria-label="Permalink to &quot;减少了 回表 ------ 请看 [关于“回表”的提前提醒](##关于“回表”的提前提醒)&quot;">​</a></h3></blockquote><blockquote><ol><li><h3 id="%E4%B8%BA%E6%8E%92%E5%BA%8F%E5%AD%97%E6%AE%B5%E6%B7%BB%E5%8A%A0%E7%B4%A2%E5%BC%95" tabindex="-1"><strong>为排序字段添加索引</strong> <a class="header-anchor" href="#为排序字段添加索引" aria-label="Permalink to &quot;**为排序字段添加索引**&quot;">​</a></h3><ul><li>如果排序字段有索引，MySQL 可以利用索引直接排序，避免文件排序。</li><li>示例：<div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INDEX</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> idx_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ORDER BY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li><li>添加索引后，<code>EXPLAIN</code> 中的 <code>Extra</code> 列会显示 <code>Using index</code>，表示使用了索引。</li></ul></li><li><h3 id="%E5%87%8F%E5%B0%91%E6%9F%A5%E8%AF%A2%E7%9A%84%E5%AD%97%E6%AE%B5" tabindex="-1"><strong>减少查询的字段</strong> <a class="header-anchor" href="#减少查询的字段" aria-label="Permalink to &quot;**减少查询的字段**&quot;">​</a></h3><ul><li>如果查询中只需要排序字段，可以只查询该字段，避免回表操作。</li><li>示例：<div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ORDER BY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li><li>查询所有字段（<code>SELECT *</code>）可能导致回表查询，增加性能开销。</li></ul></li><li><p><strong>结合 <code>WHERE</code> 条件过滤数据</strong></p><ul><li>在排序前先通过 <code>WHERE</code> 条件减少数据量，降低排序的开销。</li><li>示例：<div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ORDER BY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li></ul></li><li><p><strong>避免大数据量排序</strong></p><ul><li>如果数据量过大，可以通过分页（<code>LIMIT</code>）减少排序的数据量。</li><li>示例：<div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ORDER BY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> LIMIT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li></ul></li></ol></blockquote><h2 id="ORDER%20BY%20%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" tabindex="-1"><code>ORDER BY</code> 的注意事项 <a class="header-anchor" href="#ORDER BY 的注意事项" aria-label="Permalink to &quot;\`ORDER BY\` 的注意事项&quot;">​</a></h2><ul><li>排序性能不仅与排序字段是否有索引有关，还与查询的字段（<code>SELECT</code> 的列）有关。</li><li>如果查询的字段需要回表操作，性能会受到影响。</li><li>索引的选择需要结合实际业务场景，合理设计主键索引和辅助索引。</li></ul><hr><h2 id="%E9%9D%A2%E8%AF%95%E4%B8%AD%E7%9A%84%E5%9B%9E%E7%AD%94%E5%BB%BA%E8%AE%AE--%E9%87%8D%E7%82%B9" tabindex="-1">面试中的回答建议--<strong>重点</strong> <a class="header-anchor" href="#面试中的回答建议--重点" aria-label="Permalink to &quot;面试中的回答建议--**重点**&quot;">​</a></h2><ul><li><p>面试中回答优化问题时，建议结合实际项目经验，描述问题的发现、分析和解决过程。</p></li><li><h3 id="%E7%A4%BA%E4%BE%8B%E5%9B%9E%E7%AD%94%EF%BC%9A" tabindex="-1">示例回答： <a class="header-anchor" href="#示例回答：" aria-label="Permalink to &quot;示例回答：&quot;">​</a></h3><ul><li><p><strong>问题</strong>：在项目中，某个查询的排序性能较低。</p></li><li><h3 id="%E5%88%86%E6%9E%90%EF%BC%9A%E9%80%9A%E8%BF%87%20EXPLAIN%20%E6%9F%A5%E7%9C%8B%E6%9F%A5%E8%AF%A2%E8%AE%A1%E5%88%92%EF%BC%8C%E5%8F%91%E7%8E%B0%20Extra%20%E5%88%97%E4%B8%AD%E6%9C%89%20Using%20filesort%E3%80%82%2C%20%E8%BF%99%E8%A1%A8%E7%A4%BA%20%E5%A4%96%E6%8E%92%E5%BA%8F" tabindex="-1"><strong>分析</strong>：通过 <code>EXPLAIN</code> 查看查询计划，发现 <code>Extra</code> 列中有 <code>Using filesort</code>。, 这表示 <code>外排序</code> <a class="header-anchor" href="#分析：通过 EXPLAIN 查看查询计划，发现 Extra 列中有 Using filesort。%2C 这表示 外排序" aria-label="Permalink to &quot;**分析**：通过 \`EXPLAIN\` 查看查询计划，发现 \`Extra\` 列中有 \`Using filesort\`。, 这表示 \`外排序\`&quot;">​</a></h3></li><li><p><strong>解决</strong>：</p><ol><li>为排序字段添加索引。 *<em>光加索引 还不行, 如果 select <em>, 还是会 回表</em></em></li><li>优化查询字段，避免不必要的回表操作。 <strong>指定 select 字段</strong></li><li>结合 <code>WHERE</code> 条件减少排序数据量。</li></ol></li><li><p><strong>结果</strong>：优化后查询性能显著提升。</p></li></ul></li></ul><h2 id="%E6%80%BB%E7%BB%93-3" tabindex="-1">总结 <a class="header-anchor" href="#总结-3" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li><code>ORDER BY</code> 是 MySQL 中常用的排序功能，支持升序和降序。</li><li>性能问题主要来源于文件排序（<code>Using filesort</code>），可以通过添加索引、减少查询字段、结合 <code>WHERE</code> 条件等方式优化。</li><li>在实际项目中，优化排序需要结合业务场景，合理设计索引和查询语句。</li></ul><p>希望这段内容对你理解 <code>ORDER BY</code> 的使用和优化有所帮助！</p><h1 id="group%20by%E5%88%86%E7%BB%84" tabindex="-1">group by分组 <a class="header-anchor" href="#group by分组" aria-label="Permalink to &quot;group by分组&quot;">​</a></h1><h2 id="GROUP%20BY%20%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF" tabindex="-1"><code>GROUP BY</code> 的实际应用场景 <a class="header-anchor" href="#GROUP BY 的实际应用场景" aria-label="Permalink to &quot;\`GROUP BY\` 的实际应用场景&quot;">​</a></h2><ul><li><p><strong>统计分析</strong>：</p><ul><li>统计每个年龄段的人数、每个部门的总薪资等。</li></ul></li><li><p><strong>数据分布</strong>：</p><ul><li>分析数据在不同类别中的分布情况。</li></ul></li><li><p><strong>结合分页</strong>：</p><ul><li>分组后结合 <code>LIMIT</code> 实现分页显示。</li></ul></li></ul><p>不关心 25岁有多少个, 只关心 有没有 25岁</p><blockquote><p>有人想用 去重 distinct</p><div class="language-c++ vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c++</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">select distinct age from user;</span></span></code></pre></div><p>但是 这样, 又没法 统计 个数了</p></blockquote><h2 id="GROUP%20BY%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95" tabindex="-1"><code>GROUP BY</code> 的基本用法 <a class="header-anchor" href="#GROUP BY 的基本用法" aria-label="Permalink to &quot;\`GROUP BY\` 的基本用法&quot;">​</a></h2><ul><li><p><strong>功能</strong>：将查询结果按照指定字段的值进行分组，相同值的记录归为一组。</p></li><li><p><strong>语法</strong>：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 分组字段, 聚合函数(其他字段)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 分组字段;</span></span></code></pre></div></li><li><p><strong>示例</strong>：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">group by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span></code></pre></div><blockquote><h3 id="%E6%98%BE%E7%A4%BA%E4%BA%86%20%E7%BB%9F%E8%AE%A1%E6%95%B0" tabindex="-1">显示了 统计数 <a class="header-anchor" href="#显示了 统计数" aria-label="Permalink to &quot;显示了 统计数&quot;">​</a></h3></blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">group by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span></code></pre></div><blockquote><h3 id="%E5%9C%A8%20SQL%20%E4%B8%AD%EF%BC%8CAS%20%E6%98%AF%E5%8F%AF%E9%80%89%E7%9A%84%EF%BC%8C%E5%9B%A0%E6%AD%A4%E4%BB%A5%E4%B8%8B%E4%B8%A4%E7%A7%8D%E5%86%99%E6%B3%95%E6%98%AF%E7%AD%89%E4%BB%B7%E7%9A%84%EF%BC%9A" tabindex="-1">在 SQL 中，<strong><code>AS</code> 是可选的</strong>，因此以下两种写法是等价的： <a class="header-anchor" href="#在 SQL 中，AS 是可选的，因此以下两种写法是等价的：" aria-label="Permalink to &quot;在 SQL 中，**\`AS\` 是可选的**，因此以下两种写法是等价的：&quot;">​</a></h3></blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">group by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 统计列名命名为</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age) num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">group by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span></code></pre></div><ul><li>按 <code>age</code> 分组，统计每个年龄段的人数。</li></ul></li></ul><h2 id="%E9%94%99%E8%AF%AF%E9%97%AE%E9%A2%98-1" tabindex="-1">错误问题 <a class="header-anchor" href="#错误问题-1" aria-label="Permalink to &quot;错误问题&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">group by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span></code></pre></div><p>出现错误----根据老师 win安装 sql_mode , 没有这个问题</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sql_mode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">only_full_group_by</span></span></code></pre></div><blockquote><p>当 <code>sql_mode=only_full_group_by</code> 时，SQL 查询必须严格遵守 <code>GROUP BY</code> 的规则。也就是说，<code>SELECT</code> 中的所有字段要么出现在 <code>GROUP BY</code> 子句中，要么被聚合函数包裹。</p><p>如果你在 <code>sql_mode=only_full_group_by</code> 模式下运行以下查询：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span></code></pre></div><h3 id="%E8%BF%99%E6%98%AF%E5%90%88%E6%B3%95%E7%9A%84%EF%BC%8C%E5%9B%A0%E4%B8%BA%20age%20%E5%87%BA%E7%8E%B0%E5%9C%A8%20GROUP%20BY%20%E5%AD%90%E5%8F%A5%E4%B8%AD%E3%80%82" tabindex="-1">这是合法的，因为 <code>age</code> 出现在 <code>GROUP BY</code> 子句中。 <a class="header-anchor" href="#这是合法的，因为 age 出现在 GROUP BY 子句中。" aria-label="Permalink to &quot;这是合法的，因为 \`age\` 出现在 \`GROUP BY\` 子句中。&quot;">​</a></h3><p>但是，如果你尝试选择其他未聚合的列，例如：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span></code></pre></div><h3 id="%E8%BF%99%E4%BC%9A%E6%8A%A5%E9%94%99%EF%BC%8C%E5%9B%A0%E4%B8%BA%20name%20%E6%97%A2%E6%B2%A1%E6%9C%89%E5%87%BA%E7%8E%B0%E5%9C%A8%20GROUP%20BY%20%E5%AD%90%E5%8F%A5%E4%B8%AD%EF%BC%8C%E4%B9%9F%E6%B2%A1%E6%9C%89%E8%A2%AB%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0%E5%8C%85%E8%A3%B9%E3%80%82" tabindex="-1">这会报错，因为 <code>name</code> 既没有出现在 <code>GROUP BY</code> 子句中，也没有被聚合函数包裹。 <a class="header-anchor" href="#这会报错，因为 name 既没有出现在 GROUP BY 子句中，也没有被聚合函数包裹。" aria-label="Permalink to &quot;这会报错，因为 \`name\` 既没有出现在 \`GROUP BY\` 子句中，也没有被聚合函数包裹。&quot;">​</a></h3><h3 id="%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95" tabindex="-1">解决方法 <a class="header-anchor" href="#解决方法" aria-label="Permalink to &quot;解决方法&quot;">​</a></h3><ol><li><p><strong>修改查询</strong>：确保所有未聚合的列都出现在 <code>GROUP BY</code> 子句中，或者使用聚合函数。例如：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age, GROUP_CONCAT(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> names </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span></code></pre></div></li><li><p><strong>关闭 <code>ONLY_FULL_GROUP_BY</code> 模式</strong>（不推荐）：如果你不需要严格遵守 <code>GROUP BY</code> 规则，可以通过以下方式关闭该模式：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GLOBAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sql_mode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> REPLACE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@@sql_mode,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ONLY_FULL_GROUP_BY&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div><p>或者针对当前会话：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SESSION</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sql_mode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> REPLACE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@@sql_mode,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ONLY_FULL_GROUP_BY&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div><p><strong>注意</strong>：关闭该模式可能会导致查询结果不确定，尤其是在未聚合的列上。</p></li></ol><h3 id="%E6%8E%A8%E8%8D%90" tabindex="-1">推荐 <a class="header-anchor" href="#推荐" aria-label="Permalink to &quot;推荐&quot;">​</a></h3><p>尽量调整查询以适应 <code>ONLY_FULL_GROUP_BY</code> 模式，而不是关闭它，因为该模式可以帮助你避免潜在的逻辑错误。</p></blockquote><h2 id="GROUP%20BY%20%E4%B8%8E%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0" tabindex="-1"><code>GROUP BY</code> 与聚合函数 <a class="header-anchor" href="#GROUP BY 与聚合函数" aria-label="Permalink to &quot;\`GROUP BY\` 与聚合函数&quot;">​</a></h2><ul><li>常用的聚合函数： <ul><li><code>COUNT()</code>：统计数量。</li><li><code>SUM()</code>：求和。</li><li><code>AVG()</code>：求平均值。</li><li><code>MAX()</code>：求最大值。</li><li><code>MIN()</code>：求最小值。</li></ul></li><li>示例：<div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SUM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(salary) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> total_salary</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span></code></pre></div><ul><li>按 <code>age</code> 分组，统计每个年龄段的薪资总和。</li></ul></li></ul><hr><h2 id="GROUP%20BY%20%E4%B8%8E%20HAVING--%E5%8A%A0%E6%9D%A1%E4%BB%B6" tabindex="-1"><code>GROUP BY</code> 与 <code>HAVING</code>--加条件 <a class="header-anchor" href="#GROUP BY 与 HAVING--加条件" aria-label="Permalink to &quot;\`GROUP BY\` 与 \`HAVING\`--加条件&quot;">​</a></h2><ul><li><p><strong><code>HAVING</code></strong>：用于对分组后的结果<strong>进行过滤。</strong></p></li><li><p>来源于 have , 理解为 <strong>“具有某种条件的分组”</strong></p></li><li><p><strong>区别</strong>：</p><ul><li><code>WHERE</code>：在分组前过滤数据。</li><li><code>HAVING</code>：在分组后过滤数据。</li></ul></li><li><p>示例：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HAVING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age) num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">group by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">having</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li>统计每个年龄段的人数，并筛选出人数大于 1 的年龄段。</li></ul></li></ul><hr><h2 id="GROUP%20BY%20%E4%B8%8E%E5%A4%9A%E5%AD%97%E6%AE%B5%E5%88%86%E7%BB%84" tabindex="-1"><code>GROUP BY</code> 与多字段分组 <a class="header-anchor" href="#GROUP BY 与多字段分组" aria-label="Permalink to &quot;\`GROUP BY\` 与多字段分组&quot;">​</a></h2><ul><li><p>可以按多个字段分组。</p></li><li><p>示例：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age, sex, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age, sex;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age, sex  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age, sex;</span></span></code></pre></div><ul><li>按 <code>age</code> 和 <code>sex</code> 组合分组，统计每组的人数。</li></ul></li></ul><blockquote><h3 id="COUNT(*)" tabindex="-1">COUNT(*) <a class="header-anchor" href="#COUNT(*)" aria-label="Permalink to &quot;COUNT(*)&quot;">​</a></h3><h3 id="%E4%BC%9A%E8%A2%AB%E4%BC%98%E5%8C%96%E4%B8%BA%20%E4%BB%A5%20%E4%B8%BB%E9%94%AE%20%E4%B8%BA%E5%87%86%20%E7%9A%84%E8%A1%8C%E6%95%B0" tabindex="-1">会被优化为 以 主键 为准 的行数 <a class="header-anchor" href="#会被优化为 以 主键 为准 的行数" aria-label="Permalink to &quot;会被优化为 以 主键 为准 的行数&quot;">​</a></h3></blockquote><hr><h2 id="GROUP%20BY%20%E4%B8%8E%20ORDER%20BY%20%E7%9A%84%E7%BB%93%E5%90%88" tabindex="-1"><code>GROUP BY</code> 与 <code>ORDER BY</code> 的结合 <a class="header-anchor" href="#GROUP BY 与 ORDER BY 的结合" aria-label="Permalink to &quot;\`GROUP BY\` 与 \`ORDER BY\` 的结合&quot;">​</a></h2><ul><li><p>可以在分组后对结果进行排序。</p></li><li><p>示例：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DESC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li>按 <code>age</code> 分组后，按人数降序排序。</li></ul></li></ul><h2 id="%E6%B3%A8%E6%84%8F-mysql-8.0%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98" tabindex="-1">注意-mysql-8.0性能问题 <a class="header-anchor" href="#注意-mysql-8.0性能问题" aria-label="Permalink to &quot;注意-mysql-8.0性能问题&quot;">​</a></h2><blockquote><h3 id="group%20by%20%E5%BE%88%E5%B0%91%E6%9C%89%20%E5%A4%96%E6%8E%92%E5%BA%8F%E4%BA%86" tabindex="-1"><strong>group by 很少有 外排序了</strong> <a class="header-anchor" href="#group by 很少有 外排序了" aria-label="Permalink to &quot;**group by 很少有 外排序了**&quot;">​</a></h3><h3 id="%E4%BB%8D%E7%84%B6%E6%9C%89%E5%A4%96%E6%8E%92%E5%BA%8F%EF%BC%8C%E4%BD%86%E8%A7%A6%E5%8F%91%E6%9D%A1%E4%BB%B6%E5%8F%98%E5%B0%91%E4%BA%86" tabindex="-1"><strong>仍然有外排序，但触发条件变少了</strong> <a class="header-anchor" href="#仍然有外排序，但触发条件变少了" aria-label="Permalink to &quot;**仍然有外排序，但触发条件变少了**&quot;">​</a></h3><ul><li>从 <strong>MySQL 8.0 开始</strong>，优化器更倾向于使用： <ul><li><strong>索引排序</strong></li><li><strong>临时表（memory 或 disk）聚合</strong></li><li><strong>hash 聚合（8.0 引入）</strong></li></ul></li></ul><h3 id="%E5%9B%A0%E6%AD%A4%2C%20%E4%B8%8B%E9%9D%A2%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%2C%20%E5%BE%88%E5%B0%91%E7%9C%8B%E5%88%B0%20%E5%A4%96%E6%8E%92%E5%BA%8F%E4%BA%86" tabindex="-1">因此, 下面的性能测试, 很少看到 外排序了 <a class="header-anchor" href="#因此%2C 下面的性能测试%2C 很少看到 外排序了" aria-label="Permalink to &quot;因此, 下面的性能测试, 很少看到 外排序了&quot;">​</a></h3></blockquote><h2 id="GROUP%20BY%20%E7%9A%84%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98--explain" tabindex="-1"><code>GROUP BY</code> 的性能问题--explain <a class="header-anchor" href="#GROUP BY 的性能问题--explain" aria-label="Permalink to &quot;\`GROUP BY\` 的性能问题--explain&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">explain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">group by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span></code></pre></div><blockquote><h2 id="EXPLAIN%20%E5%88%86%E6%9E%90%20GROUP%20BY%20%E6%80%A7%E8%83%BD" tabindex="-1"><strong><code>EXPLAIN</code> 分析 <code>GROUP BY</code> 性能</strong> <a class="header-anchor" href="#EXPLAIN 分析 GROUP BY 性能" aria-label="Permalink to &quot;**\`EXPLAIN\` 分析 \`GROUP BY\` 性能**&quot;">​</a></h2><ul><li><p>使用 <code>EXPLAIN</code> 查看查询计划，分析性能问题。</p></li><li><p><strong>关键字段</strong>：</p><ul><li><strong><code>Extra</code></strong>： <ul><li><code>Using filesort</code>：表示触发了文件排序，性能较低。</li><li><code>Using temporary</code>：表示创建了临时表，增加了开销。</li></ul></li></ul></li><li><p>示例：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">EXPLAIN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span></code></pre></div><ul><li>如果 <code>Extra</code> 中出现 <code>Using filesort</code> 或 <code>Using temporary</code>，需要优化分组字段或添加索引。</li></ul></li></ul><h2 id="%E5%88%86%E6%9E%90%E4%BC%98%E5%8C%96" tabindex="-1">分析优化 <a class="header-anchor" href="#分析优化" aria-label="Permalink to &quot;分析优化&quot;">​</a></h2><ul><li><h3 id="%E9%BB%98%E8%AE%A4%E6%8E%92%E5%BA%8F%EF%BC%9A" tabindex="-1"><strong>默认排序</strong>： <a class="header-anchor" href="#默认排序：" aria-label="Permalink to &quot;**默认排序**：&quot;">​</a></h3><ul><li><code>GROUP BY</code> 会对<strong>分组字段进行排序</strong>，类似于隐式的 <code>ORDER BY</code>。</li><li>如果<strong>分组字段没有索引</strong>，可能会触发文件排序（<code>Using filesort</code>），导致性能下降。</li></ul></li><li><h3 id="%E4%B8%B4%E6%97%B6%E8%A1%A8%EF%BC%9A" tabindex="-1"><strong>临时表</strong>： <a class="header-anchor" href="#临时表：" aria-label="Permalink to &quot;**临时表**：&quot;">​</a></h3><ul><li>在 SQL 中，<strong>临时表</strong>（Temporary Table）是一种在数据库会话中临时存储数据的表。临时表的生命周期仅限于当前会话或事务，适用于需要在查询中存储中间结果的场景。---- <strong>group by 就产生了 临时表, 存储 查询和统计的 数据</strong></li><li><code>GROUP BY</code> 可能会<strong>创建临时表</strong>（<code>Using temporary</code>），进一步增加性能开销。</li></ul></li><li><h3 id="%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95%EF%BC%9A" tabindex="-1"><strong>优化方法</strong>： <a class="header-anchor" href="#优化方法：" aria-label="Permalink to &quot;**优化方法**：&quot;">​</a></h3><ol><li><p><strong>为分组字段添加索引</strong>：</p><ul><li>示例：<div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INDEX</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> idx_age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user(age);</span></span></code></pre></div></li></ul></li><li><p><strong>减少分组字段的数量</strong>：</p><ul><li>只分组必要的字段，避免不必要的复杂分组。</li></ul></li><li><p><strong>使用 <code>WHERE</code> 过滤数据</strong>：</p><ul><li>在分组前通过 <code>WHERE</code> 条件减少数据量。</li><li>示例：<div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span></code></pre></div></li></ul></li></ol></li></ul><hr></blockquote><h2 id="GROUP%20BY%20%E4%B8%8E%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%87%8F%E7%9A%84%E4%BC%98%E5%8C%96" tabindex="-1"><strong><code>GROUP BY</code> 与大数据量的优化</strong> <a class="header-anchor" href="#GROUP BY 与大数据量的优化" aria-label="Permalink to &quot;**\`GROUP BY\` 与大数据量的优化**&quot;">​</a></h2><ul><li><p><strong>问题</strong>：</p><ul><li>当数据量较大（如百万级别），<code>GROUP BY</code> 的性能问题会更加明显。</li></ul></li><li><p><strong>优化策略</strong>：</p><ol><li><strong>分组字段添加索引</strong>： <ul><li>索引可以加速分组操作，避免全表扫描。</li></ul></li><li><strong>减少分组数据量</strong>： <ul><li>使用 <code>WHERE</code> 条件过滤不必要的数据。</li></ul></li><li><strong>避免隐式排序</strong>： <ul><li>如果不需要排序，可以通过 <code>ORDER BY NULL</code> 禁用默认排序：<div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ORDER BY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li></ul></li></ol></li></ul><h2 id="%E6%80%BB%E7%BB%93-4" tabindex="-1">总结 <a class="header-anchor" href="#总结-4" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li><strong><code>GROUP BY</code> 的作用</strong>： <ul><li>按指定字段分组，结合聚合函数进行统计分析。</li></ul></li><li><strong>性能优化的关键</strong>： <ul><li>为分组字段添加索引。</li><li>使用 <code>WHERE</code> 过滤数据，减少分组数据量。</li><li>使用 <code>EXPLAIN</code> 分析查询计划，定位性能瓶颈。</li></ul></li><li><strong>注意事项</strong>： <ul><li>分组字段默认排序，可能触发文件排序（<code>Using filesort</code>）。</li><li>分组后的条件过滤使用 <code>HAVING</code>，而非 <code>WHERE</code>。</li></ul></li></ul><h1 id="%E7%AC%94%E8%AF%95%E9%97%AE%E9%A2%98%E5%AE%9E%E8%B7%B5" tabindex="-1">笔试问题实践 <a class="header-anchor" href="#笔试问题实践" aria-label="Permalink to &quot;笔试问题实践&quot;">​</a></h1><p><img src="`+c+`" alt="image-20250511211756451"></p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(serno), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(amount) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bank_bili ;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">类似</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id),</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> brno,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(amount) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">money</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bank_bili </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">group by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> brno,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> order by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> brno,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">money</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> desc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">类似</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sex,age,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">group by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sex,age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">order by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">desc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 优化</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--同一个性别 在一块</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sex,age,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">group by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sex,age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">order by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sex,age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">desc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-------+-----+----------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| sex   | age | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age) |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-------+-----+----------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| man   |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">28</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |       </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">28</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| man   |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">27</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |       </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">27</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| man   |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">26</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |       </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">26</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| woman |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |       </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| man   |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |       </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| woman |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |       </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-------+-----+----------+</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> rows</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sec)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-------+-----+----------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| sex   | age | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age) |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-------+-----+----------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| man   |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">28</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |       </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">28</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| man   |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">27</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |       </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">27</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| man   |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">26</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |       </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">26</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| man   |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |       </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| woman |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |       </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| woman |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |       </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-------+-----+----------+</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> rows</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sec)</span></span></code></pre></div><h2 id="%E7%89%B9%E5%88%AB%E6%B3%A8%E6%84%8F-desc%E6%AD%A7%E4%B9%89" tabindex="-1">特别注意-desc歧义 <a class="header-anchor" href="#特别注意-desc歧义" aria-label="Permalink to &quot;特别注意-desc歧义&quot;">​</a></h2><p>在 SQL 中，<code>DESC</code> 有两个常见的含义，具体取决于上下文：</p><ul><li><strong><code>DESC</code> 表示降序排序</strong>：用于 <code>ORDER BY</code>。 ASC 升序</li><li><strong><code>DESC</code> 表示描述表结构</strong>：用于查看表的定义。</li></ul><h1 id="%E5%8D%95%E8%A1%A8%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9D%9F" tabindex="-1">单表查询结束 <a class="header-anchor" href="#单表查询结束" aria-label="Permalink to &quot;单表查询结束&quot;">​</a></h1><h1 id="%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2(%E4%B8%80)" tabindex="-1">连接查询(一) <a class="header-anchor" href="#连接查询(一)" aria-label="Permalink to &quot;连接查询(一)&quot;">​</a></h1><blockquote><p>在实际的数据库应用中，单表查询无法满足复杂的数据需求，尤其是在符合范式设计的情况下，数据通常会被拆分到多个表中。为了高效地从多个表中获取相关数据，我们需要使用 <strong>连接查询</strong>。</p><p>还得 发起两次 连接</p></blockquote><hr><h2 id="%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2%E7%9A%84%E5%BF%85%E8%A6%81%E6%80%A7" tabindex="-1"><strong>连接查询的必要性</strong> <a class="header-anchor" href="#连接查询的必要性" aria-label="Permalink to &quot;**连接查询的必要性**&quot;">​</a></h2><ul><li><strong>避免多次查询</strong>：多次查询会导致多次通信，增加网络开销和数据库服务器的处理负担。</li><li><strong>提高效率</strong>：通过一次查询获取多个表的数据，减少通信次数和处理流程。</li><li><strong>范式设计的需求</strong>：表拆分后，数据分布在多个表中，连接查询是整合数据的必要手段。</li></ul><hr><h2 id="%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2%E7%9A%84%E5%88%86%E7%B1%BB" tabindex="-1"><strong>连接查询的分类</strong> <a class="header-anchor" href="#连接查询的分类" aria-label="Permalink to &quot;**连接查询的分类**&quot;">​</a></h2><p><img src="`+B+`" alt="image-20250511222831269"></p><blockquote><p>连接查询分为两大类：<strong>内连接</strong> 和 <strong>外连接</strong>。</p><h4 id="%EF%BC%881%EF%BC%89%E5%86%85%E8%BF%9E%E6%8E%A5%EF%BC%88INNER%20JOIN%EF%BC%89" tabindex="-1">（1）<strong>内连接（INNER JOIN）</strong> <a class="header-anchor" href="#（1）内连接（INNER JOIN）" aria-label="Permalink to &quot;（1）**内连接（INNER JOIN）**&quot;">​</a></h4><ul><li><strong>作用</strong>：获取两个表中匹配的数据（交集）。</li><li><strong>特点</strong>：只返回两个表中满足连接条件的记录。</li><li><strong>示例</strong>：<div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> students</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scores</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">subject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scores</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">score</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> students</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INNER JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scores </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> students</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> scores</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">student_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li></ul><h4 id="%EF%BC%882%EF%BC%89%E5%A4%96%E8%BF%9E%E6%8E%A5%EF%BC%88OUTER%20JOIN%EF%BC%89" tabindex="-1">（2）<strong>外连接（OUTER JOIN）</strong> <a class="header-anchor" href="#（2）外连接（OUTER JOIN）" aria-label="Permalink to &quot;（2）**外连接（OUTER JOIN）**&quot;">​</a></h4><p>外连接又分为三种：</p><ul><li><p><strong>左连接（LEFT JOIN）</strong>：</p><ul><li><p>返回左表的所有记录，以及右表中与之匹配的记录；如果右表没有匹配的记录，则返回 <code>NULL</code>。</p></li><li><p><strong>示例</strong>：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> students</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scores</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">subject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scores</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">score</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> students</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LEFT JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scores </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> students</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> scores</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">student_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li></ul></li><li><p><strong>右连接（RIGHT JOIN）</strong>：</p><ul><li>返回右表的所有记录，以及左表中与之匹配的记录；如果左表没有匹配的记录，则返回 <code>NULL</code>。</li><li><strong>示例</strong>：<div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> students</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scores</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">subject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">scores</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">score</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> students</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RIGHT JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scores </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> students</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> scores</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">student_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li></ul></li><li><p><strong>全连接（FULL OUTER JOIN）</strong>：</p><ul><li>返回两个表中所有的记录，不管是否匹配；不匹配的部分用 <code>NULL</code> 填充。</li><li><strong>注意</strong>：MySQL 不直接支持 <code>FULL OUTER JOIN</code>，可以通过 <code>UNION</code> 模拟实现。</li></ul></li></ul></blockquote><hr><h2 id="%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" tabindex="-1"><strong>连接查询的注意事项</strong> <a class="header-anchor" href="#连接查询的注意事项" aria-label="Permalink to &quot;**连接查询的注意事项**&quot;">​</a></h2><ul><li><strong>表拆分的平衡</strong>：表拆分过多会导致连接查询变得复杂，影响性能。</li><li><strong>查询效率</strong>：连接查询涉及多个表，可能会增加查询时间，尤其是表数据量较大时。</li><li><strong>索引优化</strong>：为连接条件的列（如主键、外键）创建索引，可以显著提高查询效率。</li></ul><h1 id="25-5-11" tabindex="-1">25-5-11 <a class="header-anchor" href="#25-5-11" aria-label="Permalink to &quot;25-5-11&quot;">​</a></h1><h1 id="%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2(%E4%BA%8C)" tabindex="-1">连接查询(二) <a class="header-anchor" href="#连接查询(二)" aria-label="Permalink to &quot;连接查询(二)&quot;">​</a></h1><p>在数据库设计中，随着表的拆分和范式化设计，数据往往分布在多个表中。为了高效地获取相关数据，我们需要使用 <strong>多表连接查询</strong>。</p><h2 id="%E5%9C%BA%E6%99%AF%E6%8F%8F%E8%BF%B0" tabindex="-1"><strong>场景描述</strong> <a class="header-anchor" href="#场景描述" aria-label="Permalink to &quot;**场景描述**&quot;">​</a></h2><p><img src="`+A+`" alt="image-20250511223303731"></p><p>以学生考试系统为例，设计了三张表：</p><ul><li><strong>学生表（student）</strong>：存储学生的基本信息（如学号、姓名、年龄、性别）。</li><li><strong>课程表（course）</strong>：存储课程的基本信息（如课程号、课程名称、学分）。</li><li><strong>考试表（exam）</strong>：存储考试结果（如学生ID、课程ID、考试时间、成绩）。</li></ul><p>通过这些表，我们可以实现以下需求：</p><ul><li>查询某个学生的考试成绩。</li><li>查询某个学生的详细信息及其考试成绩。</li><li>查询某门课程的考试成绩及相关学生信息。</li></ul><blockquote><h3 id="%E5%88%9B%E5%BB%BA%E8%A1%A8-1" tabindex="-1">创建表 <a class="header-anchor" href="#创建表-1" aria-label="Permalink to &quot;创建表&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unsigned </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">primary key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  not null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> auto_increment,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">not null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">tinyint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unsigned </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">not null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sex enum(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;M&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;W&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">not null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> course</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unsigned </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">primary key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  not null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> auto_increment,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">not null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">credit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">tinyint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unsigned </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">not null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> exame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unsigned </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">not null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unsigned  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">not null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">time</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">score </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">primary key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,cid)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE" tabindex="-1">添加数据 <a class="header-anchor" href="#添加数据" aria-label="Permalink to &quot;添加数据&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">insert into</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age, sex) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">values</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;zhangsan&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;M&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;gaoyang&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;W&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;chenwei&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;M&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;linfeng&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">21</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;W&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;liuxiang&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">19</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;W&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">insert into</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> course(cname, credit) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">values</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;C++基础课程&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;C++高级课程&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;C++项目开发&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;C++算法课程&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">insert into</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, cid, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, score) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">values</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2021-04-09&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">99</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2021-04-10&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2021-04-10&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2021-04-12&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">85</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2021-04-09&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">56</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2021-04-10&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">93</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2021-04-11&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2021-04-11&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">99</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2021-04-10&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">59</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2021-04-12&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">94</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2021-04-11&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">95</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="%E6%9F%A5%E8%AF%A2" tabindex="-1">查询 <a class="header-anchor" href="#查询" aria-label="Permalink to &quot;查询&quot;">​</a></h3><p>按照 之前学的 单表查询, 必须知道 uid 和 cid 才能获得 score ------ <strong>不过, 显然,这是一个 内连接查询</strong></p><p>显然这样是不行的</p></blockquote><h2 id="%E5%86%85%E8%BF%9E%E6%8E%A5%E8%AF%AD%E6%B3%95" tabindex="-1">内连接语法 <a class="header-anchor" href="#内连接语法" aria-label="Permalink to &quot;内连接语法&quot;">​</a></h2><blockquote><p>在 SQL 中，<strong>内连接（INNER JOIN）</strong> 是一种用于连接两个或多个表的操作。它会返回两个表中满足连接条件的交集部分，即只有那些在所有参与表中都匹配的记录才会出现在结果集中。</p><h3 id="%E8%AF%AD%E6%B3%95%EF%BC%9A" tabindex="-1">语法： <a class="header-anchor" href="#语法：" aria-label="Permalink to &quot;语法：&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 列名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INNER JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 表1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">列名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 表2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">列名</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="%E5%85%B3%E9%94%AE%E7%82%B9%EF%BC%9A" tabindex="-1">关键点： <a class="header-anchor" href="#关键点：" aria-label="Permalink to &quot;关键点：&quot;">​</a></h3><ol><li><h3 id="INNER%20JOIN%EF%BC%9A%E6%8C%87%E5%AE%9A%E8%BF%9B%E8%A1%8C%E5%86%85%E8%BF%9E%E6%8E%A5%E3%80%82" tabindex="-1"><strong>INNER JOIN</strong>：指定进行内连接。 <a class="header-anchor" href="#INNER JOIN：指定进行内连接。" aria-label="Permalink to &quot;**INNER JOIN**：指定进行内连接。&quot;">​</a></h3></li><li><h3 id="ON%EF%BC%9A%E5%AE%9A%E4%B9%89%E8%BF%9E%E6%8E%A5%E6%9D%A1%E4%BB%B6%EF%BC%8C%E9%80%9A%E5%B8%B8%E6%98%AF%E4%B8%A4%E4%B8%AA%E8%A1%A8%E4%B8%AD%E7%9B%B8%E5%85%B3%E8%81%94%E7%9A%84%E5%88%97%E3%80%82" tabindex="-1"><strong>ON</strong>：定义连接条件，通常是两个表中相关联的列。 <a class="header-anchor" href="#ON：定义连接条件，通常是两个表中相关联的列。" aria-label="Permalink to &quot;**ON**：定义连接条件，通常是两个表中相关联的列。&quot;">​</a></h3></li></ol><h3 id="%E7%A4%BA%E4%BE%8B%EF%BC%9A" tabindex="-1">示例： <a class="header-anchor" href="#示例：" aria-label="Permalink to &quot;示例：&quot;">​</a></h3><p>假设有两个表：</p><p><strong>表1：student</strong></p><table tabindex="0"><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>张三</td></tr><tr><td>2</td><td>李四</td></tr><tr><td>3</td><td>王五</td></tr></tbody></table><p><strong>表2：score</strong></p><table tabindex="0"><thead><tr><th>student_id</th><th>course</th><th>score</th></tr></thead><tbody><tr><td>1</td><td>数学</td><td>90</td></tr><tr><td>2</td><td>英语</td><td>85</td></tr><tr><td>4</td><td>物理</td><td>88</td></tr></tbody></table><p>执行以下内连接查询：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">score</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">course</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">score</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">score</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INNER JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> score</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> score</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">student_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p><strong>结果：</strong></p><table tabindex="0"><thead><tr><th>name</th><th>course</th><th>score</th></tr></thead><tbody><tr><td>张三</td><td>数学</td><td>90</td></tr><tr><td>李四</td><td>英语</td><td>85</td></tr></tbody></table><h3 id="%E8%A7%A3%E9%87%8A%EF%BC%9A" tabindex="-1">解释： <a class="header-anchor" href="#解释：" aria-label="Permalink to &quot;解释：&quot;">​</a></h3><ul><li><code>student</code> 表和 <code>score</code> 表通过 <code>student.id = score.student_id</code> 进行连接。</li><li>只有 <code>student.id</code> 和 <code>score.student_id</code> 匹配的记录会出现在结果中。</li><li><code>王五</code> 和 <code>score</code> 表没有匹配的记录，因此不会出现在结果中。</li><li><code>score</code> 表中 <code>student_id = 4</code> 的记录也没有匹配的学生，因此也被排除。</li></ul><h3 id="%E6%80%BB%E7%BB%93%EF%BC%9A" tabindex="-1">总结： <a class="header-anchor" href="#总结：" aria-label="Permalink to &quot;总结：&quot;">​</a></h3><p>内连接用于提取两个表中共有的数据，未匹配的记录会被过滤掉。</p></blockquote><h2 id="%E5%A4%9A%E8%A1%A8%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2%E7%9A%84%E6%AD%A5%E9%AA%A4" tabindex="-1">多表连接查询的步骤 <a class="header-anchor" href="#多表连接查询的步骤" aria-label="Permalink to &quot;多表连接查询的步骤&quot;">​</a></h2><p><img src="`+y+`" alt="image-20250512102609720"></p><p>目的 是 合并上面的 两条 sql语句</p><blockquote><h3 id="(1%EF%BC%89%E6%98%8E%E7%A1%AE%E9%9C%80%E6%B1%82" tabindex="-1">(1）明确需求 <a class="header-anchor" href="#(1）明确需求" aria-label="Permalink to &quot;(1）明确需求&quot;">​</a></h3><ul><li>确定需要查询的字段。</li><li>确定涉及的表及其关系（如主键与外键的关联）。</li></ul><h3 id="%EF%BC%882%EF%BC%89%E9%80%90%E6%AD%A5%E6%9E%84%E5%BB%BA%E6%9F%A5%E8%AF%A2---%20%E4%B8%80%E4%B8%AA%20%E8%BF%87%E7%A8%8B" tabindex="-1">（2）<strong>逐步构建查询</strong>--- 一个 过程 <a class="header-anchor" href="#（2）逐步构建查询--- 一个 过程" aria-label="Permalink to &quot;（2）**逐步构建查询**--- 一个 过程&quot;">​</a></h3><ol><li><p><strong>单表查询</strong>：先从单表中获取需要的数据。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student a </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=================</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">score</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exam c </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AND</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li><li><p><strong>两表连接</strong>：通过主键和外键的关系，将两张表的数据关联起来。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">score</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INNER JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exam c </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AND</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li><li><p><strong>多表连接</strong>：在两表连接的基础上，逐步加入其他表的数据。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">course_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">score</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INNER JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exam c </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INNER JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> course b </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li></ol><h3 id="%EF%BC%883%EF%BC%89%E4%BD%BF%E7%94%A8%E5%88%AB%E5%90%8D" tabindex="-1">（3）<strong>使用别名</strong> <a class="header-anchor" href="#（3）使用别名" aria-label="Permalink to &quot;（3）**使用别名**&quot;">​</a></h3><ul><li><p>为表设置别名，便于区分字段，避免字段名冲突。</p></li><li><p>示例：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">course_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">score</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INNER JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exam c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INNER JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> course b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AND</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li></ul><h3 id="%EF%BC%884%EF%BC%89%E4%BC%98%E5%8C%96%E6%9F%A5%E8%AF%A2" tabindex="-1">（4）优化查询 <a class="header-anchor" href="#（4）优化查询" aria-label="Permalink to &quot;（4）优化查询&quot;">​</a></h3><ul><li><strong>过滤条件</strong>：通过 <code>WHERE</code> 子句过滤不必要的数据，减少查询结果的大小。</li><li><strong>索引优化</strong>：为大表的连接字段（如外键）创建索引，提高查询效率。</li></ul></blockquote><h2 id="%E6%B3%A8%E6%84%8F%E7%90%86%E8%A7%A3ON--%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98" tabindex="-1">注意理解<code>ON</code>--性能问题 <a class="header-anchor" href="#注意理解ON--性能问题" aria-label="Permalink to &quot;注意理解\`ON\`--性能问题&quot;">​</a></h2><blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">on</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span></span></code></pre></div><h2 id="%E6%B3%A8%E6%84%8F" tabindex="-1">注意 <a class="header-anchor" href="#注意" aria-label="Permalink to &quot;注意&quot;">​</a></h2><h3 id="%E5%B0%8F%E8%A1%A8%20%E6%B0%B8%E8%BF%9C%E6%98%AF%20%E5%85%A8%E8%A1%A8%E6%89%AB%E6%8F%8F" tabindex="-1">小表 永远是 <strong>全表扫描</strong> <a class="header-anchor" href="#小表 永远是 全表扫描" aria-label="Permalink to &quot;小表 永远是 **全表扫描**&quot;">​</a></h3><h3 id="%E7%84%B6%E5%90%8E%20%E5%8E%BB%20%E5%A4%A7%E8%A1%A8%E9%87%8C%20%E6%90%9C%E7%B4%A2" tabindex="-1">然后 去 大表里 搜索 <a class="header-anchor" href="#然后 去 大表里 搜索" aria-label="Permalink to &quot;然后 去 大表里 搜索&quot;">​</a></h3><p>对于 <strong>大表</strong> 和 <strong>小表</strong> 的区分，通常是从性能优化的角度来考虑的，尤其是在处理大数据量时。</p><h3 id="%E5%8C%BA%E5%88%86%E5%A4%A7%E8%A1%A8%E5%92%8C%E5%B0%8F%E8%A1%A8%E7%9A%84%E6%84%8F%E4%B9%89" tabindex="-1">区分大表和小表的意义 <a class="header-anchor" href="#区分大表和小表的意义" aria-label="Permalink to &quot;区分大表和小表的意义&quot;">​</a></h3><ol><li><strong>大表</strong>：通常指记录数较多的表。</li><li><strong>小表</strong>：通常指记录数较少的表。</li></ol><p>在连接操作中，SQL 优化器会根据表的大小和索引情况决定连接的执行顺序。合理使用 <code>ON</code> 子句可以减少数据扫描量，提高查询效率。</p></blockquote><h2 id="%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E7%9A%84%E5%85%B3%E9%94%AE%E7%82%B9" tabindex="-1">查询优化的关键点 <a class="header-anchor" href="#查询优化的关键点" aria-label="Permalink to &quot;查询优化的关键点&quot;">​</a></h2><blockquote><h4 id="%EF%BC%881%EF%BC%89%E5%B0%8F%E8%A1%A8%E6%95%B4%E8%A1%A8%E6%89%AB%E6%8F%8F%EF%BC%8C%E5%A4%A7%E8%A1%A8%E7%B4%A2%E5%BC%95%E6%89%AB%E6%8F%8F" tabindex="-1">（1）小表整表扫描，大表索引扫描 <a class="header-anchor" href="#（1）小表整表扫描，大表索引扫描" aria-label="Permalink to &quot;（1）小表整表扫描，大表索引扫描&quot;">​</a></h4><ul><li>在多表连接中，数据库会优先扫描小表，然后根据小表的连接字段去大表中查找匹配的数据。</li><li><h3 id="%E4%BC%98%E5%8C%96%E5%BB%BA%E8%AE%AE%EF%BC%9A%E4%B8%BA%E5%A4%A7%E8%A1%A8%E7%9A%84%E8%BF%9E%E6%8E%A5%E5%AD%97%E6%AE%B5%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95%E3%80%82%20%E5%B0%8F%E8%A1%A8%E5%85%88%E6%9F%A5%2C%20%E7%AC%AC%E4%B8%80%E4%B8%AAfrom%20%E4%B8%BA%E5%B0%8F%E8%A1%A8(%E7%8E%B0%E4%BB%A3mysql%E4%BC%9A%E8%87%AA%E5%8A%A8%E4%BC%98%E5%8C%96%2C%20%E6%97%A0%E9%9C%80%E5%85%B3%E6%B3%A8)" tabindex="-1"><strong>优化建议</strong>：为<strong>大表</strong>的连接字段创建索引。 小表先查, <strong>第一个from 为小表</strong>(现代mysql会自动优化, 无需关注) <a class="header-anchor" href="#优化建议：为大表的连接字段创建索引。 小表先查%2C 第一个from 为小表(现代mysql会自动优化%2C 无需关注)" aria-label="Permalink to &quot;**优化建议**：为**大表**的连接字段创建索引。 小表先查, **第一个from 为小表**(现代mysql会自动优化, 无需关注)&quot;">​</a></h3></li></ul><h4 id="%EF%BC%882%EF%BC%89%E5%87%8F%E5%B0%91%E6%95%B0%E6%8D%AE%E9%87%8F" tabindex="-1">（2）减少数据量 <a class="header-anchor" href="#（2）减少数据量" aria-label="Permalink to &quot;（2）减少数据量&quot;">​</a></h4><ul><li>使用 <code>WHERE</code> 子句过滤数据，减少参与连接的数据量。</li><li>示例：<div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">score</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student a</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INNER JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AND</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li></ul><h4 id="%EF%BC%883%EF%BC%89%E9%81%BF%E5%85%8D%E8%BF%87%E5%A4%9A%E7%9A%84%E8%A1%A8%E8%BF%9E%E6%8E%A5" tabindex="-1">（3）避免过多的表连接 <a class="header-anchor" href="#（3）避免过多的表连接" aria-label="Permalink to &quot;（3）避免过多的表连接&quot;">​</a></h4><ul><li>表连接过多会导致查询效率下降，尽量控制表的拆分数量，遵循范式设计的基本原则。</li></ul></blockquote><h1 id="%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2(%E4%B8%89)" tabindex="-1">连接查询(三) <a class="header-anchor" href="#连接查询(三)" aria-label="Permalink to &quot;连接查询(三)&quot;">​</a></h1><h2 id="%E5%8C%BA%E5%88%86%20%E5%86%85%E8%BF%9E%E6%8E%A5%E5%92%8Cunion" tabindex="-1">区分 内连接和union <a class="header-anchor" href="#区分 内连接和union" aria-label="Permalink to &quot;区分 内连接和union&quot;">​</a></h2><blockquote><h3 id="%E5%86%85%E8%BF%9E%E6%8E%A5%EF%BC%88INNER%20JOIN%EF%BC%89" tabindex="-1"><strong>内连接（INNER JOIN）</strong> <a class="header-anchor" href="#内连接（INNER JOIN）" aria-label="Permalink to &quot;**内连接（INNER JOIN）**&quot;">​</a></h3><ul><li><p><strong>作用</strong>：将两张或多张表按照某些条件（通常是关联字段）进行连接，返回满足条件的匹配记录。</p></li><li><p><strong>特点</strong>：</p><ul><li>数据来自多张表。</li><li>需要明确的连接条件（<code>ON</code> 或 <code>USING</code> 子句）。</li><li>结果只包含匹配的记录，未匹配的记录不会出现在结果中。</li></ul></li><li><p><strong>示例</strong>： 查询学生和他们所选课程的信息：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> students</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">courses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">course_name</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> students</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INNER JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> enrollments </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> students</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enrollments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">student_id</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INNER JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> courses </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> enrollments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">course_id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> courses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li></ul><hr><h3 id="UNION" tabindex="-1"><strong>UNION</strong> <a class="header-anchor" href="#UNION" aria-label="Permalink to &quot;**UNION**&quot;">​</a></h3><ul><li><p><strong>作用</strong>：将两个或多个查询的结果合并为一个结果集。</p></li><li><p><strong>特点</strong>：</p><ul><li>数据来自多个查询的结果集，而不是多张表之间的关联。</li><li>默认去重（使用<code>UNION ALL</code>可以保留重复记录）。</li><li>不需要表之间的关联关系，但<strong>要求每个查询的列数和数据类型一致</strong>。</li></ul></li><li><p><strong>示例</strong>： 合并客户表和员工表的用户信息：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, email</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customers</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UNION</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, email</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> employees;</span></span></code></pre></div></li></ul><hr><h3 id="%E4%B8%BB%E8%A6%81%E5%8C%BA%E5%88%AB" tabindex="-1"><strong>主要区别</strong> <a class="header-anchor" href="#主要区别" aria-label="Permalink to &quot;**主要区别**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>特性</th><th>内连接（INNER JOIN）</th><th>UNION</th></tr></thead><tbody><tr><td><strong>用途</strong></td><td>关联多张表的数据</td><td>合并多个查询的结果</td></tr><tr><td><strong>数据来源</strong></td><td>多张表</td><td>多个查询</td></tr><tr><td><strong>结果集</strong></td><td>满足连接条件的记录</td><td>合并的结果集</td></tr><tr><td><strong>去重</strong></td><td>不涉及去重</td><td>默认去重（<code>UNION ALL</code>不去重）</td></tr><tr><td><strong>关联条件</strong></td><td>需要明确的连接条件</td><td>不需要关联条件</td></tr></tbody></table><hr><h3 id="%E6%80%BB%E7%BB%93-5" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结-5" aria-label="Permalink to &quot;**总结**&quot;">​</a></h3><ul><li><strong>内连接</strong>：用于表与表之间的关联查询，结果是匹配的记录。</li><li><strong>UNION</strong>：用于合并多个查询的结果，结果是并集，默认去重。</li></ul></blockquote><h2 id="%E5%A4%9A%E8%A1%A8%E8%81%94%E5%90%88" tabindex="-1">多表联合 <a class="header-anchor" href="#多表联合" aria-label="Permalink to &quot;多表联合&quot;">​</a></h2><p>利用 exame 的 联合主键, 连接 两个表</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">score</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student a</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INNER JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INNER JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> course b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AND</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;      </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   顺序 不重要</span></span></code></pre></div><h2 id="%E4%BC%98%E5%8C%96%E6%B3%A8%E6%84%8F" tabindex="-1">优化注意 <a class="header-anchor" href="#优化注意" aria-label="Permalink to &quot;优化注意&quot;">​</a></h2><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p></p><p>性能优化的<strong>重点应该放在索引、过滤条件和查询逻辑上</strong>，而<strong>不是表的书写顺序。</strong></p></div><h2 id="%E6%B7%BB%E5%8A%A0%E5%88%86%E7%BB%84" tabindex="-1">添加分组 <a class="header-anchor" href="#添加分组" aria-label="Permalink to &quot;添加分组&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">credit</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame c</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inner join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> course b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">on</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------------+--------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">基础课程     |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">高级课程     |     </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">项目开发     |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">高级课程     |     </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">基础课程     |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">高级课程     |     </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">项目开发     |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">算法课程     |     </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">高级课程     |     </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">项目开发     |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">算法课程     |     </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------------+--------+</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">credit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame c</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inner join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> course b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">on</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">group by</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,;   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 最好加上 聚合函数里 所有的字段  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">credit</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------------+--------+----------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| cid | cname           | credit | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------------+--------+----------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">基础课程     |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |        </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">高级课程     |     </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |        </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">项目开发     |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |        </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">算法课程     |     </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |        </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------------+--------+----------+</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">credit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame c</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inner join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> course b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">on</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">score</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">90</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">group by</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------------+--------+----------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| cid | cname           | credit | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------------+--------+----------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">基础课程     |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |        </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">项目开发     |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |        </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">高级课程     |     </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |        </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">算法课程     |     </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |        </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------------+--------+----------+</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">credit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame c</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inner join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> course b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">on</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">score</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">90</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">group by</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">having</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------------+--------+----------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| cid | cname           | credit | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------------+--------+----------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">高级课程     |     </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |        </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------------+--------+----------+</span></span></code></pre></div><h2 id="%E5%8A%A0%E6%8E%92%E5%BA%8F" tabindex="-1">加排序 <a class="header-anchor" href="#加排序" aria-label="Permalink to &quot;加排序&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">credit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame c</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inner join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> course b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">on</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">score</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">90</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">group by</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">order by</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------------+--------+----------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| cid | cname           | credit | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------------+--------+----------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">基础课程     |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |        </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">高级课程     |     </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |        </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">项目开发     |      </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |        </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">算法课程     |     </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |        </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------------+--------+----------+</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">credit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame c</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inner join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> course b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">on</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">score</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">90</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">group by</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">order by</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="%E9%94%99%E8%AF%AF%E9%97%AE%E9%A2%98-2" tabindex="-1">错误问题 <a class="header-anchor" href="#错误问题-2" aria-label="Permalink to &quot;错误问题&quot;">​</a></h2><p>当在 <code>SELECT</code> 中选择了普通字段（非聚合字段）并同时使用了聚合函数（如 <code>COUNT</code>），<strong>就需要使用 <code>GROUP BY</code></strong>，否则会导致语法错误。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">credit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame c</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inner join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> course b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">on</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 错误的</span></span></code></pre></div><blockquote><p>在SQL中，<code>COUNT(*)</code> <strong>不一定必须搭配 <code>GROUP BY</code></strong>，但它的行为会根据是否使用 <code>GROUP BY</code> 而有所不同：</p><h3 id="1.%20%E6%B2%A1%E6%9C%89%20GROUP%20BY%20%E7%9A%84%E6%83%85%E5%86%B5" tabindex="-1">1. <strong>没有 <code>GROUP BY</code> 的情况</strong> <a class="header-anchor" href="#1. 没有 GROUP BY 的情况" aria-label="Permalink to &quot;1. **没有 \`GROUP BY\` 的情况**&quot;">​</a></h3><ul><li>如果没有 <code>GROUP BY</code>，<code>COUNT(*)</code> 会返回整个结果集中所有行的总数。</li><li>示例：<div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame;</span></span></code></pre></div><ul><li>返回的是 <code>exame</code> 表中所有行的总数。</li></ul></li></ul><hr><h3 id="2.%20%E6%9C%89%20GROUP%20BY%20%E7%9A%84%E6%83%85%E5%86%B5" tabindex="-1">2. <strong>有 <code>GROUP BY</code> 的情况</strong> <a class="header-anchor" href="#2. 有 GROUP BY 的情况" aria-label="Permalink to &quot;2. **有 \`GROUP BY\` 的情况**&quot;">​</a></h3><ul><li>如果使用了 <code>GROUP BY</code>，<code>COUNT(*)</code> 会对每个分组分别统计行数。</li><li>示例：<div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame c</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li>返回的是 <code>exame</code> 表中每个 <code>cid</code> 分组的行数。</li></ul></li></ul><hr><h3 id="3.%20%E4%BD%A0%E7%9A%84%E6%9F%A5%E8%AF%A2%E9%97%AE%E9%A2%98" tabindex="-1">3. <strong>你的查询问题</strong> <a class="header-anchor" href="#3. 你的查询问题" aria-label="Permalink to &quot;3. **你的查询问题**&quot;">​</a></h3><p>在你的查询中：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">credit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame c</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INNER JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> course b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li>这里使用了 <code>GROUP BY c.cid</code>，但查询的字段中包含了 <code>b.cname</code> 和 <code>b.credit</code>，这会导致语法错误。</li><li><strong>原因</strong>：在使用 <code>GROUP BY</code> 时，<code>SELECT</code> 中的非聚合字段（如 <code>b.cname</code> 和 <code>b.credit</code>）必须出现在 <code>GROUP BY</code> 子句中，或者是聚合函数的结果。</li></ul><hr><h3 id="4.%20%E4%BF%AE%E6%AD%A3%E5%90%8E%E7%9A%84%E6%9F%A5%E8%AF%A2" tabindex="-1">4. <strong>修正后的查询</strong> <a class="header-anchor" href="#4. 修正后的查询" aria-label="Permalink to &quot;4. **修正后的查询**&quot;">​</a></h3><p>如果你希望按课程分组统计每门课程的考试人数，可以这样写：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">credit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame c</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INNER JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> course b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GROUP BY</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">credit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li>这里将 <code>b.cid</code>、<code>b.cname</code> 和 <code>b.credit</code> 都加入了 <code>GROUP BY</code>，以确保语法正确。</li></ul><hr><h3 id="5.%20%E6%80%BB%E7%BB%93" tabindex="-1">5. <strong>总结</strong> <a class="header-anchor" href="#5. 总结" aria-label="Permalink to &quot;5. **总结**&quot;">​</a></h3><ul><li><strong><code>COUNT(*)</code> 不一定需要 <code>GROUP BY</code></strong>，但如果你希望按某些字段分组统计，则必须使用 <code>GROUP BY</code>。</li><li>在使用 <code>GROUP BY</code> 时，<code>SELECT</code> 中的非聚合字段必须出现在 <code>GROUP BY</code> 子句中。</li><li><strong>普通字段 + 聚合函数</strong>：需要 <code>GROUP BY</code>。</li><li><strong>只有聚合函数</strong>：不需要 <code>GROUP BY</code>。</li></ul></blockquote><h1 id="%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2(%E5%9B%9B)" tabindex="-1">连接查询(四) <a class="header-anchor" href="#连接查询(四)" aria-label="Permalink to &quot;连接查询(四)&quot;">​</a></h1><h2 id="%E5%86%85%E8%BF%9E%E6%8E%A5%E5%9C%A8%E5%88%86%E9%A1%B5%E6%9F%A5%E8%AF%A2limit%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8C%96%E5%BA%94%E7%94%A8" tabindex="-1">内连接在分页查询limit中的优化应用 <a class="header-anchor" href="#内连接在分页查询limit中的优化应用" aria-label="Permalink to &quot;内连接在分页查询limit中的优化应用&quot;">​</a></h2><h2 id="%E9%97%AE%E9%A2%98%E8%83%8C%E6%99%AF" tabindex="-1">问题背景 <a class="header-anchor" href="#问题背景" aria-label="Permalink to &quot;问题背景&quot;">​</a></h2><ul><li>在大数据量的表中使用 <code>LIMIT m, n</code> 进行分页查询时，<strong>偏移量（m）越大，性能越低</strong>。</li><li>查询的字段越多，偏移的性能开销也会增加。</li><li>如果无法通过 <code>WHERE</code> 条件或索引优化偏移量，直接使用 <code>LIMIT</code> 会导致效率低下。</li></ul><h2 id="%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98-1" tabindex="-1">性能问题 <a class="header-anchor" href="#性能问题-1" aria-label="Permalink to &quot;性能问题&quot;">​</a></h2><ul><li><p><strong>偏移量的影响</strong>：</p><ul><li><code>LIMIT m, n</code> 会先扫描前 <code>m</code> 条记录，然后跳过它们，再返回后续的 <code>n</code> 条记录。</li><li>偏移量越大，扫描的无用数据越多，性能越差。</li></ul></li><li><p><strong>选择字段的影响</strong>：</p><ul><li>查询的字段越多，数据量越大，偏移的性能开销也越高。</li><li><h3 id="%E6%9F%A5%E8%AF%A2%E5%8D%95%E4%B8%AA%E5%AD%97%E6%AE%B5%EF%BC%88%E5%A6%82%E4%B8%BB%E9%94%AE%EF%BC%89%E6%AF%94%E6%9F%A5%E8%AF%A2%E5%A4%9A%E4%B8%AA%E5%AD%97%E6%AE%B5%E6%95%88%E7%8E%87%E6%9B%B4%E9%AB%98%E3%80%82" tabindex="-1"><strong>查询单个字段（如主键）比查询多个字段效率更高。</strong> <a class="header-anchor" href="#查询单个字段（如主键）比查询多个字段效率更高。" aria-label="Permalink to &quot;**查询单个字段（如主键）比查询多个字段效率更高。**&quot;">​</a></h3></li></ul><blockquote><p>以 t_user 为例</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t_user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">limit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1500000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 0.30s</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> email </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t_user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">limit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1500000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 0.09s</span></span></code></pre></div><h3 id="%E5%BD%93%E7%84%B6%20%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%8F%AF%E4%BD%BF%E7%94%A8%20where%20%E4%BC%98%E5%8C%96" tabindex="-1">当然 也可以可使用 where 优化 <a class="header-anchor" href="#当然 也可以可使用 where 优化" aria-label="Permalink to &quot;当然 也可以可使用 where 优化&quot;">​</a></h3></blockquote></li></ul><hr><h2 id="%E6%96%B0%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-%E5%86%85%E8%BF%9E%E6%8E%A5%2B%E4%B8%B4%E6%97%B6%E8%A1%A8" tabindex="-1">新解决方案-<strong>内连接+临时表</strong> <a class="header-anchor" href="#新解决方案-内连接%2B临时表" aria-label="Permalink to &quot;新解决方案-**内连接+临时表**&quot;">​</a></h2><blockquote><p>通过 <strong>内连接</strong> 和 <strong>临时表</strong> 优化分页查询：</p><ol><li><p><strong>步骤</strong>：</p><ul><li><strong>第一步</strong>：先查询主键（或索引字段）生成一个小表，利用其高效性快速定位偏移范围。</li><li><strong>第二步</strong>：将小表与原表进行内连接，查询所需的完整字段。</li></ul></li><li><h3 id="%E7%A4%BA%E4%BE%8B%EF%BC%9A%20%20%20--%20%20%E5%BE%97%E5%88%B0%20%E5%A4%9A%E4%B8%AA%E5%AD%97%E6%AE%B5%E7%9A%84%20%E5%90%8C%E6%97%B6%2C%20%E6%95%88%E7%8E%87%20%E4%B9%9F%E5%A5%BD%E4%BA%86" tabindex="-1"><strong>示例</strong>： -- <strong>得到 多个字段的 同时, 效率 也好了</strong> <a class="header-anchor" href="#示例：   --  得到 多个字段的 同时%2C 效率 也好了" aria-label="Permalink to &quot;**示例**：   --  **得到 多个字段的 同时, 效率 也好了**&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t_user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">limit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1500000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 优化为</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                              </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">passwd</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t_user a</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INNER JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t_user</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    LIMIT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1500000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---- 0.12s</span></span></code></pre></div><ul><li><strong>内层查询</strong>：通过 <code>LIMIT</code> 查询主键 <code>id</code>，生成一个小表（偏移效率高）。</li><li><strong>外层查询</strong>：通过内连接，利用小表的 <code>id</code> 在大表中查询完整字段。</li></ul></li></ol></blockquote><hr><h2 id="%E4%BC%98%E5%8C%96%E6%95%88%E6%9E%9C-explain" tabindex="-1"><strong>优化效果</strong>-explain <a class="header-anchor" href="#优化效果-explain" aria-label="Permalink to &quot;**优化效果**-explain&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| id | select_type | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      | partitions | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   | possible_keys | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     | key_len | ref  | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    | filtered | Extra       |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----+-------------+------------+------------+--------+---------------+---------+---------+------+---------+----------+-------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PRIMARY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">derived2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       | ALL    | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1500010</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PRIMARY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     | a          | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       | eq_ref | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PRIMARY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PRIMARY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |       </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | DERIVED     | t_user     | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PRIMARY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1880672</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> index</span></span></code></pre></div><blockquote><p>解释 上面explain---了解即可,不用深究</p><h3 id="1.%20%E7%AC%AC%E4%B8%80%E8%A1%8C" tabindex="-1"><strong>1. 第一行</strong> <a class="header-anchor" href="#1. 第一行" aria-label="Permalink to &quot;**1. 第一行**&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>字段</strong></th><th><strong>值</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td><code>id</code></td><td><code>1</code></td><td>查询的步骤编号，<code>PRIMARY</code> 表示这是外层查询。</td></tr><tr><td><code>select_type</code></td><td><code>PRIMARY</code></td><td>主查询（外层查询）。</td></tr><tr><td><code>table</code></td><td><code>&lt;derived2&gt;</code></td><td>表示这是一个派生表（子查询的结果作为临时表）。</td></tr><tr><td><code>partitions</code></td><td><code>NULL</code></td><td>没有使用分区表。</td></tr><tr><td><code>type</code></td><td><code>ALL</code></td><td>对派生表执行全表扫描（因为派生表是小表，扫描开销较小）。</td></tr><tr><td><code>possible_keys</code></td><td><code>NULL</code></td><td>没有可用的索引，因为派生表是临时生成的，没有索引。</td></tr><tr><td><code>key</code></td><td><code>NULL</code></td><td>没有使用索引。</td></tr><tr><td><code>key_len</code></td><td><code>NULL</code></td><td>没有索引长度，因为没有使用索引。</td></tr><tr><td><code>ref</code></td><td><code>NULL</code></td><td>没有引用其他表。</td></tr><tr><td><code>rows</code></td><td><code>1500010</code></td><td>预计扫描派生表中的 1,500,010 行记录。</td></tr><tr><td><code>filtered</code></td><td><code>100.00</code></td><td>过滤比例为 100%，表示所有行都被保留。</td></tr><tr><td><code>Extra</code></td><td><code>NULL</code></td><td>没有额外信息。</td></tr></tbody></table><p><strong>总结</strong>：<br> 外层查询从派生表 <code>&lt;derived2&gt;</code> 中扫描所有行（1,500,010 行），这是子查询生成的小表。</p><hr><h3 id="2.%20%E7%AC%AC%E4%BA%8C%E8%A1%8C" tabindex="-1"><strong>2. 第二行</strong> <a class="header-anchor" href="#2. 第二行" aria-label="Permalink to &quot;**2. 第二行**&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>字段</strong></th><th><strong>值</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td><code>id</code></td><td><code>1</code></td><td>查询的步骤编号，与第一行同属外层查询。</td></tr><tr><td><code>select_type</code></td><td><code>PRIMARY</code></td><td>主查询（外层查询）。</td></tr><tr><td><code>table</code></td><td><code>a</code></td><td>表 <code>a</code>，即主表 <code>t_user</code>。</td></tr><tr><td><code>partitions</code></td><td><code>NULL</code></td><td>没有使用分区表。</td></tr><tr><td><code>type</code></td><td><code>eq_ref</code></td><td>使用了等值引用连接（<code>eq_ref</code>），表示通过主键精确匹配。</td></tr><tr><td><code>possible_keys</code></td><td><code>PRIMARY</code></td><td>可能使用的索引是主键索引。</td></tr><tr><td><code>key</code></td><td><code>PRIMARY</code></td><td>实际使用的索引是主键索引。</td></tr><tr><td><code>key_len</code></td><td><code>4</code></td><td>主键索引的长度为 4 字节（通常是 <code>INT</code> 类型）。</td></tr><tr><td><code>ref</code></td><td><code>b.id</code></td><td>使用派生表 <code>b</code> 的 <code>id</code> 字段与主表 <code>a</code> 的主键进行匹配。</td></tr><tr><td><code>rows</code></td><td><code>1</code></td><td>每次匹配只需扫描 1 行（因为主键是唯一的）。</td></tr><tr><td><code>filtered</code></td><td><code>100.00</code></td><td>过滤比例为 100%，表示所有匹配的行都被保留。</td></tr><tr><td><code>Extra</code></td><td><code>NULL</code></td><td>没有额外信息。</td></tr></tbody></table><p><strong>总结</strong>：<br> 外层查询通过主键索引（<code>PRIMARY</code>）将派生表中的 <code>id</code> 与主表 <code>t_user</code> 的主键进行精确匹配，每次只需扫描 1 行。</p><hr><h3 id="3.%20%E7%AC%AC%E4%B8%89%E8%A1%8C" tabindex="-1"><strong>3. 第三行</strong> <a class="header-anchor" href="#3. 第三行" aria-label="Permalink to &quot;**3. 第三行**&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>字段</strong></th><th><strong>值</strong></th><th><strong>解释</strong></th></tr></thead><tbody><tr><td><code>id</code></td><td><code>2</code></td><td>查询的步骤编号，<code>DERIVED</code> 表示这是子查询的执行步骤。</td></tr><tr><td><code>select_type</code></td><td><code>DERIVED</code></td><td>子查询（派生表）。</td></tr><tr><td><code>table</code></td><td><code>t_user</code></td><td>表 <code>t_user</code>，即主表。</td></tr><tr><td><code>partitions</code></td><td><code>NULL</code></td><td>没有使用分区表。</td></tr><tr><td><code>type</code></td><td><code>index</code></td><td>使用了索引扫描（<code>index</code>），表示扫描索引而不是表数据。</td></tr><tr><td><code>possible_keys</code></td><td><code>NULL</code></td><td>没有明确指定的索引，但使用了主键索引。</td></tr><tr><td><code>key</code></td><td><code>PRIMARY</code></td><td>实际使用的索引是主键索引。</td></tr><tr><td><code>key_len</code></td><td><code>4</code></td><td>主键索引的长度为 4 字节（通常是 <code>INT</code> 类型）。</td></tr><tr><td><code>ref</code></td><td><code>NULL</code></td><td>没有引用其他表。</td></tr><tr><td><code>rows</code></td><td><code>1880672</code></td><td>预计扫描 <code>t_user</code> 表中的 1,880,672 行记录（即表的总行数）。</td></tr><tr><td><code>filtered</code></td><td><code>100.00</code></td><td>过滤比例为 100%，表示所有行都被保留。</td></tr><tr><td><code>Extra</code></td><td><code>Using index</code></td><td>表示查询只使用了索引，不需要访问表的实际数据（覆盖索引）。</td></tr></tbody></table><p><strong>总结</strong>：<br> 子查询从 <code>t_user</code> 表中扫描主键索引，生成一个包含 <code>id</code> 的派生表，扫描了 1,880,672 行。</p><hr><h3 id="%E6%95%B4%E4%BD%93%E6%80%BB%E7%BB%93" tabindex="-1"><strong>整体总结</strong> <a class="header-anchor" href="#整体总结" aria-label="Permalink to &quot;**整体总结**&quot;">​</a></h3><ol><li><p><strong>查询逻辑</strong>：</p><ul><li>子查询（<code>DERIVED</code>）从 <code>t_user</code> 表中扫描主键索引，生成一个包含 <code>id</code> 的派生表（小表）。</li><li>外层查询通过内连接，将派生表的 <code>id</code> 与主表的主键进行匹配，查询完整字段。</li></ul></li><li><p><strong>性能分析</strong>：</p><ul><li>子查询使用了主键索引（<code>Using index</code>），效率较高。</li><li>外层查询通过主键索引（<code>eq_ref</code>）进行精确匹配，效率也较高。</li><li>派生表的扫描（<code>ALL</code>）是全表扫描，但由于派生表很小（10 行），开销可以忽略。</li></ul></li><li><p><strong>优化建议</strong>：</p><ul><li>该查询已经充分利用了索引，性能较优，无需进一步优化。</li><li>如果数据量更大，可以考虑进一步优化索引或分区策略。</li></ul></li></ol></blockquote><ul><li><p><strong>小表的优势</strong>：</p><ul><li>内层查询只返回主键字段，数据量小，查询效率高。</li><li>小表的结果作为临时表，与大表进行连接时，主键字段通常有索引，查询效率高。</li></ul></li><li><h3 id="%E6%80%A7%E8%83%BD%E6%8F%90%E5%8D%87%EF%BC%9A" tabindex="-1"><strong>性能提升</strong>： <a class="header-anchor" href="#性能提升：" aria-label="Permalink to &quot;**性能提升**：&quot;">​</a></h3><ul><li><h3 id="%E9%81%BF%E5%85%8D%E7%9B%B4%E6%8E%A5%E5%AF%B9%E5%A4%A7%E8%A1%A8%E8%BF%9B%E8%A1%8C%E5%A4%9A%E5%AD%97%E6%AE%B5%E7%9A%84%E5%81%8F%E7%A7%BB%E6%9F%A5%E8%AF%A2%E3%80%82" tabindex="-1">避免直接对大表进行多字段的偏移查询。 <a class="header-anchor" href="#避免直接对大表进行多字段的偏移查询。" aria-label="Permalink to &quot;避免直接对大表进行多字段的偏移查询。&quot;">​</a></h3></li><li><h3 id="%E5%B0%86%E5%81%8F%E7%A7%BB%E6%9F%A5%E8%AF%A2%E7%9A%84%E5%BC%80%E9%94%80%E9%99%8D%E5%88%B0%E6%9C%80%E4%BD%8E%EF%BC%8C%E5%90%8C%E6%97%B6%E4%BF%9D%E7%95%99%E5%AE%8C%E6%95%B4%E5%AD%97%E6%AE%B5%E7%9A%84%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C%E3%80%82" tabindex="-1">将偏移查询的开销降到最低，同时保留完整字段的查询结果。 <a class="header-anchor" href="#将偏移查询的开销降到最低，同时保留完整字段的查询结果。" aria-label="Permalink to &quot;将偏移查询的开销降到最低，同时保留完整字段的查询结果。&quot;">​</a></h3></li></ul></li></ul><h1 id="%E7%9B%AE%E5%89%8D%20%E4%BC%98%E5%8C%96%E6%80%A7%E8%83%BD%E7%9A%84%E6%89%8B%E6%AE%B5" tabindex="-1">目前 优化性能的手段 <a class="header-anchor" href="#目前 优化性能的手段" aria-label="Permalink to &quot;目前 优化性能的手段&quot;">​</a></h1><ul><li><strong>索引</strong>：快速定位数据。</li><li><strong>WHERE</strong>：减少数据扫描量。</li><li><strong>LIMIT</strong>：限制结果集大小。</li><li><strong>INNER JOIN</strong>：优化多表查询。 + <strong>临时表 可以优化 单表</strong></li><li><strong>ORDER BY / GROUP BY</strong>：结合索引优化排序和分组。</li><li><strong>子查询与表设计</strong>：简化查询逻辑，优化数据结构。</li></ul><h1 id="%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2(%E4%BA%94)" tabindex="-1">连接查询(五) <a class="header-anchor" href="#连接查询(五)" aria-label="Permalink to &quot;连接查询(五)&quot;">​</a></h1><h2 id="%E5%86%85%E8%BF%9E%E6%8E%A5%E4%B8%8E%E5%A4%96%E8%BF%9E%E6%8E%A5%E7%9A%84%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AF%B9%E6%AF%94" tabindex="-1">内连接与外连接的执行原理与对比 <a class="header-anchor" href="#内连接与外连接的执行原理与对比" aria-label="Permalink to &quot;内连接与外连接的执行原理与对比&quot;">​</a></h2><hr><h2 id="%E5%86%85%E8%BF%9E%E6%8E%A5%EF%BC%88INNER%20JOIN%EF%BC%89--%20%E6%98%8E%E7%99%BD%E8%BF%87%E7%A8%8B%E7%BB%86%E8%8A%82-%E9%87%8D%E7%82%B9" tabindex="-1">内连接（INNER JOIN）-- 明白过程细节-<strong>重点</strong> <a class="header-anchor" href="#内连接（INNER JOIN）-- 明白过程细节-重点" aria-label="Permalink to &quot;内连接（INNER JOIN）-- 明白过程细节-**重点**&quot;">​</a></h2><ul><li><p><strong>核心概念</strong>：</p><ul><li>内连接只<strong>返回两张表中满足关联条件</strong>的记录。</li><li>查询结果是两张表<strong>交集部分的数据</strong>。</li></ul></li><li><p><strong>执行过程</strong>：</p><ol><li><h3 id="%E5%8C%BA%E5%88%86%E5%A4%A7%E8%A1%A8%E5%92%8C%E5%B0%8F%E8%A1%A8%EF%BC%9A" tabindex="-1">区分大表和小表： <a class="header-anchor" href="#区分大表和小表：" aria-label="Permalink to &quot;区分大表和小表：&quot;">​</a></h3><ul><li>小表通常是<strong>整表扫描</strong>。</li><li>小表的字段在大表中进行<strong>匹配搜索</strong>。</li></ul></li><li><h3 id="%E5%A6%82%E6%9E%9C%E6%9C%89%20WHERE%20%E6%9D%A1%E4%BB%B6%EF%BC%9A" tabindex="-1">如果有 <code>WHERE</code> 条件： <a class="header-anchor" href="#如果有 WHERE 条件：" aria-label="Permalink to &quot;如果有 \`WHERE\` 条件：&quot;">​</a></h3><ul><li><h3 id="%E4%BC%98%E5%85%88%E5%AF%B9%E8%A1%A8%E8%BF%9B%E8%A1%8C%20WHERE%20%E6%9D%A1%E4%BB%B6%E8%BF%87%E6%BB%A4%EF%BC%8C%E5%87%8F%E5%B0%91%E6%95%B0%E6%8D%AE%E9%87%8F%E3%80%82" tabindex="-1"><strong>优先对表进行 <code>WHERE</code> 条件过滤</strong>，减少数据量。 <a class="header-anchor" href="#优先对表进行 WHERE 条件过滤，减少数据量。" aria-label="Permalink to &quot;**优先对表进行 \`WHERE\` 条件过滤**，减少数据量。&quot;">​</a></h3></li><li><h3 id="%E8%BF%87%E6%BB%A4%E5%90%8E%E7%9A%84%E8%A1%A8%E5%8F%AF%E8%83%BD%E4%BC%9A%E6%94%B9%E5%8F%98%E5%A4%A7%E8%A1%A8%E5%92%8C%E5%B0%8F%E8%A1%A8%E7%9A%84%E8%A7%92%E8%89%B2%E3%80%82" tabindex="-1"><strong>过滤后</strong>的表可能<strong>会改变大表和小表的角色</strong>。 <a class="header-anchor" href="#过滤后的表可能会改变大表和小表的角色。" aria-label="Permalink to &quot;**过滤后**的表可能**会改变大表和小表的角色**。&quot;">​</a></h3></li></ul></li><li><p>使用索引：</p><ul><li><h3 id="%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%20WHERE%20%E6%9D%A1%E4%BB%B6%E7%9A%84%E5%AD%97%E6%AE%B5%E7%9B%B8%E5%85%B3%EF%BC%8C%E4%B8%8E%20SELECT%20%E7%9A%84%E5%AD%97%E6%AE%B5%E6%97%A0%E5%85%B3%E3%80%82" tabindex="-1">索引的使用与 <code>WHERE</code> 条件的字段相关，<strong>与 <code>SELECT</code> 的字段无关</strong>。 <a class="header-anchor" href="#索引的使用与 WHERE 条件的字段相关，与 SELECT 的字段无关。" aria-label="Permalink to &quot;索引的使用与 \`WHERE\` 条件的字段相关，**与 \`SELECT\` 的字段无关**。&quot;">​</a></h3><ul><li>索引主要是为了快速定位数据，而不是为了获取数据</li><li>数据库引擎使用索引来快速找到满足WHERE条件的行</li></ul></li><li><p>大表使用索引效率更高。</p></li></ul></li></ol></li><li><p><strong>注意点</strong>：</p><ul><li><h3 id="WHERE%20%E5%92%8C%20ON%20%E7%9A%84%E8%BF%87%E6%BB%A4%E6%9D%A1%E4%BB%B6%E5%9C%A8%E5%86%85%E8%BF%9E%E6%8E%A5%E4%B8%AD%E6%95%88%E6%9E%9C%E7%9B%B8%E5%90%8C%E3%80%82" tabindex="-1"><code>WHERE</code> 和 <code>ON</code> 的过滤条件在内连接中效果相同。 <a class="header-anchor" href="#WHERE 和 ON 的过滤条件在内连接中效果相同。" aria-label="Permalink to &quot;\`WHERE\` 和 \`ON\` 的过滤条件在内连接中效果相同。&quot;">​</a></h3></li><li>使用 <code>EXPLAIN</code> 可以查看执行计划，分析索引是否被使用。</li></ul></li></ul><hr><h2 id="%E5%A4%96%E8%BF%9E%E6%8E%A5%EF%BC%88LEFT%20JOIN%20%E5%92%8C%20RIGHT%20JOIN%EF%BC%89" tabindex="-1">外连接（LEFT JOIN 和 RIGHT JOIN） <a class="header-anchor" href="#外连接（LEFT JOIN 和 RIGHT JOIN）" aria-label="Permalink to &quot;外连接（LEFT JOIN 和 RIGHT JOIN）&quot;">​</a></h2><ul><li><p><strong>核心概念</strong>：</p><ul><li><strong>左连接（LEFT JOIN）</strong>： <ul><li>返回左表的所有记录，即使右表中没有匹配的记录。</li></ul></li><li><strong>右连接（RIGHT JOIN）</strong>： <ul><li>返回右表的所有记录，即使左表中没有匹配的记录。</li></ul></li></ul></li><li><p><strong>与内连接的区别</strong>：</p><ul><li><h3 id="%E5%86%85%E8%BF%9E%E6%8E%A5%E5%8F%AA%E8%BF%94%E5%9B%9E%E5%8C%B9%E9%85%8D%E7%9A%84%E8%AE%B0%E5%BD%95%EF%BC%8C%E8%80%8C%E5%A4%96%E8%BF%9E%E6%8E%A5%E4%BC%9A%E4%BF%9D%E7%95%99%E4%B8%80%E4%BE%A7%E8%A1%A8%E7%9A%84%E6%89%80%E6%9C%89%E8%AE%B0%E5%BD%95%E3%80%82" tabindex="-1">内连接只返回匹配的记录，而<strong>外连接会保留一侧表的所有记录</strong>。 <a class="header-anchor" href="#内连接只返回匹配的记录，而外连接会保留一侧表的所有记录。" aria-label="Permalink to &quot;内连接只返回匹配的记录，而**外连接会保留一侧表的所有记录**。&quot;">​</a></h3></li><li><h3 id="%E5%A4%96%E8%BF%9E%E6%8E%A5%E7%9A%84%E7%BB%93%E6%9E%9C%E4%B8%AD%EF%BC%8C%E6%9C%AA%E5%8C%B9%E9%85%8D%E7%9A%84%E8%AE%B0%E5%BD%95%E4%BC%9A%E4%BB%A5%20NULL%20%E5%A1%AB%E5%85%85%E3%80%82" tabindex="-1">外连接的结果中，未匹配的记录会以 <code>NULL</code> 填充。 <a class="header-anchor" href="#外连接的结果中，未匹配的记录会以 NULL 填充。" aria-label="Permalink to &quot;外连接的结果中，未匹配的记录会以 \`NULL\` 填充。&quot;">​</a></h3></li></ul></li></ul><h2 id="where%E4%B8%8Eon%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E5%AE%9E%E8%B7%B5" tabindex="-1">where与on性能问题实践 <a class="header-anchor" href="#where与on性能问题实践" aria-label="Permalink to &quot;where与on性能问题实践&quot;">​</a></h2><blockquote><p>在 student 新增一个 学生, 成绩表 将 没有其信息</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">insert into</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,age,sex) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xing huai&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;M&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inner join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">on</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inner join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">on</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inner join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">on</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>在老师的 5.1 版本中, 会显示 <code>using where</code> 但是, 在 高版本, 都会显示 <code>NULL</code>,</p><ul><li>在较新的版本中，优化器可能会更智能地将 <code>WHERE</code> 条件合并到索引查找中，从而减少 <code>EXTRA</code> 列中显示 <code>Using where</code> 的情况。</li></ul></blockquote><hr><h2 id="%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BD%BF%E7%94%A8" tabindex="-1">索引的使用 <a class="header-anchor" href="#索引的使用" aria-label="Permalink to &quot;索引的使用&quot;">​</a></h2><ul><li><p><strong>索引的作用</strong>：</p><ul><li>索引可以显著提高查询效率，尤其是在大表中。</li><li>索引的使用与过滤字段相关，<strong>必须是索引字段才能生效</strong>。</li></ul></li><li><p><strong>联合索引的注意点</strong>：</p><ul><li>联合索引的第一列必须被使用，否则索引无法生效。</li></ul></li></ul><h1 id="%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2(%E5%85%AD)" tabindex="-1">连接查询(六) <a class="header-anchor" href="#连接查询(六)" aria-label="Permalink to &quot;连接查询(六)&quot;">​</a></h1><h2 id="%E5%A4%96%E8%BF%9E%E6%8E%A5%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%EF%BC%9A" tabindex="-1">外连接实现方式： <a class="header-anchor" href="#外连接实现方式：" aria-label="Permalink to &quot;外连接实现方式：&quot;">​</a></h2><p>LEFT/RIGHT OUTER JOIN---------OUTER 一般省略, 无序显示</p><ul><li><p>使用<code>LEFT JOIN</code>或<code>RIGHT JOIN</code>结合<code>WHERE</code>条件判断<code>NULL</code>值。</p></li><li><p>示例：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,b.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">left join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">on</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------+-----+-----+------+------+------------+-------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      | age | sex | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  | cid  | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       | score |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------+-----+-----+------+------+------------+-------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | zhangsan  |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | M   |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2021</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">04</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">09</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">99</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | zhangsan  |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | M   |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2021</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">04</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | zhangsan  |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | M   |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2021</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">04</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | gaoyang   |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | W   |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2021</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">04</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">85</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | chenwei   |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | M   |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2021</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">04</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">09</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">56</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | chenwei   |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | M   |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2021</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">04</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">93</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | chenwei   |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | M   |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2021</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">04</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | linfeng   |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">21</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | W   |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2021</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">04</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">99</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | liuxiang  |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">19</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | W   |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2021</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">04</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">59</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | liuxiang  |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">19</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | W   |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2021</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">04</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">94</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | liuxiang  |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">19</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | W   |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2021</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">04</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">95</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | xing huai |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | M   | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       |  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 对比 内连接</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,b.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inner join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">on</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+----------+-----+-----+-----+-----+------------+-------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     | age | sex | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | cid | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       | score |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+----------+-----+-----+-----+-----+------------+-------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | zhangsan |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | M   |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2021</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">04</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">09</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">99</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | zhangsan |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | M   |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2021</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">04</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | zhangsan |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | M   |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2021</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">04</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | gaoyang  |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | W   |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2021</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">04</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">85</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | chenwei  |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | M   |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2021</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">04</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">09</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">56</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | chenwei  |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | M   |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2021</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">04</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">93</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | chenwei  |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | M   |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2021</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">04</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | linfeng  |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">21</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | W   |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2021</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">04</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">99</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | liuxiang |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">19</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | W   |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2021</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">04</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">59</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | liuxiang |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">19</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | W   |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2021</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">04</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">94</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | liuxiang |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">19</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | W   |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2021</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">04</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">95</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+----------+-----+-----+-----+-----+------------+-------+</span></span></code></pre></div><h3 id="%E4%B8%8A%E8%BF%B0%E6%9F%A5%E8%AF%A2%E5%8F%AF%E4%BB%A5%20%E6%89%BE%E5%87%BA%E6%B2%A1%E6%9C%89%E5%8F%82%E5%8A%A0%E8%80%83%E8%AF%95%E7%9A%84%E5%AD%A6%E7%94%9F%E3%80%82" tabindex="-1">上述查询可以 找出没有参加考试的学生。 <a class="header-anchor" href="#上述查询可以 找出没有参加考试的学生。" aria-label="Permalink to &quot;上述查询可以 找出没有参加考试的学生。&quot;">​</a></h3></li></ul><h2 id="%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E5%88%86%E6%9E%90%EF%BC%9A" tabindex="-1">执行计划分析： <a class="header-anchor" href="#执行计划分析：" aria-label="Permalink to &quot;执行计划分析：&quot;">​</a></h2><ul><li><p>使用<code>EXPLAIN</code>查看查询的执行过程。</p></li><li><h3 id="%E4%B8%8D%E5%8C%BA%E5%88%86%20%E5%A4%A7%E5%B0%8F%E8%A1%A8" tabindex="-1"><strong>不区分 大小表</strong> <a class="header-anchor" href="#不区分 大小表" aria-label="Permalink to &quot;**不区分 大小表**&quot;">​</a></h3></li><li><p>外连接的执行顺序：</p><ul><li><h3 id="%E5%B7%A6%E8%BF%9E%E6%8E%A5%EF%BC%9A%E5%85%88%E6%89%AB%E6%8F%8F%E5%B7%A6%E8%A1%A8%EF%BC%8C%E5%86%8D%E5%8C%B9%E9%85%8D%E5%8F%B3%E8%A1%A8%E3%80%82" tabindex="-1">左连接：先扫描左表，再匹配右表。 <a class="header-anchor" href="#左连接：先扫描左表，再匹配右表。" aria-label="Permalink to &quot;左连接：先扫描左表，再匹配右表。&quot;">​</a></h3></li><li><h3 id="%E5%8F%B3%E8%BF%9E%E6%8E%A5%EF%BC%9A%E5%85%88%E6%89%AB%E6%8F%8F%E5%8F%B3%E8%A1%A8%EF%BC%8C%E5%86%8D%E5%8C%B9%E9%85%8D%E5%B7%A6%E8%A1%A8%E3%80%82" tabindex="-1">右连接：先扫描右表，再匹配左表。 <a class="header-anchor" href="#右连接：先扫描右表，再匹配左表。" aria-label="Permalink to &quot;右连接：先扫描右表，再匹配左表。&quot;">​</a></h3></li></ul></li><li><p>左右表的区分取决于<code>LEFT JOIN</code>或<code>RIGHT JOIN</code>的语法位置。</p></li></ul><h2 id="%E5%86%85%E8%BF%9E%E6%8E%A5%E4%B8%8E%E5%A4%96%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%AF%B9%E6%AF%94" tabindex="-1">内连接与外连接的对比 <a class="header-anchor" href="#内连接与外连接的对比" aria-label="Permalink to &quot;内连接与外连接的对比&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>内连接（INNER JOIN）</th><th>外连接（LEFT JOIN / RIGHT JOIN）</th></tr></thead><tbody><tr><td><strong>结果集</strong></td><td>只返回匹配的记录</td><td>返回匹配记录，并保留一侧表的所有记录</td></tr><tr><td><strong>未匹配记录</strong></td><td>不包含</td><td>以 <code>NULL</code> 填充未匹配记录</td></tr><tr><td><strong>应用场景</strong></td><td>查询两表关联数据</td><td>查询一表的完整数据，并补充关联信息</td></tr><tr><td><strong>性能</strong></td><td>通常更快</td><td>可能稍慢，因为需要保留未匹配记录</td></tr></tbody></table><h2 id="%E4%B8%8E%E5%AD%90%E6%9F%A5%E8%AF%A2%E7%9A%84%E5%AF%B9%E6%AF%94%EF%BC%9A" tabindex="-1">与子查询的对比： <a class="header-anchor" href="#与子查询的对比：" aria-label="Permalink to &quot;与子查询的对比：&quot;">​</a></h2><ul><li><p>子查询（如<code>NOT IN</code>）也可以实现类似功能，但可能会有性能问题：</p><ul><li><p><code>NOT IN</code><strong>通常</strong>无法利用索引，效率较低。</p></li><li><h3 id="%E5%AD%90%E6%9F%A5%E8%AF%A2%E5%8F%AF%E8%83%BD%E4%BC%9A%E7%94%9F%E6%88%90%E4%B8%AD%E9%97%B4%E8%A1%A8%EF%BC%8C%E5%A2%9E%E5%8A%A0%E5%BC%80%E9%94%80%E3%80%82" tabindex="-1">子查询可能<strong>会生成中间表</strong>，增加开销。 <a class="header-anchor" href="#子查询可能会生成中间表，增加开销。" aria-label="Permalink to &quot;子查询可能**会生成中间表**，增加开销。&quot;">​</a></h3></li></ul></li><li><p>外连接通常效率更高，推荐使用。</p></li></ul><h2 id="%E5%85%B3%E4%BA%8Enot%20in%E7%A4%BA%E4%BE%8B" tabindex="-1">关于not in示例 <a class="header-anchor" href="#关于not in示例" aria-label="Permalink to &quot;关于not in示例&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select distinct</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame);</span></span></code></pre></div><p><code>select distinct uid from exame</code> ===&gt; 会产生中间表 存储结果 供外面的 sql来查询</p><p>not in 对 索引命中率不高 ===&gt; <strong>但是 select 后面字段, 也影响 是否用到索引</strong>--细节太多,不深究</p><h2 id="%E5%85%B3%E4%BA%8E%E5%AD%90%E6%9F%A5%E8%AF%A2%E8%83%BD%E5%90%A6%E7%94%A8%E5%88%B0%E7%B4%A2%E5%BC%95%3F-%E7%B4%A2%E5%BC%95%E5%91%BD%E4%B8%AD%E5%9B%B0%E9%9A%BE" tabindex="-1">关于子查询能否用到索引?-索引命中困难 <a class="header-anchor" href="#关于子查询能否用到索引%3F-索引命中困难" aria-label="Permalink to &quot;关于子查询能否用到索引?-索引命中困难&quot;">​</a></h2><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p></p><h3 id="%E9%9D%9E%E5%B8%B8%20%E9%9A%BE%E4%BB%A5%E7%A1%AE%E5%AE%9A!!%E4%B8%8D%E6%B7%B1%E7%A9%B6" tabindex="-1"><strong>非常 难以确定!!不深究</strong> <a class="header-anchor" href="#非常 难以确定!!不深究" aria-label="Permalink to &quot;**非常 难以确定!!不深究**&quot;">​</a></h3></div><blockquote><p>在 MySQL 中，<code>NOT IN</code> 通常无法利用索引的原因主要与其工作原理有关，但在某些特定情况下，<code>NOT IN</code> 也可以利用索引。</p><h3 id="1.%20NOT%20IN%20%E9%80%9A%E5%B8%B8%E6%97%A0%E6%B3%95%E5%88%A9%E7%94%A8%E7%B4%A2%E5%BC%95%E7%9A%84%E5%8E%9F%E5%9B%A0" tabindex="-1">1. <strong><code>NOT IN</code> 通常无法利用索引的原因</strong> <a class="header-anchor" href="#1. NOT IN 通常无法利用索引的原因" aria-label="Permalink to &quot;1. **\`NOT IN\` 通常无法利用索引的原因**&quot;">​</a></h3><ul><li><strong>全表扫描</strong>：<code>NOT IN</code> 的逻辑是检查某个值是否不在一个列表中。为了确保结果的准确性，MySQL 通常需要扫描整个表来验证每个值是否不在列表中。</li><li><strong><code>NULL</code> 的影响</strong>：如果子查询返回的结果中包含 <code>NULL</code> 值，<code>NOT IN</code> 的行为会变得复杂，因为任何与 <code>NULL</code> 相关的比较都会返回 <code>UNKNOWN</code>。为了处理这种情况，MySQL 可能会放弃使用索引，改为全表扫描。</li><li><strong>优化器的限制</strong>：MySQL 的查询优化器在处理 <code>NOT IN</code> 时，可能无法有效地将其转换为可以利用索引的操作。</li></ul><h3 id="2.%20NOT%20IN%20%E5%8F%AF%E4%BB%A5%E5%88%A9%E7%94%A8%E7%B4%A2%E5%BC%95%E7%9A%84%E6%83%85%E5%86%B5" tabindex="-1">2. <strong><code>NOT IN</code> 可以利用索引的情况</strong> <a class="header-anchor" href="#2. NOT IN 可以利用索引的情况" aria-label="Permalink to &quot;2. **\`NOT IN\` 可以利用索引的情况**&quot;">​</a></h3><ul><li><p><strong>子查询结果不包含 <code>NULL</code></strong>：如果可以确保子查询的结果集中没有 <code>NULL</code> 值，<code>NOT IN</code> 有可能利用索引。例如：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> UID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> IN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> UID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> UID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> IS NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>在这种情况下，<code>UID IS NOT NULL</code> 确保了子查询结果中没有 <code>NULL</code>，因此 MySQL 可能会使用索引。</p></li><li><p><strong>静态列表</strong>：如果 <code>NOT IN</code> 的比较对象是一个静态列表，而不是子查询，MySQL 可以更高效地处理。例如：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> UID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> IN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>对于静态列表，MySQL 可以直接利用索引进行优化。</p></li></ul><h3 id="3.%20%E6%9B%BF%E4%BB%A3%E6%96%B9%E6%A1%88" tabindex="-1">3. <strong>替代方案</strong> <a class="header-anchor" href="#3. 替代方案" aria-label="Permalink to &quot;3. **替代方案**&quot;">​</a></h3><p>为了提高查询性能，通常建议使用以下替代方案：</p><ul><li><p><strong><code>LEFT JOIN</code> + <code>IS NULL</code></strong>：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student a</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LEFT JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exam b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UID</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> IS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>这种方式通常比 <code>NOT IN</code> 更高效，因为它可以更好地利用索引。</p></li><li><p><strong><code>NOT EXISTS</code></strong>：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student a</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> EXISTS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exam b </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    WHERE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UID</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>NOT EXISTS</code> 通常比 <code>NOT IN</code> 更高效，尤其是在子查询中可能包含 <code>NULL</code> 的情况下。</p></li></ul><h3 id="4.%20%E6%80%BB%E7%BB%93" tabindex="-1">4. <strong>总结</strong> <a class="header-anchor" href="#4. 总结" aria-label="Permalink to &quot;4. **总结**&quot;">​</a></h3><ul><li><code>NOT IN</code> 通常无法利用索引，尤其是当子查询结果中可能包含 <code>NULL</code> 时。</li><li>如果可以确保子查询结果中没有 <code>NULL</code>，或者使用静态列表，<code>NOT IN</code> 有可能利用索引。</li><li>推荐使用 <code>LEFT JOIN</code> 或 <code>NOT EXISTS</code> 替代 <code>NOT IN</code>，以提高查询性能并避免潜在问题。</li></ul></blockquote><h2 id="%E4%BD%BF%E7%94%A8%E5%A4%96%E8%BF%9E%E6%8E%A5%E6%9B%BF%E4%BB%A3%E5%AD%90%E6%9F%A5%E8%AF%A2%2C%E4%BC%98%E5%8C%96-%E9%87%8D%E7%82%B9" tabindex="-1">使用外连接替代子查询,优化-<strong>重点</strong> <a class="header-anchor" href="#使用外连接替代子查询%2C优化-重点" aria-label="Permalink to &quot;使用外连接替代子查询,优化-**重点**&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select distinct</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame);  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------+-----+-----+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      | age | sex |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------+-----+-----+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | xing huai |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | M   |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------+-----+-----+</span></span></code></pre></div><ul><li><h3 id="%E5%AF%B9%E6%AF%94" tabindex="-1"><strong>对比</strong> <a class="header-anchor" href="#对比" aria-label="Permalink to &quot;**对比**&quot;">​</a></h3></li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">left join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">on</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> is</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------+-----+-----+------+------+------+-------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      | age | sex | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  | cid  | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | score |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------+-----+-----+------+------+------+-------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | xing huai |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | M   | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------+-----+-----+------+------+------+-------+</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| id | select_type | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | partitions | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | possible_keys | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  | key_len | ref  | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | filtered | Extra                                                  |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SIMPLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      | a     | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       | ALL  | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                   |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SIMPLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      | b     | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       | ALL  | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PRIMARY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Not</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> exists</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> join</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">hash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+--------------------------------------------------------+</span></span></code></pre></div><ul><li><h3 id="select%E5%AF%B9%E6%AF%94----%E5%BD%B1%E5%93%8D%20%E6%9F%A5%E8%AF%A2%E6%95%88%E7%8E%87%2C%20%E7%9C%8Btype" tabindex="-1"><strong>select对比</strong>----影响 查询效率, 看type <a class="header-anchor" href="#select对比----影响 查询效率%2C 看type" aria-label="Permalink to &quot;**select对比**----影响 查询效率, 看type&quot;">​</a></h3></li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">left join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">on</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> is</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> null</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------+-----+-----+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      | age | sex |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------+-----+-----+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | xing huai |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | M   |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------+-----+-----+</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----+-------------+-------+------------+------+---------------+---------+---------+------------+------+----------+--------------------------------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| id | select_type | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | partitions | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | possible_keys | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     | key_len | ref        | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | filtered | Extra                                |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----+-------------+-------+------------+------+---------------+---------+---------+------------+------+----------+--------------------------------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SIMPLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      | a     | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       | ALL  | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                 |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SIMPLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      | b     | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       | ref  | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PRIMARY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">PRIMARY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Not</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> exists</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----+-------------+-------+------------+------+---------------+---------+---------+------------+------+----------+--------------------------------------+</span></span></code></pre></div><h1 id="%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2(%E4%B8%83)" tabindex="-1">连接查询(七) <a class="header-anchor" href="#连接查询(七)" aria-label="Permalink to &quot;连接查询(七)&quot;">​</a></h1><h2 id="%E5%86%85%E8%BF%9E%E6%8E%A5%E4%B8%8E%E5%A4%96%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%8C%BA%E5%88%AB" tabindex="-1">内连接与外连接的区别 <a class="header-anchor" href="#内连接与外连接的区别" aria-label="Permalink to &quot;内连接与外连接的区别&quot;">​</a></h2><ul><li><strong>内连接（Inner Join）</strong>： <ul><li>只返回两张表中匹配的数据（交集）。</li><li>过滤条件写在 <code>ON</code> 或 <code>WHERE</code> 后效果相同，最终都会被 MySQL 优化器转化为 <code>WHERE</code> 过滤。--5.1版本</li></ul></li><li><strong>外连接（Outer Join）</strong>： <ul><li>包括左连接（Left Join）和右连接（Right Join）。</li><li>左连接：以左表为主，显示左表的所有数据，右表中没有匹配的数据则显示 <code>NULL</code>。</li><li>右连接：以右表为主，显示右表的所有数据，左表中没有匹配的数据则显示 <code>NULL</code>。</li></ul></li></ul><h2 id="%E5%A4%96%E8%BF%9E%E6%8E%A5%E4%B8%AD%E8%BF%87%E6%BB%A4%E6%9D%A1%E4%BB%B6%E7%9A%84%E4%BD%8D%E7%BD%AE" tabindex="-1">外连接中过滤条件的位置 <a class="header-anchor" href="#外连接中过滤条件的位置" aria-label="Permalink to &quot;外连接中过滤条件的位置&quot;">​</a></h2><ul><li><p><strong><code>ON</code> 后的条件</strong>：</p><ul><li>用于指定连接条件和过滤条件。</li><li>在外连接中，<code>ON</code> 后的条件会影响连接的结果集，决定哪些数据会被保留。</li></ul></li><li><p><strong><code>WHERE</code> 后的条件</strong>：</p><ul><li>用于对连接后的结果集进行过滤。</li><li>在外连接中，如果将过滤条件写在 <code>WHERE</code> 后，会导致外连接的结果被进一步过滤，可能使外连接的行为变成内连接。</li></ul></li></ul><h2 id="%E6%9C%AC%E8%8A%82%E7%A4%BA%E4%BE%8B" tabindex="-1">本节示例 <a class="header-anchor" href="#本节示例" aria-label="Permalink to &quot;本节示例&quot;">​</a></h2><p>之前是 获取 没有参加 考试的 人</p><ul><li><p><strong>现在需求</strong>：查找没有参加课程号为 3 的考试的学生信息。</p></li><li><p><strong>写法思考</strong>：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">内连接 找 参加了 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 的 学生</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inner join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">on</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>外连接 找 没有参加的学生信息</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">left join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">on</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> IS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 错的</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">left join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">on</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 和内联结果一样, 并没有显示全部的 a 表</span></span></code></pre></div><ul><li>显然 这两种都是 有问题的, 为什么?</li></ul></li></ul><h2 id="%E5%A4%96%E8%BF%9E%E6%8E%A5%E4%B8%AD%E6%9D%A1%E4%BB%B6%E4%BD%8D%E7%BD%AE%E7%9A%84%E5%BD%B1%E5%93%8D-%E9%87%8D%E7%82%B9" tabindex="-1">外连接中<strong>条件位置</strong>的影响-<strong>重点</strong> <a class="header-anchor" href="#外连接中条件位置的影响-重点" aria-label="Permalink to &quot;外连接中**条件位置**的影响-**重点**&quot;">​</a></h2><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p></p><h3 id="%E5%A4%96%E8%BF%9E%E6%8E%A5%20%E7%9A%84%20where%20%E5%92%8C%20on%20%E6%98%AF%E6%9C%89%E5%8C%BA%E5%88%AB%E7%9A%84" tabindex="-1"><strong>外连接 的 where 和 on 是有区别的</strong> <a class="header-anchor" href="#外连接 的 where 和 on 是有区别的" aria-label="Permalink to &quot;**外连接 的 where 和 on 是有区别的**&quot;">​</a></h3></div><ul><li><h3 id="%E8%BF%87%E6%BB%A4%E6%9D%A1%E4%BB%B6%E5%86%99%E5%9C%A8%20WHERE%20%E5%90%8E%EF%BC%9A" tabindex="-1"><strong>过滤条件写在 <code>WHERE</code> 后</strong>： <a class="header-anchor" href="#过滤条件写在 WHERE 后：" aria-label="Permalink to &quot;**过滤条件写在 \`WHERE\` 后**：&quot;">​</a></h3><ul><li>如果在外连接中将过滤条件写在 <code>WHERE</code> 后，<strong>外连接的结果会被过滤，可能导致结果与内连接一致</strong>。</li><li>示例：<div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student a</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LEFT JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exam b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UID</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li>结果：只返回匹配 <code>b.cid = 3</code> 的数据，外连接的特性被破坏，结果与内连接一致。</li></ul></li></ul></li><li><h3 id="%E8%BF%87%E6%BB%A4%E6%9D%A1%E4%BB%B6%E5%86%99%E5%9C%A8%20ON%20%E5%90%8E%EF%BC%9A" tabindex="-1"><strong>过滤条件写在 <code>ON</code> 后</strong>： <a class="header-anchor" href="#过滤条件写在 ON 后：" aria-label="Permalink to &quot;**过滤条件写在 \`ON\` 后**：&quot;">​</a></h3><ul><li>如果将过滤条件写在 <code>ON</code> 后，<strong>外连接的特性得以保留</strong>。</li><li>示例：<div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student a</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LEFT JOIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exam b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AND</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li>结果：左表的所有数据都会保留，右表中不匹配 <code>b.cid = 3</code> 的数据会显示为 <code>NULL</code>。</li></ul></li></ul></li></ul><h2 id="%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E5%88%86%E6%9E%90%EF%BC%88EXPLAIN)" tabindex="-1">执行计划分析（EXPLAIN) <a class="header-anchor" href="#执行计划分析（EXPLAIN)" aria-label="Permalink to &quot;执行计划分析（EXPLAIN)&quot;">​</a></h2><ul><li><h3 id="%E8%BF%87%E6%BB%A4%E6%9D%A1%E4%BB%B6%E5%9C%A8%20WHERE%20%E5%90%8E%EF%BC%9A" tabindex="-1"><strong>过滤条件在 <code>WHERE</code> 后</strong>： <a class="header-anchor" href="#过滤条件在 WHERE 后：" aria-label="Permalink to &quot;**过滤条件在 \`WHERE\` 后**：&quot;">​</a></h3><ul><li><p>MySQL 会先对右表进行过滤，然后再进行连接，结果与内连接一致。</p></li><li><h3 id="type%20%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%83%BD%E5%B0%86%E6%98%AF%20index%2C%20%E8%80%8C%E4%B8%8D%E6%98%AF%20all" tabindex="-1">type 第一个都将是 index, 而不是 all <a class="header-anchor" href="#type 第一个都将是 index%2C 而不是 all" aria-label="Permalink to &quot;type 第一个都将是 index, 而不是 all&quot;">​</a></h3></li></ul></li><li><h3 id="%E8%BF%87%E6%BB%A4%E6%9D%A1%E4%BB%B6%E5%9C%A8%20ON%20%E5%90%8E%EF%BC%9A" tabindex="-1"><strong>过滤条件在 <code>ON</code> 后</strong>： <a class="header-anchor" href="#过滤条件在 ON 后：" aria-label="Permalink to &quot;**过滤条件在 \`ON\` 后**：&quot;">​</a></h3><ul><li><p>MySQL 会先扫描左表（整表扫描），然后根据 <code>ON</code> 条件进行连接，保留左表的所有数据。</p></li><li><h3 id="type%20%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%98%AF%20all" tabindex="-1">type 第一个是 all <a class="header-anchor" href="#type 第一个是 all" aria-label="Permalink to &quot;type 第一个是 all&quot;">​</a></h3></li></ul></li></ul><h2 id="%E6%AD%A3%E7%A1%AE%E5%86%99%E6%B3%95" tabindex="-1">正确写法 <a class="header-anchor" href="#正确写法" aria-label="Permalink to &quot;正确写法&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,b.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">left join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">on</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 将拿到 正确的 外连接表</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------+-----+-----+------+------+------------+-------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      | age | sex | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  | cid  | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       | score |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------+-----+-----+------+------+------------+-------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | zhangsan  |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | M   |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2021</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">04</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | gaoyang   |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | W   | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       |  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | chenwei   |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | M   |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2021</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">04</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | linfeng   |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">21</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | W   | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       |  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | liuxiang  |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">19</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | W   |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2021</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">04</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">94</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | xing huai |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | M   | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       |  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------+-----+-----+------+------+------------+-------+</span></span></code></pre></div><p>在此基础上, 再进行过滤</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,b.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">left join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">on</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> is</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 正确</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------+-----+-----+------+------+------+-------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      | age | sex | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  | cid  | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | score |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------+-----+-----+------+------+------+-------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | gaoyang   |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | W   | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | linfeng   |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">21</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | W   | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | xing huai |  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | M   | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-----+-----------+-----+-----+------+------+------+-------+</span></span></code></pre></div><h2 id="%E6%9C%AC%E8%8A%82%E9%87%8D%E7%82%B9" tabindex="-1">本节重点 <a class="header-anchor" href="#本节重点" aria-label="Permalink to &quot;本节重点&quot;">​</a></h2><p>区分 下面 的命令</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">left join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">on</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> IS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 错的</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">left join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">on</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 和内联结果一样, 并没有显示全部的 a 表</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,b.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">left join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exame b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">on</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">uid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cid</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> is</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><p>第一条命令: 会在 <code>select a.* from student a left join exame b on a.uid=b.uid</code> 的结果里, 查找 <code>b.cid=3 and b.cid IS NULL</code>的 结果 并显示-----&gt; 显然, 后面的 逻辑有误</p><p>第二条命令: 在 <code>select a.* from student a left join exame b on a.uid=b.uid</code> 的结果里, 查找 <code>b.cid=3</code>的结果 并显示 , 这个意思 是 找到 参与 3 这门考试的, 和内联意思一样</p><p>第三条命令: 在 <code>select a.*,b.* from student a left join exame b on a.uid=b.uid and b.cid=3 </code> 的结果里, 找 <code>b.cid is null</code>的 结果 并显示, 这就找到了 没有参加 考试 3的 学生信息</p></div><h2 id="%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-1" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项-1" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><ul><li>在外连接中，<strong>过滤条件的位置非常重要</strong>： <ul><li><h3 id="ON%20%E5%90%8E%EF%BC%9A%E7%94%A8%E4%BA%8E%E8%BF%9E%E6%8E%A5%E6%97%B6%E7%9A%84%E6%9D%A1%E4%BB%B6%E8%BF%87%E6%BB%A4%E3%80%82" tabindex="-1"><code>ON</code> 后：用于连接时的条件过滤。 <a class="header-anchor" href="#ON 后：用于连接时的条件过滤。" aria-label="Permalink to &quot;\`ON\` 后：用于连接时的条件过滤。&quot;">​</a></h3></li><li><h3 id="WHERE%20%E5%90%8E%EF%BC%9A%E7%94%A8%E4%BA%8E%E6%9C%80%E7%BB%88%E7%BB%93%E6%9E%9C%E7%9A%84%E8%BF%87%E6%BB%A4%E3%80%82" tabindex="-1"><code>WHERE</code> 后：用于最终结果的过滤。 <a class="header-anchor" href="#WHERE 后：用于最终结果的过滤。" aria-label="Permalink to &quot;\`WHERE\` 后：用于最终结果的过滤。&quot;">​</a></h3></li></ul></li><li>如果过滤条件写错位置，<strong>可能导致外连接的行为变成内连接</strong>。</li></ul><hr><h2 id="%E5%BB%BA%E8%AE%AE" tabindex="-1">建议 <a class="header-anchor" href="#建议" aria-label="Permalink to &quot;建议&quot;">​</a></h2><ul><li><p><strong>外连接的写法</strong>：</p><ul><li><code>ON</code> 后只写连接条件和过滤条件。</li><li><code>WHERE</code> 后只写 <code>NULL</code> 判断，用于筛选不存在的数据。</li></ul></li><li><p><strong>多练习</strong>：</p><ul><li>通过实践和 <code>EXPLAIN</code> 分析执行计划，理解查询的执行过程。</li></ul></li><li><p><strong>应用场景</strong>：</p><ul><li><h3 id="%E5%A4%96%E8%BF%9E%E6%8E%A5%E5%B8%B8%E7%94%A8%E4%BA%8E%E6%9F%A5%E6%89%BE%E4%B8%80%E5%BC%A0%E8%A1%A8%E4%B8%AD%E6%9C%89%E8%80%8C%E5%8F%A6%E4%B8%80%E5%BC%A0%E8%A1%A8%E4%B8%AD%E6%B2%A1%E6%9C%89%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%8C" tabindex="-1"><strong>外连接常用于查找一张表中有而另一张表中没有的数据</strong>， <a class="header-anchor" href="#外连接常用于查找一张表中有而另一张表中没有的数据，" aria-label="Permalink to &quot;**外连接常用于查找一张表中有而另一张表中没有的数据**，&quot;">​</a></h3></li><li><p>例如：</p><ul><li>查找没有参加某门考试的学生。</li><li>查找未出现在订单中的商品。</li></ul></li></ul></li></ul><h1 id="%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E-pdf" tabindex="-1">存储引擎-pdf <a class="header-anchor" href="#存储引擎-pdf" aria-label="Permalink to &quot;存储引擎-pdf&quot;">​</a></h1><p><img src="`+u+`" alt="image-20250512213543252"></p><h2 id="%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E7%9A%84%E6%A6%82%E5%BF%B5" tabindex="-1">存储引擎的概念 <a class="header-anchor" href="#存储引擎的概念" aria-label="Permalink to &quot;存储引擎的概念&quot;">​</a></h2><ul><li>存储引擎决定了<strong>表的结构、数据和索引</strong>的<strong>存储方式</strong>。</li><li>MySQL的特点之一是<strong>支持插件式存储引擎</strong>，可以更换不同的存储引擎。</li></ul><h2 id="%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E7%9A%84%E4%BD%9C%E7%94%A8" tabindex="-1">存储引擎的作用 <a class="header-anchor" href="#存储引擎的作用" aria-label="Permalink to &quot;存储引擎的作用&quot;">​</a></h2><ul><li>存储表的结构（字段、类型、约束等）。</li><li>存储表的数据（记录）。</li><li>存储表的索引（加速查询）。</li></ul><h2 id="%E5%B8%B8%E8%A7%81%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E" tabindex="-1">常见存储引擎 <a class="header-anchor" href="#常见存储引擎" aria-label="Permalink to &quot;常见存储引擎&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show engines;   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 有详细信息</span></span></code></pre></div><blockquote><ul><li><strong>InnoDB</strong>（默认引擎）： <ul><li>数据和索引存储在同一个文件中（<code>.ibd</code>）。</li><li>支持事务（ACID）。</li><li>支持行级锁（Row Level Locking），并发性能更好。</li><li>支持外键。</li></ul></li><li><strong>MyISAM</strong>： <ul><li>数据和索引分开存储（<code>.MYD</code>存数据，<code>.MYI</code>存索引）。</li><li>不支持事务。</li><li>使用表级锁（Table Level Locking），并发性能较差。</li><li>不支持外键。</li></ul></li></ul></blockquote><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p></p><p>注意: **8.0版本, InnoDB引擎 ** 已经没有 frm 只有idb</p><p><strong>新建数据库 在 /var/lib/mysql中</strong> 的 <strong>&lt;数据库名&gt;/&lt;表名&gt;.idb</strong> 里面</p></div><ul><li>表的元数据（如表结构定义）不再存储在 <code>.frm</code> 文件中，而是存储在 <strong>数据字典</strong> 中。</li><li>数据字典是 InnoDB 的一部分，存储在系统表空间中（<code>ibdata1</code> 文件）。</li></ul><h2 id="%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E7%9A%84%E5%8C%BA%E5%88%AB" tabindex="-1">存储引擎的区别 <a class="header-anchor" href="#存储引擎的区别" aria-label="Permalink to &quot;存储引擎的区别&quot;">​</a></h2><blockquote><ul><li><h3 id="%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F%EF%BC%9A" tabindex="-1"><strong>数据存储方式</strong>： <a class="header-anchor" href="#数据存储方式：" aria-label="Permalink to &quot;**数据存储方式**：&quot;">​</a></h3><ul><li><h4 id="InnoDB%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%92%8C%E7%B4%A2%E5%BC%95%E5%AD%98%E5%82%A8%E5%9C%A8%E4%B8%80%E8%B5%B7%E3%80%82----%20.idb" tabindex="-1">InnoDB：<strong>数据和索引存储在一起。</strong>---- .idb <a class="header-anchor" href="#InnoDB：数据和索引存储在一起。---- .idb" aria-label="Permalink to &quot;InnoDB：**数据和索引存储在一起。**---- .idb&quot;">​</a></h4><ul><li><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">course</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ibd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  exame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ibd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ibd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  t_user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ibd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ibd</span></span></code></pre></div><ul><li><s><code>.frm</code>：表结构。</s></li><li><code>.ibd</code>：表数据和索引。</li></ul></li></ul></li><li><p>MyISAM：数据和索引<strong>分开存储</strong>。</p><ul><li><p>如果没有, 建立一个, 看看</p></li><li><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MYD</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MYI</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  student_568</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sdi</span></span></code></pre></div><ul><li><s><code>.frm</code>：表结构。</s></li><li><code>.MYD</code>：表数据。D</li><li><code>.MYI</code>：表索引。I</li></ul></li></ul></li></ul></li><li><blockquote><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3><ul><li><h3 id="%E9%94%81%E6%9C%BA%E5%88%B6%EF%BC%9A--%E5%A4%9A%E7%BA%BF%E7%A8%8B%20%E6%9F%A5%E6%97%B6%20%20---%20pdf" tabindex="-1"><strong>锁机制</strong>：--多线程 查时 --- pdf <a class="header-anchor" href="#锁机制：--多线程 查时  --- pdf" aria-label="Permalink to &quot;**锁机制**：--多线程 查时  --- pdf&quot;">​</a></h3><ul><li>InnoDB：行级锁，支持高并发。</li><li>MyISAM：<strong>表级锁</strong>，锁粒度大，性能较低。</li></ul></li><li><h3 id="%E4%BA%8B%E5%8A%A1%E6%94%AF%E6%8C%81%EF%BC%9A" tabindex="-1"><strong>事务支持</strong>： <a class="header-anchor" href="#事务支持：" aria-label="Permalink to &quot;**事务支持**：&quot;">​</a></h3><ul><li>InnoDB：支持事务。</li><li>MyISAM：不支持事务。</li></ul></li><li><h3 id="%E5%A4%96%E9%94%AE%E6%94%AF%E6%8C%81%EF%BC%9A" tabindex="-1"><strong>外键支持</strong>： <a class="header-anchor" href="#外键支持：" aria-label="Permalink to &quot;**外键支持**：&quot;">​</a></h3><ul><li>InnoDB：支持外键。</li><li>MyISAM：不支持外键。</li></ul></li></ul></blockquote></li></ul></blockquote><h2 id="%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98" tabindex="-1">面试常见问题 <a class="header-anchor" href="#面试常见问题" aria-label="Permalink to &quot;面试常见问题&quot;">​</a></h2><blockquote><ul><li><h3 id="%E5%B8%B8%E8%A7%81%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%3F--%20%E5%B0%B1%E8%AF%B4%20%E9%82%A3%E4%B8%A4" tabindex="-1">常见存储引擎?-- 就说 那两 <a class="header-anchor" href="#常见存储引擎%3F-- 就说 那两" aria-label="Permalink to &quot;常见存储引擎?-- 就说 那两&quot;">​</a></h3></li><li><h3 id="%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F" tabindex="-1">存储引擎的作用是什么？ <a class="header-anchor" href="#存储引擎的作用是什么？" aria-label="Permalink to &quot;存储引擎的作用是什么？&quot;">​</a></h3></li><li><h3 id="InnoDB%E5%92%8CMyISAM%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9F" tabindex="-1">InnoDB和MyISAM的区别？ <a class="header-anchor" href="#InnoDB和MyISAM的区别？" aria-label="Permalink to &quot;InnoDB和MyISAM的区别？&quot;">​</a></h3></li><li><h3 id="%E4%B8%BA%E4%BB%80%E4%B9%88InnoDB%E4%BC%9A%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%B8%BB%E9%94%AE%EF%BC%9F" tabindex="-1">为什么InnoDB会自动生成主键？ <a class="header-anchor" href="#为什么InnoDB会自动生成主键？" aria-label="Permalink to &quot;为什么InnoDB会自动生成主键？&quot;">​</a></h3><ul><li>因为InnoDB的数据存储在索引树上,存在一起，没有主键无法存储数据。</li></ul></li><li><h3 id="%E4%B8%BA%E4%BB%80%E4%B9%88MyISAM%E4%B8%8D%E4%BC%9A%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%B8%BB%E9%94%AE%EF%BC%9F" tabindex="-1">为什么MyISAM不会自动生成主键？ <a class="header-anchor" href="#为什么MyISAM不会自动生成主键？" aria-label="Permalink to &quot;为什么MyISAM不会自动生成主键？&quot;">​</a></h3><ul><li>因为MyISAM的数据和索引<strong>分开存储</strong>，主键不是必须的。</li></ul></li><li><p>回答问题时聚焦重点（如InnoDB和MyISAM）。</p></li><li><p>结合存储引擎的特点，<strong>引申到索引、事务、锁机制等相关知识</strong>。</p></li><li><p>避免回答过多不熟悉的内容，避免挖坑。</p></li></ul></blockquote><h2 id="%E5%85%B6%E4%BB%96%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E--%E4%B8%8D%E9%87%8D%E8%A6%81" tabindex="-1">其他存储引擎--不重要 <a class="header-anchor" href="#其他存储引擎--不重要" aria-label="Permalink to &quot;其他存储引擎--不重要&quot;">​</a></h2><p>面试 不说这两个</p><ul><li><strong>Memory</strong>：基于内存的存储引擎，速度快，但数据断电丢失。</li><li><strong>CSV</strong>：以CSV文件形式存储数据，适合简单的数据交换。</li></ul><h2 id="%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9B%B8%E5%85%B3" tabindex="-1">性能优化相关 <a class="header-anchor" href="#性能优化相关" aria-label="Permalink to &quot;性能优化相关&quot;">​</a></h2><ul><li><h3 id="%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%EF%BC%9A" tabindex="-1"><strong>缓存机制</strong>： <a class="header-anchor" href="#缓存机制：" aria-label="Permalink to &quot;**缓存机制**：&quot;">​</a></h3><blockquote><ul><li><h3 id="%E7%B4%A2%E5%BC%95%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BC%93%E5%AD%98%E5%8F%AF%E4%BB%A5%E6%8F%90%E5%8D%87%E6%9F%A5%E8%AF%A2%E6%80%A7%E8%83%BD%E3%80%82" tabindex="-1">索引缓存和数据缓存可以提升查询性能。 <a class="header-anchor" href="#索引缓存和数据缓存可以提升查询性能。" aria-label="Permalink to &quot;索引缓存和数据缓存可以提升查询性能。&quot;">​</a></h3></li><li><p><strong>索引缓存</strong>：主要用于加速索引的查找操作，减少磁盘 I/O。</p></li><li><p><strong>数据缓存</strong>：主要用于加速数据的读取和写入操作，减少磁盘 I/O。</p></li><li><p><strong>InnoDB</strong>：通过缓冲池统一管理索引和数据的缓存。</p></li><li><p><strong>MyISAM</strong>：仅支持索引缓存，不支持数据缓存。</p></li></ul></blockquote></li><li><p><strong>锁机制</strong>：</p><ul><li>行锁（InnoDB）更适合<strong>高并发</strong>场景。</li><li>表锁（MyISAM）适合简单查询场景。</li></ul></li></ul><h2 id="%E8%A1%A5%E5%85%85-%E7%B4%A2%E5%BC%95%E7%BC%93%E5%AD%98%2C%E6%95%B0%E6%8D%AE%E7%BC%93%E5%AD%98" tabindex="-1">补充-索引缓存,数据缓存 <a class="header-anchor" href="#补充-索引缓存%2C数据缓存" aria-label="Permalink to &quot;补充-索引缓存,数据缓存&quot;">​</a></h2><blockquote><h3 id="%E7%B4%A2%E5%BC%95%E7%BC%93%E5%AD%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BC%93%E5%AD%98%E7%9A%84%E7%AE%80%E8%BF%B0" tabindex="-1"><strong>索引缓存与数据缓存的简述</strong> <a class="header-anchor" href="#索引缓存与数据缓存的简述" aria-label="Permalink to &quot;**索引缓存与数据缓存的简述**&quot;">​</a></h3><hr><h3 id="1.%20%E7%B4%A2%E5%BC%95%E7%BC%93%E5%AD%98%EF%BC%88Index%20Cache%EF%BC%89" tabindex="-1"><strong>1. 索引缓存（Index Cache）</strong> <a class="header-anchor" href="#1. 索引缓存（Index Cache）" aria-label="Permalink to &quot;**1. 索引缓存（Index Cache）**&quot;">​</a></h3><ul><li><strong>定义</strong>：索引缓存是指将索引数据加载到内存中，以加速索引的查找和查询操作。</li><li><strong>作用</strong>： <ul><li>提高索引的访问速度，减少磁盘 I/O。</li><li>在查询时，优先从内存中读取索引，而不是每次都从磁盘加载。</li></ul></li><li><strong>实现方式</strong>： <ul><li><strong>InnoDB</strong>：索引缓存是 InnoDB 缓冲池（Buffer Pool）的一部分，存储 B+ 树索引的节点。</li><li><strong>MyISAM</strong>：通过 <code>key_buffer_size</code> 参数配置索引缓存，用于缓存 <code>.MYI</code> 文件中的索引。</li></ul></li><li><strong>相关参数</strong>： <ul><li><strong>InnoDB</strong>：<code>innodb_buffer_pool_size</code>（缓冲池大小，包含索引和数据）。</li><li><strong>MyISAM</strong>：<code>key_buffer_size</code>（仅用于索引缓存）。</li></ul></li></ul><hr><h3 id="2.%20%E6%95%B0%E6%8D%AE%E7%BC%93%E5%AD%98%EF%BC%88Data%20Cache%EF%BC%89" tabindex="-1"><strong>2. 数据缓存（Data Cache）</strong> <a class="header-anchor" href="#2. 数据缓存（Data Cache）" aria-label="Permalink to &quot;**2. 数据缓存（Data Cache）**&quot;">​</a></h3><ul><li><strong>定义</strong>：数据缓存是指将表中的数据页加载到内存中，以加速数据的读取和写入操作。</li><li><strong>作用</strong>： <ul><li>提高数据访问速度，减少磁盘 I/O。</li><li>在查询或更新数据时，优先从内存中读取或写入，而不是直接操作磁盘。</li></ul></li><li><strong>实现方式</strong>： <ul><li><strong>InnoDB</strong>：数据缓存也是缓冲池的一部分，存储表的数据页。</li><li><strong>MyISAM</strong>：MyISAM 不支持数据缓存，数据直接从磁盘读取。</li></ul></li><li><strong>相关参数</strong>： <ul><li><strong>InnoDB</strong>：<code>innodb_buffer_pool_size</code>（缓冲池大小，包含索引和数据）。</li></ul></li></ul><hr><h3 id="3.%20%E5%8C%BA%E5%88%AB" tabindex="-1"><strong>3. 区别</strong> <a class="header-anchor" href="#3. 区别" aria-label="Permalink to &quot;**3. 区别**&quot;">​</a></h3><table tabindex="0"><thead><tr><th><strong>特性</strong></th><th><strong>索引缓存</strong></th><th><strong>数据缓存</strong></th></tr></thead><tbody><tr><td><strong>作用对象</strong></td><td>索引数据（如 B+ 树节点）</td><td>表中的实际数据页</td></tr><tr><td><strong>适用引擎</strong></td><td>InnoDB 和 MyISAM</td><td>仅 InnoDB</td></tr><tr><td><strong>配置参数</strong></td><td><code>key_buffer_size</code>（MyISAM）</td><td><code>innodb_buffer_pool_size</code>（InnoDB）</td></tr><tr><td><strong>存储位置</strong></td><td>内存</td><td>内存</td></tr></tbody></table><hr><h3 id="4.%20%E6%80%BB%E7%BB%93-1" tabindex="-1"><strong>4. 总结</strong> <a class="header-anchor" href="#4. 总结-1" aria-label="Permalink to &quot;**4. 总结**&quot;">​</a></h3><ul><li><strong>索引缓存</strong>：主要用于加速索引的查找操作，减少磁盘 I/O。</li><li><strong>数据缓存</strong>：主要用于加速数据的读取和写入操作，减少磁盘 I/O。</li><li><strong>InnoDB</strong>：通过缓冲池统一管理索引和数据的缓存。</li><li><strong>MyISAM</strong>：仅支持索引缓存，不支持数据缓存。</li></ul></blockquote><h2 id="%E9%94%81%E7%9A%84%E5%86%85%E5%AE%B9%E4%B9%9F%E5%BE%88%E5%A4%9A-%E5%90%8E%E9%9D%A2%E6%9C%89" tabindex="-1">锁的内容也很多-后面有 <a class="header-anchor" href="#锁的内容也很多-后面有" aria-label="Permalink to &quot;锁的内容也很多-后面有&quot;">​</a></h2><h1 id="25-05-12" tabindex="-1">25-05-12 <a class="header-anchor" href="#25-05-12" aria-label="Permalink to &quot;25-05-12&quot;">​</a></h1><h1 id="%E7%B4%A2%E5%BC%95(%E4%B8%80)-pdf" tabindex="-1">索引(一)-pdf <a class="header-anchor" href="#索引(一)-pdf" aria-label="Permalink to &quot;索引(一)-pdf&quot;">​</a></h1><h2 id="%E7%B4%A2%E5%BC%95%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5" tabindex="-1">索引的核心概念 <a class="header-anchor" href="#索引的核心概念" aria-label="Permalink to &quot;索引的核心概念&quot;">​</a></h2><ul><li>索引是关系型数据库中提高查询效率的核心工具。</li><li>数据量较大时（几十万、上百万甚至上千万），没有索引的查询会导致业务耗时过长，影响并发性能。</li></ul><h2 id="%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BD%9C%E7%94%A8" tabindex="-1">索引的作用 <a class="header-anchor" href="#索引的作用" aria-label="Permalink to &quot;索引的作用&quot;">​</a></h2><ul><li>提高查询速度和效率。</li><li>索引本质上是一个数据结构（如B+树）。</li></ul><h2 id="%E7%B4%A2%E5%BC%95%E7%9A%84%E5%AD%98%E5%82%A8" tabindex="-1">索引的存储 <a class="header-anchor" href="#索引的存储" aria-label="Permalink to &quot;索引的存储&quot;">​</a></h2><ul><li>不同存储引擎的索引存储方式不同： <ul><li>MyISAM：数据和索引分开存储。</li><li>InnoDB：数据和索引存储在一起（索引树上）。</li></ul></li></ul><h2 id="%E7%B4%A2%E5%BC%95%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0-why%3F" tabindex="-1">索引的底层实现-why? <a class="header-anchor" href="#索引的底层实现-why%3F" aria-label="Permalink to &quot;索引的底层实现-why?&quot;">​</a></h2><ul><li>常见存储引擎（如 MyISAM 和 InnoDB）使用 <strong>B+树</strong>作为索引结构。</li><li><strong>哈希索引</strong>仅在特定存储引擎（如 Memory）中支持</li></ul><h2 id="%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" tabindex="-1">索引的使用注意事项 <a class="header-anchor" href="#索引的使用注意事项" aria-label="Permalink to &quot;索引的使用注意事项&quot;">​</a></h2><ul><li>索引<strong>并非越多越好</strong>，过多的索引会<strong>增加磁盘IO</strong>，降低性能。--- <strong>索引也需要 存储为 索引文件</strong></li><li>索引的维护（如插入、删除、更新数据）也会涉及磁盘IO操作。</li><li>一次SQL查询只能使用一个索引。</li><li>多列索引必须使用第一列才能生效。</li></ul><h2 id="%E7%B4%A2%E5%BC%95%E7%9A%84%E5%88%86%E7%B1%BB" tabindex="-1">索引的分类 <a class="header-anchor" href="#索引的分类" aria-label="Permalink to &quot;索引的分类&quot;">​</a></h2><ul><li><h3 id="%E7%89%A9%E7%90%86%E5%88%86%E7%B1%BB%EF%BC%9A" tabindex="-1"><strong>物理分类</strong>： <a class="header-anchor" href="#物理分类：" aria-label="Permalink to &quot;**物理分类**：&quot;">​</a></h3><ul><li>聚集索引（Clustered Index）。</li><li>非聚集索引（Non-Clustered Index）。</li></ul></li><li><h3 id="%E9%80%BB%E8%BE%91%E5%88%86%E7%B1%BB%EF%BC%9A" tabindex="-1"><strong>逻辑分类</strong>： <a class="header-anchor" href="#逻辑分类：" aria-label="Permalink to &quot;**逻辑分类**：&quot;">​</a></h3><ul><li><p>普通索引（Secondary Index）。-- (创建新表&amp;已创建表，数量是不限的，<strong>一张表的一次sql查询只能用一个索引</strong> where a=1 and b=&#39;M&#39;)</p><ul><li>看 where 后面的, 不是 select后面, 看过滤字段</li></ul></li><li><p>唯一索引（Unique Index）。--<strong>使用UNIQUE修饰的字段，值不能够重复，主键索引就隶属于唯一性索引</strong></p></li><li><p>主键索引（Primary Key Index）。-- <strong>使用Primary Key修饰的字段会自动创建索引(MyISAM(因为分开, 不是主键不加索引), InnoDB(因为不分开, 不加主键, 也会自动加索引))</strong></p></li><li><p>单列索引：在单个字段上创建索引。</p></li><li><p><strong>多列索引（联合索引）</strong>：--在表的多个字段上创建索引 (uid+cid，<em><strong>多列索引必须使用到第一个列</strong></em>，才能用到多列索 引，否则索引用不上)</p></li><li><p>全文索引（Full-Text Index）。-- 主要用于字符串搜索（如MyISAM支持） -- 使用少</p><blockquote><ul><li><p>使用<code>FULLTEXT</code>参数可以设置全文索引</p></li><li><p><strong>只支持</strong>CHAR，VARCHAR和TEXT类型的字段上，常用于<strong>数据量较大的字符串类型</strong>上，可以提高查询速度</p></li><li><p><strong>线上项目支持专门的搜索功能</strong>，给后台服务器增加专门的搜索引擎支持快速高校的搜索 elasticsearch 简称es</p></li><li><h3 id="C%2B%2B%E5%BC%80%E6%BA%90%E7%9A%84%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%20%E6%90%9C%E7%8B%97%E7%9A%84workflow" tabindex="-1"><strong>C++开源的搜索引擎 搜狗的workflow</strong> <a class="header-anchor" href="#C%2B%2B开源的搜索引擎 搜狗的workflow" aria-label="Permalink to &quot;**C++开源的搜索引擎 搜狗的workflow**&quot;">​</a></h3></li></ul></blockquote></li></ul></li></ul><h2 id="%E4%B8%93%E4%B8%9A%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E-%E8%A1%A5%E5%85%85-%E4%BA%86%E8%A7%A3" tabindex="-1">专业搜索引擎-补充-了解 <a class="header-anchor" href="#专业搜索引擎-补充-了解" aria-label="Permalink to &quot;专业搜索引擎-补充-了解&quot;">​</a></h2><blockquote><ol><li><p><strong>为什么需要专业搜索引擎</strong></p><ul><li>数据库直接搜索效率低，尤其是面对海量数据时。</li><li>专业搜索引擎（如 Elasticsearch 和 Solr）提供高效、稳定的搜索功能，适合大规模文本内容的快速检索。</li></ul></li><li><p><strong>Elasticsearch（ES）简介</strong></p><ul><li>基于 Lucene 的开源搜索引擎。</li><li>提供标准的 HTTP 接口，支持 RESTful API。</li><li>适合高并发、高性能的搜索场景。</li><li>部署简单，支持分布式架构，易于扩展。</li></ul></li><li><h3 id="Solr%20%E7%AE%80%E4%BB%8B" tabindex="-1"><strong>Solr 简介</strong> <a class="header-anchor" href="#Solr 简介" aria-label="Permalink to &quot;**Solr 简介**&quot;">​</a></h3><ul><li>同样基于 Lucene 的开源搜索引擎。</li><li>提供丰富的配置选项，适合复杂的搜索需求。</li><li>在企业级项目中应用广泛。</li></ul></li><li><p><strong>使用场景</strong></p><ul><li><strong>大规模搜索</strong>：如博客、论坛、社交平台等需要快速检索大量文本内容的场景。</li><li><strong>小规模搜索</strong>：如学校系统、内部管理系统等用户量较小的场景，<strong>可直接在数据库中通过索引支持简单搜索</strong>。</li></ul></li><li><p><strong>ES 的优势</strong></p><ul><li>高效的全文检索能力。</li><li>支持复杂查询（如模糊搜索、范围查询、聚合分析等）。</li><li>高可用性和分布式存储，适合处理大规模数据。</li></ul></li><li><p><strong>ES 的使用方式</strong></p><ul><li>部署一个 Elasticsearch 服务。</li><li>将需要搜索的数据通过序列化存入 ES。</li><li>通过标准 HTTP API 接口进行查询。</li></ul></li><li><p><strong>小规模搜索的替代方案</strong></p><ul><li>对于用户量较小的系统（如学校系统），可以直接在数据库中通过索引支持简单搜索。</li><li>适合数据量有限、并发量较低的场景。</li></ul></li><li><p><strong>推荐学习</strong></p><ul><li>学习 Elasticsearch 的基本使用和配置。</li><li>掌握如何通过 API 调用 ES 提供的搜索服务。</li><li>了解 Solr 的配置和使用场景。</li></ul></li></ol><h3 id="%E6%80%BB%E7%BB%93-6" tabindex="-1">总结 <a class="header-anchor" href="#总结-6" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>在真实项目中，专业搜索引擎（如 Elasticsearch 和 Solr）是处理<strong>大规模文本搜索</strong>的首选工具。对于小规模场景，可以通过数据库索引实现简单搜索。根据项目需求选择合适的方案，既能保证性能，又能降低开发和维护成本。</p></blockquote><h2 id="%E7%B4%A2%E5%BC%95%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86" tabindex="-1">索引的底层原理 <a class="header-anchor" href="#索引的底层原理" aria-label="Permalink to &quot;索引的底层原理&quot;">​</a></h2><ul><li>索引底层<strong>通常使用B+树</strong>，而非AVL树或其他平衡二叉树。</li><li>B+树的特点更适合数据库的磁盘IO操作。</li></ul><h2 id="%E5%9B%9E%E9%A1%BE%E5%AD%A6%E4%B9%A0%E5%86%85%E5%AE%B9" tabindex="-1">回顾学习内容 <a class="header-anchor" href="#回顾学习内容" aria-label="Permalink to &quot;回顾学习内容&quot;">​</a></h2><ul><li>数据结构基础：二叉树、平衡二叉树（AVL树）、红黑树、B树、B+树。 -- B 是 blance的意思</li><li>搜索引擎相关：倒排索引、字典树等。</li></ul><h1 id="%E7%B4%A2%E5%BC%95(%E4%BA%8C)" tabindex="-1">索引(二) <a class="header-anchor" href="#索引(二)" aria-label="Permalink to &quot;索引(二)&quot;">​</a></h1><h2 id="%E7%B4%A2%E5%BC%95%E7%9A%84%E5%88%9B%E5%BB%BA" tabindex="-1"><strong>索引的创建</strong> <a class="header-anchor" href="#索引的创建" aria-label="Permalink to &quot;**索引的创建**&quot;">​</a></h2><ul><li><h3 id="%E5%BB%BA%E8%A1%A8%E6%97%B6%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95%EF%BC%9A" tabindex="-1"><strong>建表时创建索引</strong>： <a class="header-anchor" href="#建表时创建索引：" aria-label="Permalink to &quot;**建表时创建索引**：&quot;">​</a></h3><ul><li><p>主键索引：<code>PRIMARY KEY</code> 修饰的字段自动创建主键索引。</p></li><li><p>唯一索引：<code>UNIQUE</code> 修饰的字段自动创建唯一索引。</p></li><li><p>普通索引：通过 <code>INDEX</code> 关键字显式创建。</p></li><li><p>示例：-- <strong>索引名 可添加, 不添加会自动有</strong></p><p>单列索引</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    INDEX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name_idx (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>多列索引</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> index1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    sex ENUM(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;male&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;female&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    INDEX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div></li></ul></li><li><h3 id="%E5%B7%B2%E5%88%9B%E5%BB%BA%E8%A1%A8%E4%B8%8A%E6%B7%BB%E5%8A%A0%E7%B4%A2%E5%BC%95%EF%BC%9A" tabindex="-1"><strong>已创建表上添加索引</strong>： <a class="header-anchor" href="#已创建表上添加索引：" aria-label="Permalink to &quot;**已创建表上添加索引**：&quot;">​</a></h3><ul><li><p>使用 <code>CREATE INDEX</code> 语法：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INDEX</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name_idx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [UNIQUE] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INDEX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 索引名 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表名（属性名（</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">） [ASC | DESC]);</span></span></code></pre></div></li></ul></li></ul><h2 id="%E7%B4%A2%E5%BC%95%E5%AE%9E%E8%B7%B5%E5%8F%8A%E6%95%88%E6%9E%9C-student" tabindex="-1">索引实践及效果-student <a class="header-anchor" href="#索引实践及效果-student" aria-label="Permalink to &quot;索引实践及效果-student&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">explain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> uid=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> const 常数级 , 一行就找到 , key_len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">null</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> explain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;zhang san&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> all 全扫 key_len </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">null</span></span></code></pre></div><p>给name 加索引</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> index</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nameidx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> show </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">explain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;zhang san&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">///</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ref , 一行找到, key_len </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">152</span></span></code></pre></div><ul><li><p><strong><code>const</code></strong>：效率最高，使用<strong>主键或唯一索引</strong>精确匹配。</p></li><li><h3 id="ref%EF%BC%9A%E4%BD%BF%E7%94%A8%E9%9D%9E%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%EF%BC%88%E6%99%AE%E9%80%9A%E7%B4%A2%E5%BC%95%E6%88%96%E5%A4%9A%E5%88%97%E7%B4%A2%E5%BC%95%EF%BC%89%EF%BC%8C%E6%89%AB%E6%8F%8F%E7%B4%A2%E5%BC%95%E5%8C%B9%E9%85%8D%E5%A4%9A%E8%A1%8C%E3%80%82%20----%20%E8%BF%99%E4%B8%AA%20%E5%A4%9A%E8%A1%8C%2C%20%E8%A6%81%E6%B3%A8%E6%84%8F" tabindex="-1"><strong><code>ref</code></strong>：使用<strong>非唯一索引</strong>（普通索引或多列索引），<strong>扫描索引匹配多行</strong>。 ---- 这个 多行, 要注意 <a class="header-anchor" href="#ref：使用非唯一索引（普通索引或多列索引），扫描索引匹配多行。 ---- 这个 多行%2C 要注意" aria-label="Permalink to &quot;**\`ref\`**：使用**非唯一索引**（普通索引或多列索引），**扫描索引匹配多行**。 ---- 这个 多行, 要注意&quot;">​</a></h3></li><li><p><strong><code>all</code></strong>：全表扫描，效率最低。</p></li></ul><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p></p><p>sql优化, 索引得到的数据量 如果 和 全表数据量 差不多, 就不用索引了</p></div><h2 id="%E4%BD%BF%E7%94%A8%20EXPLAIN%20%E5%88%86%E6%9E%90%20SQL%20%E6%80%A7%E8%83%BD" tabindex="-1">使用 EXPLAIN 分析 SQL 性能 <a class="header-anchor" href="#使用 EXPLAIN 分析 SQL 性能" aria-label="Permalink to &quot;使用 EXPLAIN 分析 SQL 性能&quot;">​</a></h2><ul><li><p><strong>EXPLAIN 的作用</strong>：</p><ul><li>分析 SQL 查询是否使用了索引。</li><li>判断查询的效率，优化 SQL。</li><li>查看是否存在全表扫描（<code>ALL</code>）或索引扫描（<code>INDEX</code>）。</li></ul></li><li><p><strong>EXPLAIN 常见字段</strong>：</p><ul><li><code>type</code>：查询类型。 <ul><li><code>ALL</code>：全表扫描。</li><li><code>ref</code>：索引扫描。</li><li><code>const</code>：主键或唯一索引精确匹配。</li></ul></li><li><code>possible_keys</code>：可能使用的索引。</li><li><code>key</code>：实际使用的索引。</li><li><code>rows</code>：扫描的行数。</li></ul></li></ul><h2 id="%E5%AD%97%E7%AC%A6%E4%B8%B2%20%E7%B4%A2%E5%BC%95%E9%95%BF%E5%BA%A6%E9%97%AE%E9%A2%98%E5%8F%8A%E4%BC%98%E5%8C%96" tabindex="-1">字符串 索引长度问题及优化 <a class="header-anchor" href="#字符串 索引长度问题及优化" aria-label="Permalink to &quot;字符串 索引长度问题及优化&quot;">​</a></h2><blockquote><p>在 MySQL 中，为字符串字段创建索引时，可以通过指定索引长度来优化性能。</p><hr><h3 id="1.%20%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E6%8C%87%E5%AE%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B4%A2%E5%BC%95%E9%95%BF%E5%BA%A6" tabindex="-1">1. <strong>为什么要指定字符串索引长度</strong> <a class="header-anchor" href="#1. 为什么要指定字符串索引长度" aria-label="Permalink to &quot;1. **为什么要指定字符串索引长度**&quot;">​</a></h3><ul><li><strong>减少索引文件大小</strong>：字符串字段可能很长，<strong>直接对整个字段创建索引会导致索引文件过大</strong>，影响查询性能。</li><li><strong>提高查询效率</strong>：索引文件越小，磁盘 I/O 越少，查询速度越快。</li><li><strong>避免不必要的存储开销</strong>：<strong>只需使用字符串的前几个字符即可区分大多数记录</strong>，无需对整个字段建立索引。</li></ul><hr><h3 id="2.%20%E5%A6%82%E4%BD%95%E6%8C%87%E5%AE%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B4%A2%E5%BC%95%E9%95%BF%E5%BA%A6" tabindex="-1">2. <strong>如何指定字符串索引长度</strong> <a class="header-anchor" href="#2. 如何指定字符串索引长度" aria-label="Permalink to &quot;2. **如何指定字符串索引长度**&quot;">​</a></h3><ul><li>在创建索引时，可以通过指定索引长度来限制索引使用的字符数。</li><li>语法：<div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INDEX</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 索引名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表名(字段名(长度));</span></span></code></pre></div></li><li>示例：<div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INDEX</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name_idx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div><ul><li>这里为 <code>name</code> 字段的前 20 个字符创建索引。</li></ul></li></ul><hr><h3 id="3.%20%E7%B4%A2%E5%BC%95%E9%95%BF%E5%BA%A6%E7%9A%84%E9%80%89%E6%8B%A9" tabindex="-1">3. <strong>索引长度的选择</strong> <a class="header-anchor" href="#3. 索引长度的选择" aria-label="Permalink to &quot;3. **索引长度的选择**&quot;">​</a></h3><ul><li><p><strong>选择合适的长度</strong>：</p><ul><li>索引长度应足够区分大多数记录。</li><li>如果字段值的<strong>前几个字符具有较高的区分度</strong>，可以选择较短的长度。</li></ul></li><li><h3 id="%E5%A6%82%E4%BD%95%E7%A1%AE%E5%AE%9A%E9%95%BF%E5%BA%A6%EF%BC%9A" tabindex="-1"><strong>如何确定长度</strong>： <a class="header-anchor" href="#如何确定长度：" aria-label="Permalink to &quot;**如何确定长度**：&quot;">​</a></h3><ul><li>使用 <code>SELECT COUNT(DISTINCT LEFT(字段名, 长度))</code> 来测试不同长度的区分度。</li><li>示例：<div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> COUNT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DISTINCT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LEFT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student;</span></span></code></pre></div></li></ul></li></ul><hr><h3 id="4.%20%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" tabindex="-1">4. <strong>注意事项</strong> <a class="header-anchor" href="#4. 注意事项" aria-label="Permalink to &quot;4. **注意事项**&quot;">​</a></h3><ul><li><p><strong>适用字段类型</strong>：</p><ul><li>适用于 <code>CHAR</code>、<code>VARCHAR</code>、<code>TEXT</code> 等字符串类型字段。</li></ul></li><li><p><strong>全文索引</strong>：</p><ul><li>如果需要全文搜索（<code>FULLTEXT</code>），<strong>不能指定索引长度</strong>。</li></ul></li><li><h3 id="%E8%BF%87%E7%9F%AD%E7%9A%84%E7%B4%A2%E5%BC%95%E9%95%BF%E5%BA%A6%EF%BC%9A" tabindex="-1"><strong>过短的索引长度</strong>： <a class="header-anchor" href="#过短的索引长度：" aria-label="Permalink to &quot;**过短的索引长度**：&quot;">​</a></h3><ul><li>如果索引长度过短，可能导致区分度不足，查询效率下降。</li></ul></li></ul><hr><h3 id="5.%20%E4%BC%98%E5%8C%96%E5%BB%BA%E8%AE%AE" tabindex="-1">5. <strong>优化建议</strong> <a class="header-anchor" href="#5. 优化建议" aria-label="Permalink to &quot;5. **优化建议**&quot;">​</a></h3><ul><li>对于长字符串字段（如 <code>VARCHAR(255)</code> 或 <code>TEXT</code>），建议指定索引长度。</li><li>索引长度的选择应在性能和区分度之间找到平衡点。</li></ul><hr><h3 id="%E7%A4%BA%E4%BE%8B%E5%AF%B9%E6%AF%94" tabindex="-1">示例对比 <a class="header-anchor" href="#示例对比" aria-label="Permalink to &quot;示例对比&quot;">​</a></h3><p>假设有一个 <code>student</code> 表，<code>name</code> 字段为 <code>VARCHAR(255)</code>：</p><ul><li><p><strong>不指定索引长度</strong>：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INDEX</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name_idx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ul><li>索引文件较大，查询效率较低。</li></ul></li><li><p><strong>指定索引长度</strong>：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INDEX</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name_idx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div><ul><li>索引文件较小，查询效率更高。</li></ul></li></ul><hr><p>通过合理指定字符串索引长度，可以有效优化 MySQL 的查询性能，同时减少存储开销。</p></blockquote><h2 id="%E7%B4%A2%E5%BC%95%E7%BC%93%E5%AD%98-%E7%AC%AC%E4%BA%8C%E6%AC%A1%E9%80%9F%E5%BA%A6%E5%BF%AB" tabindex="-1">索引缓存-第二次速度快 <a class="header-anchor" href="#索引缓存-第二次速度快" aria-label="Permalink to &quot;索引缓存-第二次速度快&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t_user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> passwd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">44</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span></span></code></pre></div><h2 id="%E7%B4%A2%E5%BC%95%E5%AE%9E%E8%B7%B5%E5%8F%8A%E6%95%88%E6%9E%9C-t_user" tabindex="-1">索引实践及效果-t_user <a class="header-anchor" href="#索引实践及效果-t_user" aria-label="Permalink to &quot;索引实践及效果-t_user&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> index</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pwdidx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t_user(passwd);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t_user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> passwd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li><h3 id="%E4%BD%86%E6%98%AF%2C%20%E9%80%9F%E5%BA%A6%2C%20%E5%B9%B6%E6%B2%A1%E6%9C%89%E5%BF%AB%2C%E4%B8%BA%E4%BB%80%E4%B9%88%3F---%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88" tabindex="-1">但是, 速度, 并没有快,为什么?---索引失效 <a class="header-anchor" href="#但是%2C 速度%2C 并没有快%2C为什么%3F---索引失效" aria-label="Permalink to &quot;但是, 速度, 并没有快,为什么?---索引失效&quot;">​</a></h3></li><li><h3 id="%E6%B6%89%E5%8F%8A%20%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E7%9A%84%20%E7%B4%A2%E5%BC%95%2C%20%E5%B0%86%E4%BC%9A%E5%A4%B1%E6%95%88!!!" tabindex="-1">涉及 <strong>类型转换的 索引, 将会失效</strong>!!! <a class="header-anchor" href="#涉及 类型转换的 索引%2C 将会失效!!!" aria-label="Permalink to &quot;涉及 **类型转换的 索引, 将会失效**!!!&quot;">​</a></h3></li></ul><h2 id="%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88%E7%9A%84%E5%9C%BA%E6%99%AF-%20%E9%87%8D%E7%82%B9" tabindex="-1">索引失效的场景- <strong>重点</strong> <a class="header-anchor" href="#索引失效的场景- 重点" aria-label="Permalink to &quot;索引失效的场景- **重点**&quot;">​</a></h2><blockquote><ul><li><code>WHERE</code> 条件中字段涉及<strong>类型转换</strong>（如字符串与整数比较）。</li><li>使用了 <strong>MySQL 函数</strong>（如 <code>UPPER()</code>、<code>CONCAT()</code> 等）。</li><li>使用<strong>表达式或计算</strong>（如 <code>age + 1 = 30</code>）。</li><li><strong>查询结果数据量接近全表数据量</strong>（MySQL 优化器可能选择全表扫描）。</li></ul></blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t_user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> passwd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1000000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">explain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t_user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> passwd</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1000000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ref    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre></div><h2 id="%E7%B4%A2%E5%BC%95%E7%9A%84%E5%88%A0%E9%99%A4" tabindex="-1">索引的删除 <a class="header-anchor" href="#索引的删除" aria-label="Permalink to &quot;索引的删除&quot;">​</a></h2><ul><li>使用 <code>DROP INDEX</code> 删除指定索引：<div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DROP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INDEX</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name_idx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student;</span></span></code></pre></div></li></ul><h2 id="%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96%E7%9A%84%E5%B8%B8%E8%A7%81%E5%9C%BA%E6%99%AF" tabindex="-1">索引优化的常见场景 <a class="header-anchor" href="#索引优化的常见场景" aria-label="Permalink to &quot;索引优化的常见场景&quot;">​</a></h2><ul><li><p><strong>需要添加索引的场景</strong>：</p><ol><li>经常作为 <code>WHERE</code> 条件的字段。</li><li>经常用于排序（<code>ORDER BY</code>）或分组（<code>GROUP BY</code>）的字段。</li><li>经常用于连接查询的字段。</li></ol></li><li><p><strong>字符串索引优化</strong>：</p><ul><li>为字符串字段创建索引时，建议指定索引长度：<div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INDEX</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name_idx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span></code></pre></div></li><li>避免索引值过长，减少索引文件大小，提高查询效率。</li></ul></li></ul><h2 id="%E9%9D%A2%E8%AF%95%E8%AF%B4%E6%B3%95" tabindex="-1">面试说法 <a class="header-anchor" href="#面试说法" aria-label="Permalink to &quot;面试说法&quot;">​</a></h2><p>从实践中, 用到的 创建索引 和 索引优化, 索引失效问题</p><h2 id="%E7%B4%A2%E5%BC%95%E6%BC%AB%E7%94%BBpdf--%E7%9C%8B%E4%B8%80%E7%9C%8B" tabindex="-1">索引漫画pdf--看一看 <a class="header-anchor" href="#索引漫画pdf--看一看" aria-label="Permalink to &quot;索引漫画pdf--看一看&quot;">​</a></h2><h1 id="b%E6%A0%91%E7%B4%A2%E5%BC%95%E8%AF%A6%E8%A7%A3" tabindex="-1">b树索引详解 <a class="header-anchor" href="#b树索引详解" aria-label="Permalink to &quot;b树索引详解&quot;">​</a></h1><h2 id="%E8%A6%81%E5%9B%9E%E7%AD%94%E7%9A%84%E9%97%AE%E9%A2%98" tabindex="-1">要回答的问题 <a class="header-anchor" href="#要回答的问题" aria-label="Permalink to &quot;要回答的问题&quot;">​</a></h2><blockquote><ul><li><strong>索引的底层原理是什么？</strong></li><li><strong>索引的底层数据结构是什么？</strong></li><li><strong>聚集索引和非聚集索引的区别是什么？</strong></li><li><strong>主键索引和辅助索引（也叫二级索引）的区别是什么？</strong></li><li><strong>InnoDB 和 MyISAM 存储引擎下的索引有什么不同？</strong></li><li><strong>B+树索引和哈希索引的优缺点是什么？</strong></li><li><strong>为什么 InnoDB 和 MyISAM 存储引擎支持 B+树索引，而 Memory 存储引擎支持哈希索引？</strong></li><li><strong>为什么数据库索引的底层采用 B+树而不是其他数据结构？</strong></li><li><strong>B树和 B+树的区别是什么？</strong></li><li><strong>在数据库中，如何减少磁盘 IO 操作以提高查询效率？</strong></li></ul></blockquote><h2 id="%E7%9C%8Bpdf" tabindex="-1">看pdf <a class="header-anchor" href="#看pdf" aria-label="Permalink to &quot;看pdf&quot;">​</a></h2><h2 id="%E7%A3%81%E7%9B%98IO%E4%B8%8E%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%EF%BC%9A" tabindex="-1">磁盘IO与内存管理： <a class="header-anchor" href="#磁盘IO与内存管理：" aria-label="Permalink to &quot;磁盘IO与内存管理：&quot;">​</a></h2><p><img src="`+F+'" alt="image-20250513092239168"></p><ul><li><strong>磁盘IO</strong>是<strong>以块为单位</strong>读取数据，通常为16KB。--- <strong>内存页面的 整数倍</strong></li><li><strong>内存管理</strong>是<strong>以页面</strong>为单位，通常为4KB(32位)。</li><li>减少磁盘IO次数是提高查询效率的关键。</li></ul><blockquote><p>以下是关于磁盘IO与内存管理的细化要点：</p><h3 id="1.%20%E7%A3%81%E7%9B%98IO%E7%9A%84%E7%89%B9%E7%82%B9" tabindex="-1">1. <strong>磁盘IO的特点</strong> <a class="header-anchor" href="#1. 磁盘IO的特点" aria-label="Permalink to &quot;1. **磁盘IO的特点**&quot;">​</a></h3><ul><li><strong>操作单位</strong>：磁盘IO以块（Block）为单位读取数据，通常一个块大小为16KB。</li><li><strong>效率</strong>：磁盘IO操作速度远低于内存操作，因此减少磁盘IO次数是优化的关键。</li><li><strong>顺序读取与随机读取</strong>： <ul><li>顺序读取效率高，因为磁盘磁头移动较少。</li><li>随机读取效率低，因为磁头需要频繁移动定位。</li></ul></li></ul><h3 id="2.%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%9A%84%E7%89%B9%E7%82%B9" tabindex="-1">2. <strong>内存管理的特点</strong> <a class="header-anchor" href="#2. 内存管理的特点" aria-label="Permalink to &quot;2. **内存管理的特点**&quot;">​</a></h3><ul><li><strong>操作单位</strong>：内存管理以**页面（Page）**为单位，通常一个页面大小为4KB。</li><li><strong>内存分配</strong>： <ul><li>操作系统按页面分配内存，而<strong>不是按字节分配</strong>。</li><li>小内存分配（如4字节）会由用户态的内存分配器（如 <code>malloc</code> 或 <code>new</code>）管理，避免频繁陷入内核。</li></ul></li><li><strong>缓存机制</strong>： <ul><li>内存分配器会缓存未使用的内存块，以提高后续分配效率。</li><li>当缓存耗尽时，才会向操作系统申请新的内存页面。</li></ul></li></ul><h3 id="3.%20%E7%A3%81%E7%9B%98IO%E4%B8%8E%E5%86%85%E5%AD%98%E7%9A%84%E5%85%B3%E7%B3%BB" tabindex="-1">3. <strong>磁盘IO与内存的关系</strong> <a class="header-anchor" href="#3. 磁盘IO与内存的关系" aria-label="Permalink to &quot;3. **磁盘IO与内存的关系**&quot;">​</a></h3><ul><li><p><strong>数据加载</strong>：</p><ul><li>数据库从磁盘读取数据时，数据会先加载到内存中。</li><li>一次磁盘IO通常会读取一个磁盘块（16KB），并存储到内存的多个页面中。</li></ul></li><li><h3 id="%E7%B4%A2%E5%BC%95%E5%8A%A0%E8%BD%BD%EF%BC%9A" tabindex="-1"><strong>索引加载</strong>： <a class="header-anchor" href="#索引加载：" aria-label="Permalink to &quot;**索引加载**：&quot;">​</a></h3><ul><li>索引文件从磁盘加载到内存时，会构建为特定的数据结构（如B树或B+树）以加速查询。</li></ul></li><li><p><strong>减少磁盘IO</strong>：</p><ul><li>数据库通过优化索引结构（如B+树）和缓存机制（如缓冲池）来减少磁盘IO次数。</li></ul></li></ul><h3 id="4.%20%E7%A3%81%E7%9B%98IO%E4%B8%8E%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%9A%84%E4%BC%98%E5%8C%96%E7%AD%96%E7%95%A5" tabindex="-1">4. <strong>磁盘IO与内存管理的优化策略</strong> <a class="header-anchor" href="#4. 磁盘IO与内存管理的优化策略" aria-label="Permalink to &quot;4. **磁盘IO与内存管理的优化策略**&quot;">​</a></h3><ul><li><p><strong>批量读取</strong>：</p><ul><li>磁盘IO按块读取数据，避免频繁的小数据读取。</li></ul></li><li><h3 id="%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84%E4%BC%98%E5%8C%96%EF%BC%9A" tabindex="-1"><strong>索引结构优化</strong>： <a class="header-anchor" href="#索引结构优化：" aria-label="Permalink to &quot;**索引结构优化**：&quot;">​</a></h3><ul><li>使用B树或B+树等平衡树结构，减少磁盘IO次数。</li></ul></li><li><h3 id="%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%EF%BC%9A-1" tabindex="-1"><strong>缓存机制</strong>： <a class="header-anchor" href="#缓存机制：-1" aria-label="Permalink to &quot;**缓存机制**：&quot;">​</a></h3><ul><li>数据库通过缓冲池（Buffer Pool）将常用数据缓存到内存中，减少磁盘访问。</li></ul></li><li><h3 id="%E5%88%86%E9%A1%B5%E7%AE%A1%E7%90%86%EF%BC%9A" tabindex="-1"><strong>分页管理</strong>： <a class="header-anchor" href="#分页管理：" aria-label="Permalink to &quot;**分页管理**：&quot;">​</a></h3><ul><li>内存分页与磁盘块<strong>对齐</strong>，确保数据读取后能高效存储到内存中。</li></ul></li></ul><h3 id="5.%20%E7%A3%81%E7%9B%98IO%E4%B8%8E%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%9A%84%E5%AE%9E%E8%B7%B5%E6%84%8F%E4%B9%89" tabindex="-1">5. <strong>磁盘IO与内存管理的实践意义</strong> <a class="header-anchor" href="#5. 磁盘IO与内存管理的实践意义" aria-label="Permalink to &quot;5. **磁盘IO与内存管理的实践意义**&quot;">​</a></h3><ul><li><strong>查询性能</strong>： <ul><li>减少磁盘IO次数可以显著提高查询性能。</li></ul></li><li><strong>数据结构选择</strong>： <ul><li>数据库索引选择B+树等结构，确保一次磁盘IO能加载更多数据。</li></ul></li><li><strong>硬件匹配</strong>： <ul><li>磁盘块大小与内存页面大小的整数倍关系，确保数据读取和存储的高效性。</li></ul></li></ul><p>通过以上细化，可以更清晰地理解磁盘IO与内存管理在数据库中的作用及优化方向。</p></blockquote><h2 id="%E4%BD%A0%E7%A0%94%E7%A9%B6%E8%BF%87%20%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%90%97%3F" tabindex="-1">你研究过 内存分配器的实现吗? <a class="header-anchor" href="#你研究过 内存分配器的实现吗%3F" aria-label="Permalink to &quot;你研究过 内存分配器的实现吗?&quot;">​</a></h2><blockquote><p><code>ptmalloc</code> 和 <code>tcmalloc</code> 是两种常见的内存分配器（Memory Allocator），它们在内存管理中扮演着重要角色。</p><hr><h3 id="1.%20ptmalloc" tabindex="-1">1. <strong>ptmalloc</strong> <a class="header-anchor" href="#1. ptmalloc" aria-label="Permalink to &quot;1. **ptmalloc**&quot;">​</a></h3><ul><li><strong>全称</strong>：Pthread malloc</li><li><strong>来源</strong>：基于 GNU C Library (glibc) 的内存分配器。</li><li><strong>特点</strong>： <ol><li><strong>线程安全</strong>： <ul><li>支持多线程环境，通过锁机制（如互斥锁）实现线程安全。</li></ul></li><li><strong>分配策略</strong>： <ul><li>使用分级分配策略（Bins），将内存分为小块（Small Bins）、大块（Large Bins）和快速分配块（Fast Bins）。</li></ul></li><li><strong>内存碎片管理</strong>： <ul><li>通过合并相邻的空闲块减少内存碎片。</li></ul></li><li><strong>适用场景</strong>： <ul><li>适合一般的多线程程序，尤其是需要与 glibc 兼容的场景。</li></ul></li></ol></li><li><strong>缺点</strong>： <ul><li>在高并发场景下，锁机制可能导致性能瓶颈。</li><li>内存碎片问题在某些情况下仍然存在。</li></ul></li></ul><hr><h3 id="2.%20tcmalloc" tabindex="-1">2. <strong>tcmalloc</strong> <a class="header-anchor" href="#2. tcmalloc" aria-label="Permalink to &quot;2. **tcmalloc**&quot;">​</a></h3><ul><li><strong>全称</strong>：Thread-Caching Malloc</li><li><strong>来源</strong>：由 Google 开发，专为高性能应用设计。</li><li><strong>特点</strong>： <ol><li><strong>线程缓存</strong>： <ul><li>每个线程维护独立的内存缓存，减少线程间的锁竞争。</li></ul></li><li><strong>分配效率</strong>： <ul><li>使用高效的内存分配算法，分配和释放内存的速度更快。</li></ul></li><li><strong>内存碎片管理</strong>： <ul><li>通过全局和线程本地缓存的结合，减少内存碎片。</li></ul></li><li><strong>适用场景</strong>： <ul><li>适合高并发、高性能的应用场景，如 Web 服务器、大型分布式系统等。</li></ul></li></ol></li><li><strong>缺点</strong>： <ul><li>在低并发或单线程场景下，性能优势不明显。</li><li>线程缓存可能导致内存使用量增加。</li></ul></li></ul><hr><h3 id="3.%20%E5%AF%B9%E6%AF%94%E6%80%BB%E7%BB%93" tabindex="-1">3. <strong>对比总结</strong> <a class="header-anchor" href="#3. 对比总结" aria-label="Permalink to &quot;3. **对比总结**&quot;">​</a></h3><table tabindex="0"><thead><tr><th>特性</th><th>ptmalloc</th><th>tcmalloc</th></tr></thead><tbody><tr><td><strong>线程安全</strong></td><td>通过全局锁实现</td><td>通过线程本地缓存实现，无需全局锁</td></tr><tr><td><strong>分配效率</strong></td><td>较慢，适合一般场景</td><td>高效，适合高并发场景</td></tr><tr><td><strong>内存碎片管理</strong></td><td>合并空闲块，效果一般</td><td>通过线程缓存和全局缓存结合优化</td></tr><tr><td><strong>适用场景</strong></td><td>多线程程序，兼容性要求高的场景</td><td>高性能、高并发应用</td></tr><tr><td><strong>内存使用量</strong></td><td>较低</td><td>较高（线程缓存可能增加内存占用）</td></tr></tbody></table><hr><h3 id="4.%20%E9%80%89%E6%8B%A9%E5%BB%BA%E8%AE%AE" tabindex="-1">4. <strong>选择建议</strong> <a class="header-anchor" href="#4. 选择建议" aria-label="Permalink to &quot;4. **选择建议**&quot;">​</a></h3><ul><li><strong>使用 ptmalloc</strong>： <ul><li>如果你的程序需要与 glibc 兼容。</li><li>如果你的程序是普通的多线程应用，且对性能要求不高。</li></ul></li><li><strong>使用 tcmalloc</strong>： <ul><li>如果你的程序是高并发、高性能应用（如 Web 服务、分布式系统）。</li><li>如果你需要更快的内存分配和释放速度。</li></ul></li></ul><hr><h3 id="5.%20%E5%A6%82%E4%BD%95%E5%88%87%E6%8D%A2%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E5%99%A8" tabindex="-1">5. <strong>如何切换内存分配器</strong> <a class="header-anchor" href="#5. 如何切换内存分配器" aria-label="Permalink to &quot;5. **如何切换内存分配器**&quot;">​</a></h3><ul><li><strong>ptmalloc</strong>：默认内置于 glibc，无需额外配置。</li><li><strong>tcmalloc</strong>：需要单独安装并链接：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libgoogle-perftools-dev</span></span></code></pre></div>编译时链接：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">g++</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app.cpp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -ltcmalloc</span></span></code></pre></div></li></ul><p>通过了解两者的特点和适用场景，可以根据需求选择合适的内存分配器。</p></blockquote><h2 id="AVL%E6%A0%91%E4%B8%8EB%E6%A0%91%E7%9A%84%E5%AF%B9%E6%AF%94%EF%BC%9A" tabindex="-1">AVL树与B树的对比： <a class="header-anchor" href="#AVL树与B树的对比：" aria-label="Permalink to &quot;AVL树与B树的对比：&quot;">​</a></h2><p><img src="'+C+'" alt="image-20250513094943122"></p><ul><li>AVL树是二叉平衡树，每个节点最多两个子节点。</li><li>AVL树层数较高（例如<strong>2000万数据需要25层</strong>），磁盘IO次数多。-- log(2) 2000w</li><li>B树通过增加每个节点的子节点数量（M阶）降低了树的高度。</li></ul><h2 id="B%E6%A0%91%E7%9A%84%E7%89%B9%E7%82%B9%EF%BC%9A" tabindex="-1">B树的特点： <a class="header-anchor" href="#B树的特点：" aria-label="Permalink to &quot;B树的特点：&quot;">​</a></h2><ul><li>B树是一种平衡树，<strong>所有叶子节点在同一层</strong>。</li><li><strong>每个节点可以存储多个键值（M阶B树，M一般为300-500）</strong>。 300/500 叉 平衡树</li><li>B树的层数较少（例如2000万数据，<strong>M=500时最多3层</strong>），因此磁盘IO次数少。</li></ul><blockquote><h2 id="m%E6%80%8E%E4%B9%88%E5%8F%96%3F" tabindex="-1">m怎么取? <a class="header-anchor" href="#m怎么取%3F" aria-label="Permalink to &quot;m怎么取?&quot;">​</a></h2><p>一次 磁盘io 读取的磁盘块内容, 刚好 存储在 b树的 一个节点中</p></blockquote><h2 id="%E6%89%80%E4%BB%A5%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8b%E6%A0%91%E5%81%9A%E8%AE%BE%E8%AE%A1%E7%A3%81%E7%9B%98io%3F" tabindex="-1">所以为什么用b树做设计磁盘io? <a class="header-anchor" href="#所以为什么用b树做设计磁盘io%3F" aria-label="Permalink to &quot;所以为什么用b树做设计磁盘io?&quot;">​</a></h2><p>因为 !! 花费 磁盘 io 次数 少!!</p><h2 id="%E6%95%B0%E6%8D%AE%E5%BA%93%20%E6%9F%A5%E8%AF%A2%E6%B5%81%E7%A8%8B" tabindex="-1">数据库 查询流程 <a class="header-anchor" href="#数据库 查询流程" aria-label="Permalink to &quot;数据库 查询流程&quot;">​</a></h2><p>&lt;img src=&quot;./1-数据库笔记.assets/image-20250513095206410.png&quot; alt=&quot;image-20250513095206410&quot; style=&quot;zoom:150%;&quot; /&gt;</p><p><img src="'+b+`" alt="image-20250513110839483"></p><h2 id="B%E6%A0%91%E7%9A%84data%E8%8A%82%E7%82%B9%E4%B8%AD%E5%AD%98%E5%82%A8%E7%9A%84%E6%98%AF%E6%95%B0%E6%8D%AE%E6%9C%AC%E8%BA%AB%E8%BF%98%E6%98%AF%E7%A3%81%E7%9B%98%E5%9C%B0%E5%9D%80%EF%BC%9F" tabindex="-1">B树的data节点中存储的是数据本身还是磁盘地址？ <a class="header-anchor" href="#B树的data节点中存储的是数据本身还是磁盘地址？" aria-label="Permalink to &quot;B树的data节点中存储的是数据本身还是磁盘地址？&quot;">​</a></h2><ul><li>取决于存储引擎： <ul><li><strong>MyISAM</strong>：索引和数据分开存储，B树节点存储的是数据在磁盘上的地址。</li><li><strong>InnoDB</strong>：索引和数据存储在一起，B树节点存储的是数据本身。</li></ul></li></ul><h2 id="B%E6%A0%91%E7%9A%84%E6%90%9C%E7%B4%A2%E8%BF%87%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84%EF%BC%9F" tabindex="-1">B树的搜索过程是怎样的？ <a class="header-anchor" href="#B树的搜索过程是怎样的？" aria-label="Permalink to &quot;B树的搜索过程是怎样的？&quot;">​</a></h2><blockquote><p>对于每一个 节点</p><p>因为 节点内 是 有序, 所以使用 二分查找,</p></blockquote><ul><li><h3 id="%E4%BB%8E%E6%A0%B9%E8%8A%82%E7%82%B9%E5%BC%80%E5%A7%8B%EF%BC%8C%E9%80%9A%E8%BF%87%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E6%89%BE%E5%88%B0%E7%9B%AE%E6%A0%87%E5%80%BC%E6%89%80%E5%9C%A8%E7%9A%84%E8%8C%83%E5%9B%B4%E3%80%82" tabindex="-1">从根节点开始，通过<strong>二分搜索</strong>找到目标值<strong>所在的范围</strong>。 <a class="header-anchor" href="#从根节点开始，通过二分搜索找到目标值所在的范围。" aria-label="Permalink to &quot;从根节点开始，通过**二分搜索**找到目标值**所在的范围**。&quot;">​</a></h3></li><li><p>根据指针<strong>跳转到子节点</strong>，重复二分搜索，直到找到目标值。</p></li><li><h3 id="%E8%8A%82%E7%82%B9%E5%86%85%20%E7%9A%84%20%E6%90%9C%E7%B4%A2%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%BA%20O(log%E2%82%82N)%E3%80%82" tabindex="-1">节点内 的 搜索的时间复杂度为 <code>O(log₂N)</code>。 <a class="header-anchor" href="#节点内 的 搜索的时间复杂度为 O(log₂N)。" aria-label="Permalink to &quot;节点内 的 搜索的时间复杂度为 \`O(log₂N)\`。&quot;">​</a></h3></li></ul><blockquote><h3 id="avl%20%E4%B9%9F%E6%98%AF%20O(log%E2%82%82N)%2C%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E8%A6%81%E7%94%A8b%E6%A0%91%3F" tabindex="-1"><strong>avl 也是 O(log₂N),为什么还要用b树?</strong> <a class="header-anchor" href="#avl 也是 O(log₂N)%2C为什么还要用b树%3F" aria-label="Permalink to &quot;**avl 也是 O(log₂N),为什么还要用b树?**&quot;">​</a></h3><h3 id="%E5%B0%B1%E6%98%AF%E5%9B%A0%E4%B8%BA%20%E7%A3%81%E7%9B%98io%20%E6%AC%A1%E6%95%B0%20%E8%A2%AB%E5%A4%A7%E5%A4%A7%E4%BC%98%E5%8C%96%20%E4%BA%86!!" tabindex="-1">就是因为 <strong>磁盘io 次数 被大大优化</strong> 了!! <a class="header-anchor" href="#就是因为 磁盘io 次数 被大大优化 了!!" aria-label="Permalink to &quot;就是因为 **磁盘io 次数 被大大优化** 了!!&quot;">​</a></h3></blockquote><h2 id="%E7%B4%A2%E5%BC%95%E5%8D%A0%E7%94%A8%E7%A9%BA%E9%97%B4%E9%97%AE%E9%A2%98-%E8%A1%A5%E5%85%85" tabindex="-1">索引占用空间问题-补充 <a class="header-anchor" href="#索引占用空间问题-补充" aria-label="Permalink to &quot;索引占用空间问题-补充&quot;">​</a></h2><blockquote><h2 id="%E7%B4%A2%E5%BC%95%20%E9%83%BD%E4%BC%9A%20%E5%AD%98%E5%82%A8%20%E6%BA%90%E6%95%B0%E6%8D%AE%E7%9A%84%20%E4%B8%80%E8%A1%8C%E5%90%97%3F" tabindex="-1"><em>索引 都会 存储 源数据的 一行吗?</em> <a class="header-anchor" href="#索引 都会 存储 源数据的 一行吗%3F" aria-label="Permalink to &quot;*索引 都会 存储 源数据的 一行吗?*&quot;">​</a></h2><h3 id="1.%20MyISAM%20%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E" tabindex="-1"><strong>1. MyISAM 存储引擎</strong> <a class="header-anchor" href="#1. MyISAM 存储引擎" aria-label="Permalink to &quot;**1. MyISAM 存储引擎**&quot;">​</a></h3><ul><li><strong>索引和数据是分开存储的</strong>。</li><li><h3 id="%E7%B4%A2%E5%BC%95%E5%AD%98%E5%82%A8%E7%9A%84%E6%98%AF%E6%95%B0%E6%8D%AE%E5%9C%A8%E7%A3%81%E7%9B%98%E4%B8%8A%E7%9A%84%E5%9C%B0%E5%9D%80%EF%BC%88%E6%8C%87%E9%92%88%EF%BC%89%E3%80%82" tabindex="-1">索引存储的是数据<strong>在磁盘上的地址（指针）</strong>。 <a class="header-anchor" href="#索引存储的是数据在磁盘上的地址（指针）。" aria-label="Permalink to &quot;索引存储的是数据**在磁盘上的地址（指针）**。&quot;">​</a></h3></li><li><h3 id="%E5%BD%93%E9%80%9A%E8%BF%87%E7%B4%A2%E5%BC%95%E6%89%BE%E5%88%B0%E7%9B%AE%E6%A0%87%E5%80%BC%E5%90%8E%EF%BC%8C%E8%BF%98%E9%9C%80%E8%A6%81%E9%80%9A%E8%BF%87%E6%8C%87%E9%92%88%E5%8E%BB%E7%A3%81%E7%9B%98%E8%AF%BB%E5%8F%96%E5%AF%B9%E5%BA%94%E7%9A%84%E6%95%B0%E6%8D%AE%E8%A1%8C%E3%80%82" tabindex="-1">当通过索引找到目标值后，<strong>还需要通过指针去磁盘读取</strong>对应的数据行。 <a class="header-anchor" href="#当通过索引找到目标值后，还需要通过指针去磁盘读取对应的数据行。" aria-label="Permalink to &quot;当通过索引找到目标值后，**还需要通过指针去磁盘读取**对应的数据行。&quot;">​</a></h3></li></ul><h3 id="2.%20InnoDB%20%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E" tabindex="-1"><strong>2. InnoDB 存储引擎</strong> <a class="header-anchor" href="#2. InnoDB 存储引擎" aria-label="Permalink to &quot;**2. InnoDB 存储引擎**&quot;">​</a></h3><ul><li><p><strong>主键索引（聚集索引）和数据存储在一起</strong>。</p><ul><li><h3 id="%E4%B8%BB%E9%94%AE%E7%B4%A2%E5%BC%95%E7%9A%84%E6%AF%8F%E4%B8%AA%E8%8A%82%E7%82%B9%E5%AD%98%E5%82%A8%E7%9A%84%E6%98%AF%E6%95%B4%E8%A1%8C%E6%95%B0%E6%8D%AE%E3%80%82" tabindex="-1"><strong>主键索引的</strong>每个节点存储的是<strong>整行数据</strong>。 <a class="header-anchor" href="#主键索引的每个节点存储的是整行数据。" aria-label="Permalink to &quot;**主键索引的**每个节点存储的是**整行数据**。&quot;">​</a></h3></li></ul></li><li><p><strong>辅助索引（非聚集索引）存储的是主键值</strong>。</p><ul><li><h3 id="%E9%80%9A%E8%BF%87%E8%BE%85%E5%8A%A9%E7%B4%A2%E5%BC%95%E6%89%BE%E5%88%B0%E4%B8%BB%E9%94%AE%E5%80%BC%E5%90%8E%EF%BC%8C%E5%86%8D%E9%80%9A%E8%BF%87%E4%B8%BB%E9%94%AE%E7%B4%A2%E5%BC%95%E5%AE%9A%E4%BD%8D%E5%88%B0%E6%95%B4%E8%A1%8C%E6%95%B0%E6%8D%AE%E3%80%82" tabindex="-1">通过<strong>辅助索引</strong>找到主键值后，<strong>再通过主键索引定位到整行数据</strong>。 <a class="header-anchor" href="#通过辅助索引找到主键值后，再通过主键索引定位到整行数据。" aria-label="Permalink to &quot;通过**辅助索引**找到主键值后，**再通过主键索引定位到整行数据**。&quot;">​</a></h3></li><li><p>引出了 <a href="##InnoDB存储引擎的索引结构">InnoDB存储引擎的索引结构</a></p></li></ul></li></ul><hr><h3 id="%E6%80%BB%E7%BB%93-7" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结-7" aria-label="Permalink to &quot;**总结**&quot;">​</a></h3><ul><li><strong>MyISAM</strong>：索引存储的是数据的磁盘地址。</li><li><strong>InnoDB</strong>： <ul><li>主键索引存储整行数据。</li><li>辅助索引存储主键值，通过主键索引再找到整行数据。</li></ul></li></ul></blockquote><h1 id="b%2B%E6%A0%91%E7%B4%A2%E5%BC%95%E8%AF%A6%E8%A7%A3" tabindex="-1">b+树索引详解 <a class="header-anchor" href="#b%2B树索引详解" aria-label="Permalink to &quot;b+树索引详解&quot;">​</a></h1><h2 id="B%2B%E6%A0%91%E9%93%BE%E8%A1%A8" tabindex="-1">B+树链表 <a class="header-anchor" href="#B%2B树链表" aria-label="Permalink to &quot;B+树链表&quot;">​</a></h2><blockquote><p>是的，B+ 树的叶子节点整体是通过链表连接起来的，形成一个<strong>有序链表</strong>。以下是具体说明：</p><h3 id="1.%20%E8%8A%82%E7%82%B9%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E6%98%AF%E4%B8%80%E4%B8%AA%E9%93%BE%E8%A1%A8" tabindex="-1">1. <strong>节点中的数据是一个链表</strong> <a class="header-anchor" href="#1. 节点中的数据是一个链表" aria-label="Permalink to &quot;1. **节点中的数据是一个链表**&quot;">​</a></h3><ul><li>在 B+ 树中，每个节点（无论是非叶子节点还是叶子节点）内部的数据（索引值）是有序排列的。</li><li>这些数据通常可以看作是一个数组或链表，便于快速查找和定位。</li></ul><h3 id="2.%20%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E6%95%B4%E4%BD%93%E8%BF%9E%E6%88%90%E9%93%BE%E8%A1%A8" tabindex="-1">2. <strong>叶子节点整体连成链表</strong> <a class="header-anchor" href="#2. 叶子节点整体连成链表" aria-label="Permalink to &quot;2. **叶子节点整体连成链表**&quot;">​</a></h3><ul><li>B+ 树的叶子节点之间通过指针连接，形成一个<strong>有序链表</strong>。</li><li>这个链表的顺序与索引值的大小顺序一致，从最小到最大。</li><li>这种设计的好处是： <ul><li><strong>范围查询更高效</strong>：可以直接从链表的起点开始，顺序遍历到终点，避免了回溯或复杂的树结构遍历。</li><li><strong>整表扫描更方便</strong>：直接遍历叶子节点的链表即可完成，而不需要像 B 树那样遍历整个树结构。</li></ul></li></ul><h3 id="3.%20%E7%A4%BA%E6%84%8F%E5%9B%BE" tabindex="-1">3. <strong>示意图</strong> <a class="header-anchor" href="#3. 示意图" aria-label="Permalink to &quot;3. **示意图**&quot;">​</a></h3><p>假设有一棵简单的 B+ 树：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>非叶子节点：</span></span>
<span class="line"><span>       [10 | 20]</span></span>
<span class="line"><span>      /    |    \\</span></span>
<span class="line"><span>叶子节点：</span></span>
<span class="line"><span>[1, 5, 8] -&gt; [10, 15, 18] -&gt; [20, 25, 30]</span></span></code></pre></div><ul><li>非叶子节点只存储索引值 <code>[10, 20]</code>，用于指导搜索路径。</li><li>叶子节点存储所有的索引值和对应的数据，并通过链表连接起来（<code>-&gt;</code> 表示链表指针）。</li></ul></blockquote><h2 id="%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E6%8B%A9%20B%2B%20%E6%A0%91%E8%80%8C%E4%B8%8D%E6%98%AF%20B%20%E6%A0%91%EF%BC%9F" tabindex="-1">为什么选择 B+ 树而不是 B 树？ <a class="header-anchor" href="#为什么选择 B%2B 树而不是 B 树？" aria-label="Permalink to &quot;为什么选择 B+ 树而不是 B 树？&quot;">​</a></h2><ol><li><h3 id="%E6%95%B0%E6%8D%AE%E5%88%86%E5%B8%83%E4%B8%8E%E6%90%9C%E7%B4%A2%E6%95%88%E7%8E%87%EF%BC%9A" tabindex="-1"><strong>数据分布与搜索效率</strong>： <a class="header-anchor" href="#数据分布与搜索效率：" aria-label="Permalink to &quot;**数据分布与搜索效率**：&quot;">​</a></h3><ul><li>在 B 树中，数据（索引值和数据）分布在<strong>所有节点上</strong>（<strong>包括非叶子节点和叶子节点</strong>）。这<strong>导致离根节点越近的数据搜索效率更高，而离根节点越远的数据搜索效率较低</strong>，<strong>磁盘 I/O 次数不平均</strong>。</li><li>B+ 树优化了这一点，所有数据（索引值和对应的数据）都存储在叶子节点上，非叶子节点只存储索引值（键）。这样，每次搜索都需要访问叶子节点，搜索时间更加平均。</li></ul></li><li><h3 id="%E8%8A%82%E7%82%B9%E5%AD%98%E5%82%A8%E6%95%88%E7%8E%87%EF%BC%9A" tabindex="-1"><strong>节点存储效率</strong>： <a class="header-anchor" href="#节点存储效率：" aria-label="Permalink to &quot;**节点存储效率**：&quot;">​</a></h3><ul><li>B 树的<strong>每个节点存储索引值和数据</strong>，因此在<strong>相同大小的节点中，B 树能存储的索引值较少</strong>。</li><li>B+ 树的非叶子节点只存储索引值，因此每个节点可以存储更多的索引值。这使得 B+ 树的高度更低，减少了磁盘 I/O 次数，从而提高了搜索效率。</li></ul></li><li><h3 id="%E8%8C%83%E5%9B%B4%E6%9F%A5%E8%AF%A2%E4%B8%8E%E6%95%B4%E8%A1%A8%E9%81%8D%E5%8E%86%EF%BC%9A" tabindex="-1"><strong>范围查询与整表遍历</strong>： <a class="header-anchor" href="#范围查询与整表遍历：" aria-label="Permalink to &quot;**范围查询与整表遍历**：&quot;">​</a></h3><ul><li>B 树在进行范围查询时，<strong>需要遍历多个子树</strong>，操作复杂且效率较低。---- <strong>遍历 数组,链表, 比树 简单的多!!</strong></li><li>B+ 树的<strong>叶子节点通过链表连接，形成一个有序链表</strong>。范围查询或整表遍历时，只需遍历叶子节点的链表即可，操作简单且高效。</li></ul></li></ol><h2 id="B%2B%20%E6%A0%91%E7%9A%84%E4%BC%98%E5%8A%BF%E6%80%BB%E7%BB%93" tabindex="-1">B+ 树的优势总结 <a class="header-anchor" href="#B%2B 树的优势总结" aria-label="Permalink to &quot;B+ 树的优势总结&quot;">​</a></h2><ul><li><strong>磁盘 I/O 更少</strong>：由于每个节点存储更多的索引值，树的高度更低，访问节点的次数减少。</li><li><strong>搜索时间更平均</strong>：所有数据都存储在叶子节点上，搜索路径固定。</li><li><strong>范围查询更高效</strong>：叶子节点形成有序链表，直接遍历链表即可完成范围查询或整表遍历。</li></ul><h2 id="%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%E4%B8%AD%E7%9A%84%E6%84%8F%E4%B9%89" tabindex="-1">实际应用中的意义 <a class="header-anchor" href="#实际应用中的意义" aria-label="Permalink to &quot;实际应用中的意义&quot;">​</a></h2><p>在 MySQL 中，B+ 树索引被广泛用于支持高效的查询操作，特别是范围查询（如 <code>WHERE age BETWEEN 18 AND 25</code>）和排序操作。相比之下，B 树在这些场景下的性能较差，因此 B+ 树成为更优的选择。</p><h2 id="%E7%A4%BA%E4%BE%8B%E5%9B%9E%E7%AD%94-%E7%B4%A2%E5%BC%95%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86" tabindex="-1">示例回答-索引底层原理 <a class="header-anchor" href="#示例回答-索引底层原理" aria-label="Permalink to &quot;示例回答-索引底层原理&quot;">​</a></h2><blockquote><h3 id="%E7%B4%A2%E5%BC%95%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86-1" tabindex="-1">索引的底层原理 <a class="header-anchor" href="#索引的底层原理-1" aria-label="Permalink to &quot;索引的底层原理&quot;">​</a></h3><p>当我们通过 <code>SELECT</code> 语句对一张表进行查询时，如果加了过滤条件（如 <code>WHERE</code> 子句），MySQL 会按照以下步骤处理：</p><ol><li><p><strong>检查是否有索引</strong></p><ul><li><strong>没有索引</strong>：直接进行整表扫描，效率较低。</li><li><strong>有索引</strong>：MySQL 会利用索引加速查询。</li></ul></li><li><p><strong>索引的加载与构建</strong></p><ul><li>如果有索引，操作系统会从磁盘上的索引文件中加载索引数据到内存中。</li><li>MySQL 使用 <strong>B+ 树</strong> 来构建索引。B+ 树是一种平衡树，搜索效率非常高。</li></ul></li><li><p><strong>为什么使用 B+ 树</strong></p><ul><li><strong>磁盘 I/O 对应性</strong>：B+ 树的每个节点刚好对应一次磁盘 I/O 操作，能够高效地利用磁盘读取性能。</li><li><strong>非叶子节点存储索引值（键）</strong>：非叶子节点只存储索引值（<code>k</code>），可以存储更多的索引值，减少树的高度，从而减少磁盘 I/O 次数。</li><li><strong>叶子节点存储数据</strong>：所有的索引值和对应的数据（<code>k</code> 和 <code>data</code>）都存储在叶子节点中，保证搜索路径固定，效率更平均。</li></ul></li><li><p><strong>搜索效率</strong></p><ul><li>B+ 树的时间复杂度为 <code>O(log n)</code>，通过二分搜索快速定位索引值。</li><li>由于树的高度较低，磁盘 I/O 次数最少，查询效率更高。</li></ul></li></ol></blockquote><h1 id="InnoDB%E7%9A%84%E4%B8%BB%E9%94%AE%E5%92%8C%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95%E6%A0%91" tabindex="-1">InnoDB的主键和二级索引树 <a class="header-anchor" href="#InnoDB的主键和二级索引树" aria-label="Permalink to &quot;InnoDB的主键和二级索引树&quot;">​</a></h1><h2 id="InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E7%9A%84%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84" tabindex="-1">InnoDB存储引擎的索引结构 <a class="header-anchor" href="#InnoDB存储引擎的索引结构" aria-label="Permalink to &quot;InnoDB存储引擎的索引结构&quot;">​</a></h2><ul><li>主键索引（Primary Key Index）：B+树结构，叶子节点存储的是整行数据。</li><li>二级索引（Secondary Index）：B+树结构，叶子节点存储的是索引字段的值和对应的主键值。</li></ul><h2 id="%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF-explain" tabindex="-1">索引的使用场景-explain <a class="header-anchor" href="#索引的使用场景-explain" aria-label="Permalink to &quot;索引的使用场景-explain&quot;">​</a></h2><blockquote><h3 id="name%20%E6%97%A0%E7%B4%A2%E5%BC%95" tabindex="-1">name 无索引 <a class="header-anchor" href="#name 无索引" aria-label="Permalink to &quot;name 无索引&quot;">​</a></h3><ul><li>等值查询（如<code>WHERE UID=5</code>）：直接通过<strong>主键索引或二级索引</strong>定位数据。 <ul><li>type 为 const</li></ul></li><li>范围查询（如<code>WHERE UID&lt;5</code>）：通过<strong>索引的有序链表</strong>快速定位范围内的数据。 <ul><li>type 为 range</li></ul></li><li>无索引 查询, 全表搜索</li></ul></blockquote><blockquote><h3 id="name%20%E6%9C%89%E7%B4%A2%E5%BC%95" tabindex="-1">name 有索引 <a class="header-anchor" href="#name 有索引" aria-label="Permalink to &quot;name 有索引&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;zhang san&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;zhang san&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;zhang san&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 回表,  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 数据不够 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span></span></code></pre></div><h3 id="%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%20%E9%9C%80%E8%A6%81%E5%9B%9E%E8%A1%A8" tabindex="-1">最后一个 <strong>需要回表</strong> <a class="header-anchor" href="#最后一个 需要回表" aria-label="Permalink to &quot;最后一个 **需要回表**&quot;">​</a></h3></blockquote><h2 id="%E5%9B%9E%E8%A1%A8%E7%9A%84%E6%A6%82%E5%BF%B5-explain" tabindex="-1">回表的概念-explain <a class="header-anchor" href="#回表的概念-explain" aria-label="Permalink to &quot;回表的概念-explain&quot;">​</a></h2><ul><li>当二级索引无法满足查询所需的所有字段时，需要通过二级索引找到主键值，再<strong>回到主键索引树中获取完整数据</strong>。</li></ul><blockquote><h3 id="explain--%E6%B3%A8%E6%84%8F%20extra%E7%9A%84%E5%80%BC" tabindex="-1">explain--注意 extra的值 <a class="header-anchor" href="#explain--注意 extra的值" aria-label="Permalink to &quot;explain--注意 extra的值&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;zhang san&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----+-------------+---------+------------+------+---------------+---------+---------+-------+------+----------+-------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| id | select_type | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   | partitions | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | possible_keys | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     | key_len | ref   | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | filtered | Extra       |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----+-------------+---------+------------+------+---------------+---------+---------+-------+------+----------+-------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SIMPLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      | student | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       | ref  | nameidx       | nameidx | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">152</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     | const |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----+-------------+---------+------------+------+---------------+---------+---------+-------+------+----------+-------------+</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> uid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;zhang san&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----+-------------+---------+------------+------+---------------+---------+---------+-------+------+----------+-------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| id | select_type | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   | partitions | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | possible_keys | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     | key_len | ref   | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | filtered | Extra       |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----+-------------+---------+------------+------+---------------+---------+---------+-------+------+----------+-------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SIMPLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      | student | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       | ref  | nameidx       | nameidx | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">152</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     | const |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----+-------------+---------+------------+------+---------------+---------+---------+-------+------+----------+-------------+</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;zhang san&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----+-------------+---------+------------+------+---------------+---------+---------+-------+------+----------+-------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| id | select_type | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   | partitions | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | possible_keys | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     | key_len | ref   | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | filtered | Extra |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----+-------------+---------+------------+------+---------------+---------+---------+-------+------+----------+-------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SIMPLE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      | student | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       | ref  | nameidx       | nameidx | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">152</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     | const |    </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----+-------------+---------+------------+------+---------------+---------+---------+-------+------+----------+-------+</span></span></code></pre></div></blockquote><p><img src="`+D+'" alt="image-20250513140347247"></p><h2 id="%E4%B8%80%E4%B8%AA%E4%BC%98%E5%8C%96%E6%A1%88%E4%BE%8B-%E8%B7%9F%E7%9D%80%E6%80%9D%E7%BB%B4-%E9%87%8D%E7%82%B9" tabindex="-1">一个优化案例-跟着思维-<strong>重点</strong> <a class="header-anchor" href="#一个优化案例-跟着思维-重点" aria-label="Permalink to &quot;一个优化案例-跟着思维-**重点**&quot;">​</a></h2><blockquote><p>在 name 有 索引的基础上</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">explain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> order by</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>出现</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filesort</span></span></code></pre></div><p>这是 必须优化的</p><h3 id="1.age%E5%8A%A0%E7%B4%A2%E5%BC%95%2C%20%E5%86%8D%E7%9C%8B" tabindex="-1">1.age加索引, 再看 <a class="header-anchor" href="#1.age加索引%2C 再看" aria-label="Permalink to &quot;1.age加索引, 再看&quot;">​</a></h3><p>没有效果</p><p>能命中索引, 但是 没去掉 <code>Using filesort</code></p><h3 id="2.age%2Bname%20%E5%A4%9A%E5%88%97%E7%B4%A2%E5%BC%95" tabindex="-1">2.age+name 多列索引 <a class="header-anchor" href="#2.age%2Bname 多列索引" aria-label="Permalink to &quot;2.age+name 多列索引&quot;">​</a></h3><p>先删除之前的, 再创建</p><h3 id="%E6%AD%A4%E6%97%B6%20%E6%88%90%E5%8A%9F%E4%BA%86%2C%20%E4%BC%98%E5%8C%96%E6%88%90%E5%8A%9F" tabindex="-1">此时 成功了, 优化成功 <a class="header-anchor" href="#此时 成功了%2C 优化成功" aria-label="Permalink to &quot;此时 成功了, 优化成功&quot;">​</a></h3></blockquote><h2 id="%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96-%E9%87%8D%E7%82%B9" tabindex="-1">索引优化-<strong>重点</strong> <a class="header-anchor" href="#索引优化-重点" aria-label="Permalink to &quot;索引优化-**重点**&quot;">​</a></h2><ul><li><p>使用<code>EXPLAIN</code>分析SQL执行计划，判断</p><h3 id="%E6%98%AF%E5%90%A6%E5%91%BD%E4%B8%AD%E7%B4%A2%E5%BC%95%E3%80%81" tabindex="-1">是否命中索引、 <a class="header-anchor" href="#是否命中索引、" aria-label="Permalink to &quot;是否命中索引、&quot;">​</a></h3><h3 id="%E6%98%AF%E5%90%A6%E9%9C%80%E8%A6%81%E5%9B%9E%E8%A1%A8%E3%80%82" tabindex="-1">是否需要回表。 <a class="header-anchor" href="#是否需要回表。" aria-label="Permalink to &quot;是否需要回表。&quot;">​</a></h3></li><li><h3 id="%E9%81%BF%E5%85%8DSELECT%20*%EF%BC%8C" tabindex="-1">避免<code>SELECT *</code>， <a class="header-anchor" href="#避免SELECT *，" aria-label="Permalink to &quot;避免`SELECT *`，&quot;">​</a></h3><p>明确选择所需字段，<strong>减少不必要的回表操作</strong>。</p></li><li><h3 id="%E9%92%88%E5%AF%B9%E6%8E%92%E5%BA%8F%E5%92%8C%E8%BF%87%E6%BB%A4%E6%9D%A1%E4%BB%B6%EF%BC%8C%E5%88%9B%E5%BB%BA%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95" tabindex="-1">针对排序和过滤条件，创建联合索引 <a class="header-anchor" href="#针对排序和过滤条件，创建联合索引" aria-label="Permalink to &quot;针对排序和过滤条件，创建联合索引&quot;">​</a></h3><p>（如<code>CREATE INDEX idx ON table(age, name)</code>），以提高查询效率并避免<code>Using filesort</code>。</p></li></ul><h2 id="%E4%BB%A5%E4%B8%8A%2C%20%E5%B0%B1%E6%98%AF%E4%BB%8E%20b%2B%E6%A0%91%E5%8E%9F%E7%90%86%20%E8%BF%9B%E8%A1%8C%E7%90%86%E8%A7%A3%E5%92%8C%E4%BC%98%E5%8C%96!!" tabindex="-1">以上, 就是从 <strong>b+树原理 进行理解和优化</strong>!! <a class="header-anchor" href="#以上%2C 就是从 b%2B树原理 进行理解和优化!!" aria-label="Permalink to &quot;以上, 就是从 **b+树原理 进行理解和优化**!!&quot;">​</a></h2><h1 id="%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95%E5%92%8C%E9%9D%9E%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95" tabindex="-1">聚集索引和非聚集索引 <a class="header-anchor" href="#聚集索引和非聚集索引" aria-label="Permalink to &quot;聚集索引和非聚集索引&quot;">​</a></h1><p>好的，这段内容主要讲解了 MyISAM 和 InnoDB 存储引擎在主键索引树和辅助索引树（即二级索引树）上的存储方式和实现原理的区别。以下是内容的要点总结：</p><hr><h2 id="MyISAM%20%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E" tabindex="-1">MyISAM 存储引擎 <a class="header-anchor" href="#MyISAM 存储引擎" aria-label="Permalink to &quot;MyISAM 存储引擎&quot;">​</a></h2><ul><li><h3 id="%E4%B8%BB%E9%94%AE%E7%B4%A2%E5%BC%95%E6%A0%91%EF%BC%9A" tabindex="-1"><strong>主键索引树</strong>： <a class="header-anchor" href="#主键索引树：" aria-label="Permalink to &quot;**主键索引树**：&quot;">​</a></h3><ul><li>索引树中的键值（<code>k</code>）存储的是主键值（如 <code>UID</code>）。</li><li>索引树中的数据部分存储的是<strong>数据的物理地址</strong>。</li><li>数据和索引分开存储，数据存储在数据文件中，索引存储在索引文件中。</li><li><strong>特点</strong>：主键值不能重复。</li></ul></li><li><h3 id="%E8%BE%85%E5%8A%A9%E7%B4%A2%E5%BC%95%E6%A0%91%EF%BC%9A" tabindex="-1"><strong>辅助索引树</strong>： <a class="header-anchor" href="#辅助索引树：" aria-label="Permalink to &quot;**辅助索引树**：&quot;">​</a></h3><ul><li>索引树中的键值（<code>k</code>）存储的是辅助索引值（如 <code>name</code>）。</li><li>索引树中的数据部分同样存储的是数据的物理地址。</li><li><strong>特点</strong>：辅助索引值可以<strong>重复</strong>。</li></ul></li><li><blockquote><h2 id="%E6%80%BB%E7%BB%93%EF%BC%9A-1" tabindex="-1"><strong>总结</strong>： <a class="header-anchor" href="#总结：-1" aria-label="Permalink to &quot;**总结**：&quot;">​</a></h2><ul><li><h3 id="%E4%B8%BB%E9%94%AE%E7%B4%A2%E5%BC%95%E6%A0%91%E5%92%8C%E8%BE%85%E5%8A%A9%E7%B4%A2%E5%BC%95%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E5%AE%8C%E5%85%A8%E7%9B%B8%E5%90%8C%EF%BC%8C%E5%94%AF%E4%B8%80%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%B8%BB%E9%94%AE%E5%80%BC%E4%B8%8D%E8%83%BD%E9%87%8D%E5%A4%8D%EF%BC%8C%E8%80%8C%E8%BE%85%E5%8A%A9%E7%B4%A2%E5%BC%95%E5%80%BC%E5%8F%AF%E4%BB%A5%E9%87%8D%E5%A4%8D%E3%80%82" tabindex="-1"><strong>主键索引树和辅助索引树的存储结构完全相同</strong>，<strong>唯一的区别</strong>是<strong>主键值不能重复</strong>，而辅<strong>助索引值可以重复</strong>。 <a class="header-anchor" href="#主键索引树和辅助索引树的存储结构完全相同，唯一的区别是主键值不能重复，而辅助索引值可以重复。" aria-label="Permalink to &quot;**主键索引树和辅助索引树的存储结构完全相同**，**唯一的区别**是**主键值不能重复**，而辅**助索引值可以重复**。&quot;">​</a></h3></li><li><h3 id="%E8%BF%99%E7%A7%8D%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84%E7%A7%B0%E4%B8%BA%20%E9%9D%9E%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95%EF%BC%8C%E5%9B%A0%E4%B8%BA%E7%B4%A2%E5%BC%95%E5%92%8C%E6%95%B0%E6%8D%AE%E6%98%AF%E5%88%86%E5%BC%80%E5%AD%98%E5%82%A8%E7%9A%84%E3%80%82" tabindex="-1">这种索引结构称为 <strong>非聚集索引</strong>，因为<strong>索引和数据是分开存</strong>储的。 <a class="header-anchor" href="#这种索引结构称为 非聚集索引，因为索引和数据是分开存储的。" aria-label="Permalink to &quot;这种索引结构称为 **非聚集索引**，因为**索引和数据是分开存**储的。&quot;">​</a></h3></li></ul></blockquote></li></ul><hr><h2 id="InnoDB%20%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E" tabindex="-1">InnoDB 存储引擎 <a class="header-anchor" href="#InnoDB 存储引擎" aria-label="Permalink to &quot;InnoDB 存储引擎&quot;">​</a></h2><ul><li><p><strong>主键索引树</strong>：</p><ul><li>索引树中的键值（<code>k</code>）存储的是主键值。</li><li>索引树中的数据部分存储的是完整的行数据。</li><li>数据和索引存储在同一个文件中。</li><li><strong>特点</strong>：主键索引树即数据存储结构，称为 <strong>聚集索引</strong>。</li></ul></li><li><p><strong>辅助索引树</strong>：</p><ul><li>索引树中的键值（<code>k</code>）存储的是辅助索引值。</li><li>索引树中的数据部分存储的是对应行的主键值。</li><li><strong>特点</strong>：查询辅助索引时，可能需要通过主键值回表查询完整数据。</li></ul></li><li><p><strong>总结</strong>：</p><ul><li>主键索引树和辅助索引树的存储结构不同。</li><li><blockquote><h3 id="%E4%B8%BB%E9%94%AE%E7%B4%A2%E5%BC%95%E6%A0%91%E6%98%AF%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95%EF%BC%8C%E8%BE%85%E5%8A%A9%E7%B4%A2%E5%BC%95%E6%A0%91%E6%98%AF%E9%9D%9E%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95%E3%80%82" tabindex="-1">主键索引树是<strong>聚集索引</strong>，辅助索引树是<strong>非聚集索引</strong>。 <a class="header-anchor" href="#主键索引树是聚集索引，辅助索引树是非聚集索引。" aria-label="Permalink to &quot;主键索引树是**聚集索引**，辅助索引树是**非聚集索引**。&quot;">​</a></h3></blockquote></li></ul></li></ul><hr><h2 id="%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95%20vs%20%E9%9D%9E%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95" tabindex="-1">聚集索引 vs 非聚集索引 <a class="header-anchor" href="#聚集索引 vs 非聚集索引" aria-label="Permalink to &quot;聚集索引 vs 非聚集索引&quot;">​</a></h2><ul><li><p><strong>聚集索引</strong>：</p><ul><li>数据和索引存储在一起。</li><li>主键索引树即数据存储结构。</li><li>例如：InnoDB 的主键索引树。</li></ul></li><li><p><strong>非聚集索引</strong>：</p><ul><li>数据和索引分开存储。</li><li>索引树中存储的是数据的物理地址或主键值。</li><li>例如：MyISAM 的主键索引树和辅助索引树，以及 InnoDB 的辅助索引树。</li></ul></li></ul><h1 id="%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95" tabindex="-1">哈希索引 <a class="header-anchor" href="#哈希索引" aria-label="Permalink to &quot;哈希索引&quot;">​</a></h1><p><img src="'+m+'" alt="image-20250513181235778"></p><h2 id="memory%E5%BC%95%E6%93%8E" tabindex="-1">memory引擎 <a class="header-anchor" href="#memory引擎" aria-label="Permalink to &quot;memory引擎&quot;">​</a></h2><p>使用的是 哈希索引</p><p>是基于 内存的 存储引擎</p><h2 id="%E6%B7%BB%E5%8A%A0%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95" tabindex="-1">添加哈希索引 <a class="header-anchor" href="#添加哈希索引" aria-label="Permalink to &quot;添加哈希索引&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> index</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nameidx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stedent(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> index</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nameidx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stedent(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> btree;</span></span></code></pre></div><h2 id="%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E7%B4%A2%E5%BC%95" tabindex="-1">查看所有索引 <a class="header-anchor" href="#查看所有索引" aria-label="Permalink to &quot;查看所有索引&quot;">​</a></h2><blockquote><h3 id="%E8%BF%99%E4%B8%AA%20%E6%98%BE%E7%A4%BA%20%E4%B8%8D%E5%87%86%E7%A1%AE" tabindex="-1">这个 显示 不准确 <a class="header-anchor" href="#这个 显示 不准确" aria-label="Permalink to &quot;这个 显示 不准确&quot;">​</a></h3></blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student\\G</span></span></code></pre></div><blockquote><h3 id="%E8%BF%99%E4%B8%AA%E5%87%86%E7%A1%AE" tabindex="-1">这个准确 <a class="header-anchor" href="#这个准确" aria-label="Permalink to &quot;这个准确&quot;">​</a></h3></blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show indexes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student;</span></span></code></pre></div><h2 id="%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95%E7%9A%84%E5%8E%9F%E7%90%86" tabindex="-1">哈希索引的原理 <a class="header-anchor" href="#哈希索引的原理" aria-label="Permalink to &quot;哈希索引的原理&quot;">​</a></h2><ul><li><p><strong>数据结构</strong>：哈希索引基于 <strong>链式哈希表</strong> 实现。</p></li><li><p><strong>构建过程</strong>：</p><ol><li>使用哈希函数对索引字段的值（如 <code>name</code>）计算哈希值。</li><li>根据哈希值将数据分配到不同的桶（<code>bucket</code>）中。</li><li>如果多个值映射到同一个桶（哈希冲突），则通过链表解决冲突。</li></ol></li><li><p><strong>特点</strong>：</p><ul><li>查询效率高，增删查的时间复杂度为 <strong>O(1)</strong>。</li><li><h3 id="%E5%93%88%E5%B8%8C%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E6%98%AF%E6%97%A0%E5%BA%8F%E7%9A%84%E3%80%82" tabindex="-1">哈希表中的数据<strong>是无序的</strong>。 <a class="header-anchor" href="#哈希表中的数据是无序的。" aria-label="Permalink to &quot;哈希表中的数据**是无序的**。&quot;">​</a></h3></li></ul></li></ul><hr><h2 id="%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95%E7%9A%84%E5%B1%80%E9%99%90%E6%80%A7--%E9%87%8D%E7%82%B9" tabindex="-1">哈希索引的局限性--<strong>重点</strong> <a class="header-anchor" href="#哈希索引的局限性--重点" aria-label="Permalink to &quot;哈希索引的局限性--**重点**&quot;">​</a></h2><ul><li><h3 id="%E6%97%A0%E5%BA%8F%E6%80%A7%EF%BC%9A" tabindex="-1"><strong>无序性</strong>： <a class="header-anchor" href="#无序性：" aria-label="Permalink to &quot;**无序性**：&quot;">​</a></h3><ul><li><h3 id="%E5%93%88%E5%B8%8C%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E6%B2%A1%E6%9C%89%E9%A1%BA%E5%BA%8F%EF%BC%8C%E6%97%A0%E6%B3%95%E6%94%AF%E6%8C%81%E8%8C%83%E5%9B%B4%E6%9F%A5%E8%AF%A2%E3%80%81%E5%89%8D%E7%BC%80%E6%9F%A5%E8%AF%A2%E3%80%81**%E6%8E%92%E5%BA%8F%EF%BC%88ORDER%20BY%EF%BC%89**%E7%AD%89%E6%93%8D%E4%BD%9C%E3%80%82" tabindex="-1">哈希表中的数据<strong>没有顺序，无法支持范围查询</strong>、<strong>前缀查询</strong>、**排序（<code>ORDER BY</code>）**等操作。 <a class="header-anchor" href="#哈希表中的数据没有顺序，无法支持范围查询、前缀查询、**排序（ORDER BY）**等操作。" aria-label="Permalink to &quot;哈希表中的数据**没有顺序，无法支持范围查询**、**前缀查询**、**排序（`ORDER BY`）**等操作。&quot;">​</a></h3></li><li><h3 id="%E5%8F%AA%E8%83%BD%E6%94%AF%E6%8C%81%20%E7%AD%89%E5%80%BC%E6%9F%A5%E8%AF%A2%EF%BC%88%E5%A6%82%20%3D%EF%BC%89%E3%80%82" tabindex="-1">只能支持 <strong>等值查询</strong>（如 <code>=</code>）。 <a class="header-anchor" href="#只能支持 等值查询（如 %3D）。" aria-label="Permalink to &quot;只能支持 **等值查询**（如 `=`）。&quot;">​</a></h3></li></ul></li><li><h3 id="%E7%A3%81%E7%9B%98%20I%2FO%20%E9%97%AE%E9%A2%98%EF%BC%9A" tabindex="-1"><strong>磁盘 I/O 问题</strong>： <a class="header-anchor" href="#磁盘 I%2FO 问题：" aria-label="Permalink to &quot;**磁盘 I/O 问题**：&quot;">​</a></h3><ul><li>哈希索引无法减少磁盘 I/O 次数。</li><li>每个桶可能对应一次磁盘 I/O，导致效率低下。</li></ul></li><li><h3 id="%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF%E6%9C%89%E9%99%90%EF%BC%9A" tabindex="-1"><strong>适用场景有限</strong>： <a class="header-anchor" href="#适用场景有限：" aria-label="Permalink to &quot;**适用场景有限**：&quot;">​</a></h3><ul><li><h3 id="%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95%E9%80%82%E7%94%A8%E4%BA%8E%20%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%A6%82%20Memory%20%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E3%80%82" tabindex="-1">哈希索引适用于 <strong>内存中的数据</strong>，如 Memory 存储引擎。 <a class="header-anchor" href="#哈希索引适用于 内存中的数据，如 Memory 存储引擎。" aria-label="Permalink to &quot;哈希索引适用于 **内存中的数据**，如 Memory 存储引擎。&quot;">​</a></h3></li><li><h3 id="%E4%B8%8D%E9%80%82%E5%90%88%E9%9C%80%E8%A6%81%E6%8C%81%E4%B9%85%E5%8C%96%E5%88%B0%E7%A3%81%E7%9B%98%E7%9A%84%E6%95%B0%E6%8D%AE%E3%80%82" tabindex="-1"><strong>不适合需要持久化</strong>到磁盘的数据。 <a class="header-anchor" href="#不适合需要持久化到磁盘的数据。" aria-label="Permalink to &quot;**不适合需要持久化**到磁盘的数据。&quot;">​</a></h3></li></ul></li></ul><hr><h2 id="B%2B%E6%A0%91%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BC%98%E5%8A%BF--%E5%9B%9E%E9%A1%BE" tabindex="-1">B+树索引的优势--回顾 <a class="header-anchor" href="#B%2B树索引的优势--回顾" aria-label="Permalink to &quot;B+树索引的优势--回顾&quot;">​</a></h2><ul><li><p><strong>有序性</strong>：</p><ul><li>B+树索引在构建时会对数据进行排序。</li><li>支持范围查询、前缀查询、排序（<code>ORDER BY</code>）等操作。</li></ul></li><li><p><strong>磁盘 I/O 优化</strong>：</p><ul><li>B+树的节点可以存储多个索引值，减少磁盘 I/O 次数。</li><li>在千万级数据中，B+树的高度通常不超过 3 层，最多只需 3 次磁盘 I/O 即可完成查询。</li></ul></li><li><p><strong>适用场景广泛</strong>：</p><ul><li>B+树索引适用于需要持久化到磁盘的数据。</li><li>是 InnoDB 和 MyISAM 存储引擎的默认索引类型。</li></ul></li></ul><hr><h2 id="%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95%20vs%20B%2B%E6%A0%91%E7%B4%A2%E5%BC%95" tabindex="-1">哈希索引 vs B+树索引 <a class="header-anchor" href="#哈希索引 vs B%2B树索引" aria-label="Permalink to &quot;哈希索引 vs B+树索引&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>哈希索引</th><th>B+树索引</th></tr></thead><tbody><tr><td><strong>数据结构</strong></td><td>链式哈希表</td><td>B+树</td></tr><tr><td><strong>查询效率</strong></td><td>O(1)（仅限等值查询）</td><td>O(log n)</td></tr><tr><td><strong>支持的查询类型</strong></td><td>仅支持等值查询</td><td>支持等值查询、范围查询、前缀查询、排序等</td></tr><tr><td><strong>数据有序性</strong></td><td>无序</td><td>有序</td></tr><tr><td><strong>磁盘 I/O 优化</strong></td><td>不支持</td><td>支持</td></tr><tr><td><strong>适用场景</strong></td><td>内存中的数据</td><td>磁盘中的数据</td></tr></tbody></table><hr><h2 id="%E6%80%BB%E7%BB%93-8" tabindex="-1">总结 <a class="header-anchor" href="#总结-8" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li><p><strong>哈希索引</strong>：</p><ul><li>适用于内存中的数据，增删查效率高，但仅支持等值查询。</li><li>不适合需要持久化到磁盘的数据，也不支持范围查询、排序等操作。</li></ul></li><li><p><strong>B+树索引</strong>：</p><ul><li>是数据库中最常用的索引类型，支持多种查询类型，适合磁盘存储。</li><li>是 InnoDB 和 MyISAM 存储引擎的默认索引类型。</li></ul></li></ul><p>在面试中，如果被问到 B+树索引和哈希索引的区别，可以从 <strong>数据结构、查询效率、支持的查询类型、磁盘 I/O 优化、适用场景</strong> 等方面进行对比，重点突出 B+树索引的优势和通用性。</p><h1 id="InnoDB%E8%87%AA%E9%80%82%E5%BA%94%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95" tabindex="-1">InnoDB自适应哈希索引 <a class="header-anchor" href="#InnoDB自适应哈希索引" aria-label="Permalink to &quot;InnoDB自适应哈希索引&quot;">​</a></h1><h2 id="%E6%AD%A4%E5%93%88%E5%B8%8C%E9%9D%9E%E5%BD%BC%E5%93%88%E5%B8%8C" tabindex="-1">此哈希非彼哈希 <a class="header-anchor" href="#此哈希非彼哈希" aria-label="Permalink to &quot;此哈希非彼哈希&quot;">​</a></h2><p><img src="'+q+`" alt=""></p><hr><h2 id="%E8%87%AA%E9%80%82%E5%BA%94%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95%EF%BC%88AHI%EF%BC%89%E6%A6%82%E8%BF%B0" tabindex="-1">自适应哈希索引（AHI）概述 <a class="header-anchor" href="#自适应哈希索引（AHI）概述" aria-label="Permalink to &quot;自适应哈希索引（AHI）概述&quot;">​</a></h2><ol><li><p><strong>定义</strong>：</p><ul><li>自适应哈希索引是 <strong>InnoDB 存储引擎的一种优化机制</strong>，用于<strong>加速频繁访问的二级索引</strong>的查询。</li><li>它基于 B+ 树索引的内<strong>容动态生成哈希索引</strong>，<strong>主要用于等值查询</strong>。</li></ul></li><li><h3 id="%E8%A7%A6%E5%8F%91%E6%9D%A1%E4%BB%B6%EF%BC%9A" tabindex="-1"><strong>触发条件</strong>： <a class="header-anchor" href="#触发条件：" aria-label="Permalink to &quot;**触发条件**：&quot;">​</a></h3><ul><li><h3 id="%E5%BD%93%20InnoDB%20%E6%A3%80%E6%B5%8B%E5%88%B0%E6%9F%90%E4%B8%AA%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95%E8%A2%AB%E9%A2%91%E7%B9%81%E8%AE%BF%E9%97%AE%E6%97%B6%EF%BC%8C%E4%BC%9A%E8%87%AA%E5%8A%A8%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E4%B8%BA%E8%AF%A5%E7%B4%A2%E5%BC%95%E6%9E%84%E5%BB%BA%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95%E3%80%82" tabindex="-1">当 InnoDB 检测到某个<strong>二级索引被频繁访问</strong>时，会<strong>自动在内存中</strong>为该索引构建哈希索引。 <a class="header-anchor" href="#当 InnoDB 检测到某个二级索引被频繁访问时，会自动在内存中为该索引构建哈希索引。" aria-label="Permalink to &quot;当 InnoDB 检测到某个**二级索引被频繁访问**时，会**自动在内存中**为该索引构建哈希索引。&quot;">​</a></h3></li><li><h3 id="%E8%BF%99%E7%A7%8D%E4%BC%98%E5%8C%96%E6%97%A0%E9%9C%80%E6%89%8B%E5%8A%A8%E5%88%9B%E5%BB%BA%EF%BC%8C%E5%AE%8C%E5%85%A8%E7%94%B1%20InnoDB%20%E8%87%AA%E5%8A%A8%E7%AE%A1%E7%90%86%E3%80%82" tabindex="-1">这种优化无需手动创建，完全由 InnoDB 自动管理。 <a class="header-anchor" href="#这种优化无需手动创建，完全由 InnoDB 自动管理。" aria-label="Permalink to &quot;这种优化无需手动创建，完全由 InnoDB 自动管理。&quot;">​</a></h3></li></ul></li><li><p><strong>作用</strong>：</p><ul><li>减少查询路径：通过哈希索引直接定位数据指针，避免二级索引树和主键索引树的多次搜索。</li><li>提升查询效率：适用于等值查询场景，时间复杂度接近 O(1)。</li></ul></li></ol><hr><h2 id="%E7%90%86%E8%A7%A3%E8%BF%99%E4%B8%AA%E8%BF%87%E7%A8%8B-%E9%87%8D%E7%82%B9" tabindex="-1">理解这个过程-<strong>重点</strong> <a class="header-anchor" href="#理解这个过程-重点" aria-label="Permalink to &quot;理解这个过程-**重点**&quot;">​</a></h2><blockquote><ul><li><h3 id="%E6%9F%A5%E6%89%BE%E8%B7%AF%E5%BE%84%E4%BC%98%E5%8C%96%EF%BC%9A%E9%80%9A%E8%BF%87%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0%E7%9B%B4%E6%8E%A5%E5%AE%9A%E4%BD%8D%E5%88%B0%E6%A1%B6%EF%BC%8C%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E6%8E%A5%E8%BF%91%20O(1)%EF%BC%8C%E9%81%BF%E5%85%8D%E4%BA%86%20B%2B%20%E6%A0%91%E7%9A%84%E5%A4%9A%E5%B1%82%E8%8A%82%E7%82%B9%E6%9F%A5%E6%89%BE%EF%BC%88O(log(n))%EF%BC%89%E3%80%82" tabindex="-1"><strong>查找路径优化</strong>：通过哈希函数直接定位到桶，时间复杂度接近 <code>O(1)</code>，避免了 B+ 树的多层节点查找（<code>O(log(n))</code>）。 <a class="header-anchor" href="#查找路径优化：通过哈希函数直接定位到桶，时间复杂度接近 O(1)，避免了 B%2B 树的多层节点查找（O(log(n))）。" aria-label="Permalink to &quot;**查找路径优化**：通过哈希函数直接定位到桶，时间复杂度接近 \`O(1)\`，避免了 B+ 树的多层节点查找（\`O(log(n))\`）。&quot;">​</a></h3></li><li><h3 id="%E6%A1%B6%E5%86%85%E6%9F%A5%E6%89%BE%E4%BC%98%E5%8C%96%EF%BC%9A%E5%9C%A8%E6%A1%B6%E5%86%85%E6%9F%A5%E6%89%BE%E6%95%B0%E6%8D%AE%E9%80%9A%E5%B8%B8%E6%AF%94%E5%9C%A8%20B%2B%20%E6%A0%91%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E4%B8%AD%E6%9F%A5%E6%89%BE%E6%9B%B4%E5%BF%AB%EF%BC%8C%E5%B0%A4%E5%85%B6%E6%98%AF%E5%93%88%E5%B8%8C%E5%86%B2%E7%AA%81%E8%BE%83%E5%B0%91%E6%97%B6%EF%BC%8C%E9%81%8D%E5%8E%86%E9%93%BE%E8%A1%A8%E6%95%88%E7%8E%87%E9%AB%98%E4%BA%8E%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E7%9A%84%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E3%80%82" tabindex="-1"><strong>桶内查找优化</strong>：在桶内查找数据通常比在 B+ 树叶子节点中查找更快，尤其是哈希冲突较少时，遍历链表效率高于叶子节点的二分查找。 <a class="header-anchor" href="#桶内查找优化：在桶内查找数据通常比在 B%2B 树叶子节点中查找更快，尤其是哈希冲突较少时，遍历链表效率高于叶子节点的二分查找。" aria-label="Permalink to &quot;**桶内查找优化**：在桶内查找数据通常比在 B+ 树叶子节点中查找更快，尤其是哈希冲突较少时，遍历链表效率高于叶子节点的二分查找。&quot;">​</a></h3></li></ul><h2 id="%E6%B7%AE-%E8%AF%9D" tabindex="-1">淮-话 <a class="header-anchor" href="#淮-话" aria-label="Permalink to &quot;淮-话&quot;">​</a></h2><p>就是, 使用哈希 索引, 查桶 优化了, 在桶里的数据, 也可能优化 就 比 在b+树 查到叶子结点, 再在叶子结点里找, 快,</p><h2 id="%E4%BD%86%E6%98%AF" tabindex="-1"><strong>但是</strong> <a class="header-anchor" href="#但是" aria-label="Permalink to &quot;**但是**&quot;">​</a></h2><p><strong>并不一定</strong> 使用了 自适应哈希, 他就快!</p></blockquote><h2 id="%E8%87%AA%E9%80%82%E5%BA%94%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9" tabindex="-1">自适应哈希索引的优缺点 <a class="header-anchor" href="#自适应哈希索引的优缺点" aria-label="Permalink to &quot;自适应哈希索引的优缺点&quot;">​</a></h2><ol><li><p><strong>优点</strong>：</p><ul><li><strong>加速查询</strong>：在频繁使用的二级索引上，显著提升等值查询的性能。</li><li><strong>自动化</strong>：无需开发者手动干预，InnoDB 自动监测和创建。</li></ul></li><li><h3 id="%E7%BC%BA%E7%82%B9%EF%BC%9A" tabindex="-1"><strong>缺点</strong>： <a class="header-anchor" href="#缺点：" aria-label="Permalink to &quot;**缺点**：&quot;">​</a></h3><ul><li><strong>维护成本高</strong>：哈希索引的生成和维护会消耗额外的内存和 CPU 资源。</li><li><strong>并发问题</strong>：在高并发场景下，同一分区的锁竞争可能导致性能下降。</li><li><strong>场景限制</strong>：仅适用于等值查询，对范围查询无效。-无序</li></ul></li></ol><hr><h2 id="%E4%BC%98%E5%8C%96%E4%B8%8E%E9%85%8D%E7%BD%AE" tabindex="-1">优化与配置 <a class="header-anchor" href="#优化与配置" aria-label="Permalink to &quot;优化与配置&quot;">​</a></h2><ol><li><h3 id="%E5%88%86%E5%8C%BA%E6%9C%BA%E5%88%B6%EF%BC%9A" tabindex="-1"><strong>分区机制</strong>： <a class="header-anchor" href="#分区机制：" aria-label="Permalink to &quot;**分区机制**：&quot;">​</a></h3><ul><li>自适应哈希索引在 <strong>MySQL 5.7</strong> 版本后引入了<strong>分区机制</strong>，<strong>每个分区有独立的锁，减少锁竞争</strong>。</li><li><strong>默认分区数量为 8</strong>，可通过参数调整。</li></ul></li><li><p><strong>监控与关闭</strong>：</p><ul><li><p>使用命令 <code>SHOW ENGINE INNODB STATUS</code> 查看自适应哈希索引的使用情况。</p><ul><li><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show variables </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;innodb_adaptive_hash_index&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----------------------------+-------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| Variable_name              | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----------------------------+-------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| innodb_adaptive_hash_index | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----------------------------+-------+</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show variables </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;innodb_adaptive_hash_index_parts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----------------------------------+-------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| Variable_name                    | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----------------------------------+-------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| innodb_adaptive_hash_index_parts | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----------------------------------+-------+</span></span></code></pre></div></li></ul></li><li><h3 id="%E5%85%B3%E9%94%AE%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87%EF%BC%9A" tabindex="-1"><strong>关键监控指标：</strong> <a class="header-anchor" href="#关键监控指标：" aria-label="Permalink to &quot;**关键监控指标：**&quot;">​</a></h3><ul><li><p>哈希索引的使用频率。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SHOW ENGINE INNODB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">STATUS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>看 <code>0.00 hash searches/s</code> 越高, 说明越有用, 提升越高</p><p>\`\`0.00 non-hash searches/s\` 越高, 说明 越没用, 此时需要关闭</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INSERT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> BUFFER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ADAPTIVE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HASH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> INDEX</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-------------------------------------</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Ibuf: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, free list len </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, seg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> merges</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">merged operations:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> insert</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">delete</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">discarded operations:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> insert</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">delete</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Hash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> size</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 34679</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, node heap has </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Hash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> size</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 34679</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, node heap has </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Hash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> size</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 34679</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, node heap has </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Hash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> size</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 34679</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, node heap has </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Hash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> size</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 34679</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, node heap has </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Hash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> size</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 34679</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, node heap has </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Hash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> size</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 34679</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, node heap has </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Hash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> size</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 34679</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, node heap has </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> searches</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> non</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> searches</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s</span></span></code></pre></div></li><li><p>分区锁的线程等待数量。</p></li></ul></li><li><p>如果发现线程等待过多或哈希索引使用率低，可以通过以下方式关闭：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GLOBAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> innodb_adaptive_hash_index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> OFF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li></ul></li><li><p><strong>适用场景</strong>：</p><ul><li>适用于频繁等值查询的场景。</li><li>如果查询模式多为范围查询或分区锁竞争严重，应考虑关闭自适应哈希索引。</li></ul></li></ol><hr><h2 id="%E6%80%BB%E7%BB%93-9" tabindex="-1">总结 <a class="header-anchor" href="#总结-9" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>自适应哈希索引是 InnoDB 的一种动态优化机制，旨在提升二级索引的查询效率。</li><li>它<strong>并非万能</strong>，在某些场景下<strong>可能会带来性能问题</strong>，因此需要根据实际情况决定是否启用。</li><li>学习和掌握自适应哈希索引的原理和使用场景，有助于更好地优化数据库性能。</li></ul><h1 id="%E7%B4%A2%E5%BC%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98-%E7%B4%A2%E5%BC%95%E5%A4%A7%E9%87%8D%E7%82%B9" tabindex="-1">索引常见问题-<strong>索引大重点</strong> <a class="header-anchor" href="#索引常见问题-索引大重点" aria-label="Permalink to &quot;索引常见问题-**索引大重点**&quot;">​</a></h1><h2 id="%E5%86%85%E5%AE%B9%E6%9C%89%E7%82%B9%E4%B9%B1%2C%E7%89%88%E6%9C%AC%E4%B8%8D%E5%90%8C" tabindex="-1">内容有点乱,版本不同 <a class="header-anchor" href="#内容有点乱%2C版本不同" aria-label="Permalink to &quot;内容有点乱,版本不同&quot;">​</a></h2><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p></p><p>重点看看 特殊情况的优化 部分 extrta 字段注释., 很有意思</p></div><p>结合的 索引漫画 第五章</p><h2 id="%E6%A0%B8%E5%BF%83%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93" tabindex="-1">核心内容总结 <a class="header-anchor" href="#核心内容总结" aria-label="Permalink to &quot;核心内容总结&quot;">​</a></h2><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p></p><h3 id="%E4%B8%80%E5%AE%9A%E8%A6%81%E8%AE%B0%E4%BD%8F%20%E6%9C%89%E7%B4%A2%E5%BC%95%20%E4%B8%8D%E4%B8%80%E5%AE%9A%20%E5%BF%85%E9%A1%BB%E7%94%A8%E5%88%B0%E7%B4%A2%E5%BC%95" tabindex="-1"><strong>一定要记住 有索引 不一定 必须用到索引</strong> <a class="header-anchor" href="#一定要记住 有索引 不一定 必须用到索引" aria-label="Permalink to &quot;**一定要记住 有索引 不一定 必须用到索引**&quot;">​</a></h3><h3 id="%E8%A6%81%E7%9C%8B%20mysql%20%E8%87%AA%E5%B7%B1%E7%9A%84%20%E4%BC%98%E5%8C%96%E9%80%89%E6%8B%A9" tabindex="-1"><strong>要看 mysql 自己的 优化选择</strong> <a class="header-anchor" href="#要看 mysql 自己的 优化选择" aria-label="Permalink to &quot;**要看 mysql 自己的 优化选择**&quot;">​</a></h3></div><blockquote><ol><li><p><strong>索引的基本原理</strong>： 本课程 索引相关 内容</p><ul><li>主键索引、二级索引、聚集索引、非聚集索引、哈希索引、自适应哈希索引的概念和作用。</li><li>二级索引需要回表，联合索引可以减少回表和排序操作。</li></ul></li><li><h3 id="%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BC%98%E5%8C%96%E5%AE%9E%E8%B7%B5%EF%BC%9A" tabindex="-1"><strong>索引的优化实践</strong>： <a class="header-anchor" href="#索引的优化实践：" aria-label="Permalink to &quot;**索引的优化实践**：&quot;">​</a></h3><ul><li><strong>过滤条件加索引</strong>：优先为 <code>WHERE</code> 条件中的字段加索引。</li><li><strong>联合索引</strong>：对 <code>WHERE</code> 和 <code>ORDER BY</code> 涉及的字段创建联合索引，避免 <code>Using filesort</code>。</li><li><strong>区分度高的字段加索引</strong>：如 <code>user_id</code>，而非区分度低的字段（如 <code>status</code>）。</li><li><strong>避免无效索引</strong>：如 <code>LIKE &#39;%xxx&#39;</code> 或涉及函数计算的字段无法使用索引。</li></ul></li><li><h3 id="%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BD%BF%E7%94%A8%E9%99%90%E5%88%B6%EF%BC%9A" tabindex="-1"><strong>索引的使用限制</strong>： <a class="header-anchor" href="#索引的使用限制：" aria-label="Permalink to &quot;**索引的使用限制**：&quot;">​</a></h3><ul><li><h3 id="%E4%B8%80%E6%AC%A1%E6%9F%A5%E8%AF%A2%E5%8F%AA%E8%83%BD%E4%BD%BF%E7%94%A8%E4%B8%80%E4%B8%AA%E7%B4%A2%E5%BC%95%EF%BC%8CMySQL%20%E4%BC%9A%E9%80%89%E6%8B%A9%20%E8%BF%87%E6%BB%A4%E6%95%B0%E6%8D%AE%E9%87%8F%E6%9C%80%E5%B0%91%20%E7%9A%84%E7%B4%A2%E5%BC%95%E3%80%82" tabindex="-1"><strong>一次查询只能使用一个索引</strong>，MySQL 会选择 <strong>过滤数据量最少</strong> 的索引。 <a class="header-anchor" href="#一次查询只能使用一个索引，MySQL 会选择 过滤数据量最少 的索引。" aria-label="Permalink to &quot;**一次查询只能使用一个索引**，MySQL 会选择 **过滤数据量最少** 的索引。&quot;">​</a></h3><h3 id="%E7%9C%8B%E5%93%AA%E4%B8%AA%E7%B4%A2%E5%BC%95%20%E5%8F%96%E7%9A%84%20%E6%95%B0%E6%8D%AE%E5%B0%91%2C%20%E7%94%A8%E5%93%AA%E4%B8%AA" tabindex="-1">看哪个索引 取的 数据少, 用哪个 <a class="header-anchor" href="#看哪个索引 取的 数据少%2C 用哪个" aria-label="Permalink to &quot;看哪个索引 取的 数据少, 用哪个&quot;">​</a></h3></li><li><h3 id="%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%20FORCE%20INDEX%20%E5%BC%BA%E5%88%B6%E6%8C%87%E5%AE%9A%E7%B4%A2%E5%BC%95%E3%80%82" tabindex="-1">可以通过 <code>FORCE INDEX</code> 强制指定索引。 <a class="header-anchor" href="#可以通过 FORCE INDEX 强制指定索引。" aria-label="Permalink to &quot;可以通过 \`FORCE INDEX\` 强制指定索引。&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">force</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ageidx) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xing huai&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li></ul></li><li><p><strong>特殊情况的优化</strong>：</p><ul><li><h3 id="NOT%20IN%20%E5%92%8C%20OR%20%E6%9F%A5%E8%AF%A2%E5%8F%AF%E4%BB%A5%E8%A2%AB%E4%BC%98%E5%8C%96%E4%B8%BA%E8%8C%83%E5%9B%B4%E6%9F%A5%E8%AF%A2%E6%88%96%20UNION%EF%BC%8C%E4%BB%8E%E8%80%8C%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95%E3%80%82" tabindex="-1"><code>NOT IN</code> 和 <code>OR</code> 查询<strong>可以被优化为范围查询或 <code>UNION</code></strong>，从而使用索引。 <a class="header-anchor" href="#NOT IN 和 OR 查询可以被优化为范围查询或 UNION，从而使用索引。" aria-label="Permalink to &quot;\`NOT IN\` 和 \`OR\` 查询**可以被优化为范围查询或 \`UNION\`**，从而使用索引。&quot;">​</a></h3><h3 id="%E5%92%8C%20select%20%E5%90%8E%E9%9D%A2%20%E4%B9%9F%E6%9C%89%E5%85%B3%20---%20%E7%B4%A2%E5%BC%95%E4%B8%8B%E6%8E%A8%E7%9A%84%E5%87%BA%E7%8E%B0%2C%20%E4%BD%BF%E5%BE%97%E5%92%8C%E8%80%81%E5%B8%88%E4%B8%8D%E4%B8%80%E6%A0%B7%E4%BA%86" tabindex="-1">和 select 后面 也有关 --- <strong>索引下推的出现, 使得和老师不一样了</strong> <a class="header-anchor" href="#和 select 后面 也有关 --- 索引下推的出现%2C 使得和老师不一样了" aria-label="Permalink to &quot;和 select 后面 也有关 --- **索引下推的出现, 使得和老师不一样了**&quot;">​</a></h3><h3 id="explain%20%E7%BB%93%E6%9E%9C%E4%B8%8D%E6%98%AF%20%E5%9B%BA%E5%AE%9A%E7%9A%84%2C%20%E4%B8%8D%E4%B8%80%E5%AE%9A%E9%83%BD%E4%B8%80%E6%A0%B7!" tabindex="-1">explain 结果不是 固定的, <strong>不一定都一样</strong>! <a class="header-anchor" href="#explain 结果不是 固定的%2C 不一定都一样!" aria-label="Permalink to &quot;explain 结果不是 固定的, **不一定都一样**!&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 只有age 索引时,  且为 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">explain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- range, 用到索引, Using index condition 搜索时就过滤, 但可能回表</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">explain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- ref, 用到索引, null--无需过滤</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">explain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">not</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- range, 用到索引, Using index condition </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">explain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> or</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- range, 用到索引, Using index condition</span></span></code></pre></div><p>select 后面 索引字段, 使得, 无需回表</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">explain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- range, 用到索引, Using where; Using index -- 先过滤,再直接,无需回表</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">explain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- ref, 用到索引,  Using index-无需回表</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">explain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">not</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- index, 用到索引, Using where; Using index</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">explain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> or</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- index, 用到索引, Using where; Using index</span></span></code></pre></div></li><li><h3 id="or%20%20%E8%A2%AB%E4%BC%98%E5%8C%96%E4%B8%BA%20union" tabindex="-1"><strong>or 被优化为 union</strong> <a class="header-anchor" href="#or  被优化为 union" aria-label="Permalink to &quot;**or  被优化为 union**&quot;">​</a></h3><h3 id="%E4%BB%85%E5%AF%B9%E4%BA%8E%20or%20%2C%20%E5%AD%97%E6%AE%B5%20%E4%B8%8D%E5%90%8C%20%E7%94%A8%E4%B8%8D%E5%88%B0%E7%B4%A2%E5%BC%95(%E4%BB%85%E5%AF%B9%E4%BA%8E%20%E6%9C%89%20%E6%97%A0%E7%B4%A2%E5%BC%95%E5%AD%97%E6%AE%B5)%2C%20%E5%AD%97%E6%AE%B5%20%E7%9B%B8%E5%90%8C%20%E4%BC%9A%E7%94%A8%E5%88%B0%E7%B4%A2%E5%BC%95%2C%20%E4%B8%8D%E7%BB%9D%E5%AF%B9" tabindex="-1">仅对于 or , 字段 不同 用不到索引(仅对于 有 无索引字段), 字段 相同 会用到索引, 不绝对 <a class="header-anchor" href="#仅对于 or %2C 字段 不同 用不到索引(仅对于 有 无索引字段)%2C 字段 相同 会用到索引%2C 不绝对" aria-label="Permalink to &quot;仅对于 or , 字段 不同 用不到索引(仅对于 有 无索引字段), 字段 相同 会用到索引, 不绝对&quot;">​</a></h3><h3 id="%E9%83%BD%E6%9C%89%E7%B4%A2%E5%BC%95%2C%20mysql8.0%20%E4%BC%9A%E4%BD%BF%E7%94%A8%20Using%20sort_union%20%E7%B4%A2%E5%BC%95%E5%90%88%E5%B9%B6%20%E8%BF%9B%E8%A1%8C" tabindex="-1">都有索引, mysql8.0 会使用 <code>Using sort_union</code> <strong>索引合并</strong> 进行 <a class="header-anchor" href="#都有索引%2C mysql8.0 会使用 Using sort_union 索引合并 进行" aria-label="Permalink to &quot;都有索引, mysql8.0 会使用 \`Using sort_union\` **索引合并** 进行&quot;">​</a></h3><h3 id="%E4%B8%8D%E8%BF%87%2C%20%E7%9C%8B%E4%B8%8B%E6%9D%A5%2C%20%E6%84%9F%E8%A7%89%E8%BF%98%E6%98%AF%20%20%E4%BC%98%E5%8C%96%E4%B8%BA%20union%20%E6%9B%B4%E5%A5%BD" tabindex="-1">不过, 看下来, 感觉还是 优化为 union 更好 <a class="header-anchor" href="#不过%2C 看下来%2C 感觉还是  优化为 union 更好" aria-label="Permalink to &quot;不过, 看下来, 感觉还是  优化为 union 更好&quot;">​</a></h3><p>本质是, or 是不同的条件, 也就早就了 可以使用 不同的 sql 语句 进行 联合</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> explain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> or</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xing huai&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                         </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">explain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> union all</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xing huai&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li><li><p>数据类型转换、函数调用等会导致索引失效。</p></li></ul></li><li><h3 id="%E5%A4%9A%E8%A1%A8%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2%EF%BC%9A" tabindex="-1"><strong>多表连接查询</strong>： <a class="header-anchor" href="#多表连接查询：" aria-label="Permalink to &quot;**多表连接查询**：&quot;">​</a></h3><ul><li><h3 id="%E5%B0%8F%E8%A1%A8%E5%86%B3%E5%AE%9A%E5%BE%AA%E7%8E%AF%E6%AC%A1%E6%95%B0%EF%BC%8C%E5%A4%A7%E8%A1%A8%E5%86%B3%E5%AE%9A%E6%AF%8F%E6%AC%A1%E5%BE%AA%E7%8E%AF%E7%9A%84%E6%9F%A5%E8%AF%A2%E6%97%B6%E9%97%B4%E3%80%82" tabindex="-1"><strong>小表决定循环次数</strong>，<strong>大表决定每次循环的查询时间</strong>。 <a class="header-anchor" href="#小表决定循环次数，大表决定每次循环的查询时间。" aria-label="Permalink to &quot;**小表决定循环次数**，**大表决定每次循环的查询时间**。&quot;">​</a></h3><blockquote><p>怎么理解呢?</p><ul><li><strong>小表决定循环次数</strong>：小表会被完整扫描，<strong>每一行数据都会与大表进行匹配</strong>，因此小表的行数决定了循环的次数。</li><li><strong>大表决定每次循环的查询时间</strong>：大表根据小表的每一行数据进行查询，如果大表的关联字段有索引，查询会很快；如果没有索引，则需要全表扫描，查询时间会增加。</li></ul><p><strong>总结</strong>：小表越小，循环次数越少；大表有索引，每次查询时间越短，整体效率越高。</p></blockquote></li><li><h3 id="%E5%A4%A7%E8%A1%A8%E7%9A%84%E5%85%B3%E8%81%94%E5%AD%97%E6%AE%B5%E5%BA%94%E5%8A%A0%E7%B4%A2%E5%BC%95%E4%BB%A5%E6%8F%90%E9%AB%98%E6%9F%A5%E8%AF%A2%E6%95%88%E7%8E%87%E3%80%82" tabindex="-1"><strong>大表的关联字段应加索引以提高查询效率。</strong> <a class="header-anchor" href="#大表的关联字段应加索引以提高查询效率。" aria-label="Permalink to &quot;**大表的关联字段应加索引以提高查询效率。**&quot;">​</a></h3></li></ul></li><li><p><strong>SQL 优化的流程</strong>：</p><ul><li>使用 <code>EXPLAIN</code> 分析 SQL 执行计划，查看索引使用情况。</li><li>关注 <code>Extra</code> 字段中的 <code>Using filesort</code> 和 <code>Using temporary</code> 等信息，优化排序和临时表操作。</li></ul></li></ol></blockquote><hr><h2 id="%E6%B3%A8%E6%84%8F-1" tabindex="-1">注意 <a class="header-anchor" href="#注意-1" aria-label="Permalink to &quot;注意&quot;">​</a></h2><p>在上面 not in, in 优化时, 如果 where 后面是 <strong>联合索引的 其中一个字段</strong>, extra 会显示 <code>using index condition</code></p><p><code>Using index condition</code> 是 MySQL 执行计划中 <code>EXPLAIN</code> 的 <code>Extra</code> 字段可能出现的一种信息，表示 MySQL 在查询时使用了 <strong>索引条件下推（Index Condition Pushdown, ICP）</strong> 优化。</p><blockquote><h3 id="%E4%BB%80%E4%B9%88%E6%98%AF%E7%B4%A2%E5%BC%95%E6%9D%A1%E4%BB%B6%E4%B8%8B%E6%8E%A8%EF%BC%88ICP%EF%BC%89%EF%BC%9F" tabindex="-1"><strong>什么是索引条件下推（ICP）？</strong> <a class="header-anchor" href="#什么是索引条件下推（ICP）？" aria-label="Permalink to &quot;**什么是索引条件下推（ICP）？**&quot;">​</a></h3><ul><li><strong>定义</strong>：在使用索引扫描时，将部分 <code>WHERE</code> 条件下推到存储引擎层，<strong>由存储引擎在索引扫描过程中直接过滤数据</strong>，而不是将所有数据返回给 MySQL Server 层再进行过滤。</li><li><strong>作用</strong>：减少从存储引擎返回到 MySQL Server 层的数据量，从而提高查询效率。</li></ul><h3 id="%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF" tabindex="-1"><strong>适用场景</strong> <a class="header-anchor" href="#适用场景" aria-label="Permalink to &quot;**适用场景**&quot;">​</a></h3><ul><li>当查询条件中包含索引字段和非索引字段时，MySQL 会优先使用索引字段进行索引扫描。</li><li>如果启用了 ICP，存储引擎会在扫描索引时直接应用部分 <code>WHERE</code> 条件，减少需要回表的数据量。</li></ul><h2 id="%E5%B8%B8%E8%A7%81%E4%BA%8E%20%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95%20where%E8%BF%87%E6%BB%A4" tabindex="-1">常见于 二级索引 where过滤 <a class="header-anchor" href="#常见于 二级索引 where过滤" aria-label="Permalink to &quot;常见于 二级索引 where过滤&quot;">​</a></h2></blockquote><h2 id="%E7%B4%A2%E5%BC%95%E4%B8%8B%E6%8E%A8-%E8%A1%A5%E5%85%85" tabindex="-1">索引下推-补充 <a class="header-anchor" href="#索引下推-补充" aria-label="Permalink to &quot;索引下推-补充&quot;">​</a></h2><blockquote><p>**索引下推（Index Condition Pushdown, ICP）**是在 <strong>MySQL 5.6</strong> 版本中引入的优化功能。它的主要作用是将部分 <code>WHERE</code> 条件下推到存储引擎层，在索引扫描过程中直接过滤数据，从而减少回表次数和数据传输量，提高查询效率。</p><h3 id="%E5%85%B3%E9%94%AE%E7%82%B9" tabindex="-1"><strong>关键点</strong> <a class="header-anchor" href="#关键点" aria-label="Permalink to &quot;**关键点**&quot;">​</a></h3><ul><li><strong>引入版本</strong>：MySQL 5.6。</li><li><h3 id="%E9%BB%98%E8%AE%A4%E5%90%AF%E7%94%A8%EF%BC%9A%E5%9C%A8%20MySQL%205.6%20%E5%8F%8A%E4%BB%A5%E4%B8%8A%E7%89%88%E6%9C%AC%E4%B8%AD%EF%BC%8C%E7%B4%A2%E5%BC%95%E4%B8%8B%E6%8E%A8%E9%BB%98%E8%AE%A4%E5%90%AF%E7%94%A8%E3%80%82" tabindex="-1"><strong>默认启用</strong>：在 MySQL 5.6 及以上版本中，索引下推默认启用。 <a class="header-anchor" href="#默认启用：在 MySQL 5.6 及以上版本中，索引下推默认启用。" aria-label="Permalink to &quot;**默认启用**：在 MySQL 5.6 及以上版本中，索引下推默认启用。&quot;">​</a></h3></li><li><strong>适用场景</strong>：主要用于<strong>复合索引（联合索引）和部分索引字段</strong>参与查询条件的场景。</li></ul><h3 id="%E5%A6%82%E4%BD%95%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%90%AF%E7%94%A8" tabindex="-1"><strong>如何检查是否启用</strong> <a class="header-anchor" href="#如何检查是否启用" aria-label="Permalink to &quot;**如何检查是否启用**&quot;">​</a></h3><p>可以通过以下命令查看是否启用了索引下推：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SHOW VARIABLES </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LIKE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;optimizer_switch&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>如果输出中包含 <code>index_condition_pushdown=on</code>，说明索引下推已启用。</p><h3 id="%E7%A4%BA%E4%BE%8B-3" tabindex="-1"><strong>示例</strong> <a class="header-anchor" href="#示例-3" aria-label="Permalink to &quot;**示例**&quot;">​</a></h3><p>假设有一个联合索引：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> idx_age_score (age, score)</span></span></code></pre></div><p>查询语句：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> score </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 90</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li><strong>索引下推启用时</strong>：存储引擎在扫描索引时，会同时应用 <code>age = 18</code> 和 <code>score &gt; 90</code> 的条件，减少回表次数。</li><li><strong>索引下推未启用时</strong>：存储引擎只应用 <code>age = 18</code> 的条件，将所有匹配的记录返回给 MySQL Server 层，再由 Server 层过滤 <code>score &gt; 90</code>。</li></ul><p>索引下推的引入显著提升了复杂查询的效率，尤其是在大数据量场景下。</p></blockquote><h2 id="extra%E5%AD%97%E6%AE%B5%E5%88%A4%E6%96%AD%E5%9B%9E%E8%A1%A8-%E4%B8%8D%E8%83%BD%E5%AE%8C%E5%85%A8%E7%A1%AE%E5%AE%9A" tabindex="-1">extra字段判断回表-不能完全确定 <a class="header-anchor" href="#extra字段判断回表-不能完全确定" aria-label="Permalink to &quot;extra字段判断回表-不能完全确定&quot;">​</a></h2><p>但有 参考价值</p><ul><li><h3 id="Using%20index----%20%E5%BF%85%E6%B2%A1%E6%9C%89%E5%9B%9E%E8%A1%A8" tabindex="-1"><code>Using index</code>---- <strong>必没有回表</strong> <a class="header-anchor" href="#Using index---- 必没有回表" aria-label="Permalink to &quot;\`Using index\`---- **必没有回表**&quot;">​</a></h3><ul><li>表示查询使用了覆盖索引（Covering Index），不需要回表。</li><li>查询的所有字段都在索引中，直接从索引中获取数据。</li></ul></li><li><p><code>Using where</code></p><ul><li>表示查询需要额外的过滤操作，可能需要回表。</li><li>如果查询的字段不完全被索引覆盖，则需要回表获取完整数据。</li></ul></li><li><p><code>Using index condition</code></p><ul><li>表示使用了索引条件下推（ICP），<strong>部分过滤条件在存储引擎层完成，可能减少回表次数。</strong></li></ul></li></ul><h3 id="%E5%85%B3%E9%94%AE%E9%97%AE%E9%A2%98%E4%B8%8E%E6%80%9D%E8%80%83" tabindex="-1"><strong>关键问题与思考</strong> <a class="header-anchor" href="#关键问题与思考" aria-label="Permalink to &quot;**关键问题与思考**&quot;">​</a></h3><ol><li><p><strong>如何定位性能问题的 SQL</strong>：</p><ul><li>不可能对所有 SQL 都用 <code>EXPLAIN</code> 分析，应先通过慢查询日志或性能监控工具定位耗时较长的 SQL，再针对性优化。</li></ul></li><li><p><strong>回答索引优化问题的思路</strong>：</p><ul><li>先描述如何定位问题（如慢查询日志）。</li><li>再说明如何分析问题（如使用 <code>EXPLAIN</code>）。</li><li>最后提出优化方案（如加索引、调整 SQL 结构）。</li></ul></li></ol><hr><h2 id="%E6%80%BB%E7%BB%93-10" tabindex="-1">总结 <a class="header-anchor" href="#总结-10" aria-label="Permalink to &quot;总结&quot;">​</a></h2><blockquote><h3 id="or%20%E4%B8%8D%E7%BB%9D%E5%AF%B9!!------------or%20%E5%AD%97%E6%AE%B5%E4%B8%8D%E5%90%8C%2C%20%E6%89%8D%E4%BC%9A%20%E7%94%A8%E4%B8%8D%E5%88%B0%20%E7%B4%A2%E5%BC%95" tabindex="-1"><strong>or 不绝对!!</strong>------------or 字段不同, 才会 用不到 索引 <a class="header-anchor" href="#or 不绝对!!------------or 字段不同%2C 才会 用不到 索引" aria-label="Permalink to &quot;**or 不绝对!!**------------or 字段不同, 才会 用不到 索引&quot;">​</a></h3></blockquote><p><img src="`+v+'" alt="image-20250513222905869"></p><h2 id="%E9%97%AE%E9%A2%98--%E5%80%BC%E5%BE%97%E8%87%AA%E5%B7%B1%E6%83%B3%E6%80%8E%E4%B9%88%E5%9B%9E%E7%AD%94" tabindex="-1">问题--值得自己想怎么回答 <a class="header-anchor" href="#问题--值得自己想怎么回答" aria-label="Permalink to &quot;问题--值得自己想怎么回答&quot;">​</a></h2><blockquote><h3 id="%E5%A6%82%E6%9E%9C%E6%98%AF%20%E7%BB%83%E4%B9%A0%2C%20%E6%8C%89%E7%85%A7%20%E5%AD%A6%E5%88%B0%E7%9A%84%20%3A" tabindex="-1">如果是 练习, 按照 学到的 : <a class="header-anchor" href="#如果是 练习%2C 按照 学到的 %3A" aria-label="Permalink to &quot;如果是 练习, 按照 学到的 :&quot;">​</a></h3><p>explain 分析 , 加索引, 改sql 使得优化等等!!</p><h3 id="%E4%BD%86%E6%98%AF%20%E4%B8%8D%E9%80%82%E7%94%A8%E4%BA%8E%20%E4%BC%81%E4%B8%9A%E7%BA%A7%E9%A1%B9%E7%9B%AE%2C%20%20sql%20%E5%A4%AA%E5%A4%9A%E4%BA%86" tabindex="-1">但是 不适用于 企业级项目, sql 太多了 <a class="header-anchor" href="#但是 不适用于 企业级项目%2C  sql 太多了" aria-label="Permalink to &quot;但是 不适用于 企业级项目,  sql 太多了&quot;">​</a></h3></blockquote><p><img src="'+x+`" alt="image-20250513224937782"></p><h1 id="%E7%B4%A2%E5%BC%95%E5%92%8C%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97" tabindex="-1">索引和慢查询日志 <a class="header-anchor" href="#索引和慢查询日志" aria-label="Permalink to &quot;索引和慢查询日志&quot;">​</a></h1><h2 id="%E5%9B%9E%E7%AD%94%E4%B8%8A%E8%8A%82%E9%97%AE%E9%A2%98" tabindex="-1">回答上节问题 <a class="header-anchor" href="#回答上节问题" aria-label="Permalink to &quot;回答上节问题&quot;">​</a></h2><blockquote><h3 id="%E5%A4%9A%E5%AD%A6%E5%AD%A6%20%E5%B7%A5%E5%85%B7%2C%20%20%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%20jmeter%E7%AD%89" tabindex="-1">多学学 工具, 压力测试 jmeter等 <a class="header-anchor" href="#多学学 工具%2C  压力测试 jmeter等" aria-label="Permalink to &quot;多学学 工具,  压力测试 jmeter等&quot;">​</a></h3><h3 id="%E6%9C%AC%E8%8A%82%20%E4%BD%BF%E7%94%A8%20%E6%85%A2%E6%9F%A5%E8%AF%A2%20%E6%97%A5%E5%BF%97" tabindex="-1">本节 使用 慢查询 日志 <a class="header-anchor" href="#本节 使用 慢查询 日志" aria-label="Permalink to &quot;本节 使用 慢查询 日志&quot;">​</a></h3></blockquote><h2 id="%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97%E7%9A%84%E4%BD%9C%E7%94%A8" tabindex="-1">慢查询日志的作用 <a class="header-anchor" href="#慢查询日志的作用" aria-label="Permalink to &quot;慢查询日志的作用&quot;">​</a></h2><ul><li>用于<strong>记录执行时间超过设定阈值</strong>的SQL语句，<strong>帮助定位性能瓶颈</strong>。</li></ul><h2 id="%E5%BC%80%E5%90%AF%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97" tabindex="-1">开启慢查询日志 <a class="header-anchor" href="#开启慢查询日志" aria-label="Permalink to &quot;开启慢查询日志&quot;">​</a></h2><ul><li><p>查看慢查询日志开关状态：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SHOW VARIABLES </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LIKE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;slow_query_log&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li><li><p>开启慢查询日志：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> GLOBAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> slow_query_log </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 不加global 可能 必须让你 加</span></span></code></pre></div><blockquote><p>SET slow_query_log = ON; ERROR 1229 (HY000): Variable &#39;slow_query_log&#39; is a GLOBAL variable and should be set with SET GLOBAL</p><h3 id="%E8%BF%99%E6%98%AF%20%E5%85%A8%E5%B1%80%E7%9A%84%2C%20%E4%B8%8D%E6%98%AF%20session%E7%9A%84" tabindex="-1">这是 全局的, 不是 session的 <a class="header-anchor" href="#这是 全局的%2C 不是 session的" aria-label="Permalink to &quot;这是 全局的, 不是 session的&quot;">​</a></h3></blockquote></li><li><p>查看慢查询日志文件路径：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SHOW VARIABLES </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LIKE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;slow_query_log_file&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li></ul><h2 id="%E8%AE%BE%E7%BD%AE%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%B6%E9%97%B4%E9%98%88%E5%80%BC" tabindex="-1">设置慢查询时间阈值 <a class="header-anchor" href="#设置慢查询时间阈值" aria-label="Permalink to &quot;设置慢查询时间阈值&quot;">​</a></h2><ul><li>查看当前慢查询时间：<div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SHOW VARIABLES </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LIKE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;long_query_time&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li><li>设置慢查询时间（单位：秒，可设置为小数）：<div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> long_query_time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 100毫秒   不能使用 GLOBAL, 不影响当前会话, 影响 之后的新连接!!</span></span></code></pre></div></li></ul><h2 id="%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97%E7%9A%84%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B%E5%8F%8A%E5%AE%9E%E8%B7%B5--%E9%87%8D%E7%82%B9" tabindex="-1">慢查询日志的使用流程及实践--<strong>重点</strong> <a class="header-anchor" href="#慢查询日志的使用流程及实践--重点" aria-label="Permalink to &quot;慢查询日志的使用流程及实践--**重点**&quot;">​</a></h2><p>以 t_user 为例 去测试, 200w 数据</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t_user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> passwd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">lib</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">主机名</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">slow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">log</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Tcp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3306</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Unix socket: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">run</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysqld</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mysqld</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sock</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                 Id Command    Argument</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2025</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">05</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">13T15:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">24</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">14</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.068120Z</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># User@Host: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[root] @ localhost []  Id:     </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># Query_time: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">378882</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Lock_time: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">000003</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Rows_sent: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Rows_examined: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000000</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> timestamp=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1747149853</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t_user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> passwd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pwd 是 字符串, 注意 即使有索引, 也会 因为 类型转换, 使得 索引失效</span></span></code></pre></div><blockquote><h2 id="%E9%87%8D%E7%82%B9---%E9%9D%A2%E8%AF%95%E8%AF%B4%E5%87%BA%E6%9D%A5" tabindex="-1">重点---面试说出来 <a class="header-anchor" href="#重点---面试说出来" aria-label="Permalink to &quot;重点---面试说出来&quot;">​</a></h2><ul><li><strong>第一步</strong>：开启慢查询日志并设置合理的时间阈值。</li><li><strong>第二步</strong>：执行业务或进行压测。</li><li><strong>第三步</strong>：查看慢查询日志，定位耗时SQL。</li><li><strong>第四步</strong>：使用 <code>EXPLAIN</code> 分析耗时SQL，找出性能问题。</li><li><strong>第五步</strong>：根据分析结果优化SQL（如添加索引、调整查询逻辑等）。</li></ul></blockquote><p><img src="`+f+`" alt="image-20250513232902027"></p><h2 id="%E5%B8%B8%E8%A7%81%E4%BC%98%E5%8C%96%E6%96%B9%E5%90%91" tabindex="-1">常见优化方向 <a class="header-anchor" href="#常见优化方向" aria-label="Permalink to &quot;常见优化方向&quot;">​</a></h2><ul><li>确保过滤条件字段有索引。</li><li>避免类型转换导致索引失效。</li><li>使用联合索引优化 <code>WHERE</code> 和 <code>ORDER BY</code>。</li><li>避免使用函数或表达式操作索引字段。</li></ul><h2 id="%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7" tabindex="-1">辅助工具 <a class="header-anchor" href="#辅助工具" aria-label="Permalink to &quot;辅助工具&quot;">​</a></h2><ul><li><p><strong><code>SHOW PROFILES</code></strong>：查看SQL执行的详细耗时。---看0.00s 的 更详细 时间</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show variable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;profiling&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> profiling </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> explain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t_user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> passwd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1000000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SHOW PROFILES;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----------+------------+-------------------------------------------------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| Query_ID | Duration   | Query                                                 |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----------+------------+-------------------------------------------------------+</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|        </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00054725</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | explain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t_user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> passwd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1000000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">----------+------------+-------------------------------------------------------+</span></span></code></pre></div></li><li><p><strong><code>EXPLAIN</code></strong>：分析SQL执行计划，定位性能问题。</p></li></ul><h2 id="%E9%9D%A2%E8%AF%95%E4%B8%AD%E7%9A%84%E5%88%87%E5%85%A5%E7%82%B9" tabindex="-1">面试中的切入点 <a class="header-anchor" href="#面试中的切入点" aria-label="Permalink to &quot;面试中的切入点&quot;">​</a></h2><ul><li>强调通过慢查询日志定位问题的实践经验，而非单纯背诵优化措施。</li><li>展示解决问题的完整流程：从日志定位到SQL优化，再到性能验证。</li></ul><p>通过以上步骤，能够系统性地优化SQL性能，并在面试中展现实际解决问题的能力。</p><h1 id="2025-05-13" tabindex="-1">2025-05-13 <a class="header-anchor" href="#2025-05-13" aria-label="Permalink to &quot;2025-05-13&quot;">​</a></h1><h1 id="%E4%BA%8B%E5%8A%A1%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5" tabindex="-1">事务核心概念 <a class="header-anchor" href="#事务核心概念" aria-label="Permalink to &quot;事务核心概念&quot;">​</a></h1><p><img src="`+L+`" alt="image-20250514171436578"></p><h2 id="%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%AE%9A%E4%B9%89" tabindex="-1">事务的定义 <a class="header-anchor" href="#事务的定义" aria-label="Permalink to &quot;事务的定义&quot;">​</a></h2><p>事务是由一条或多条对数据库操作的SQL语句组成的一个<strong>不可分割的单元</strong>。事务的核心特性是<strong>原子性</strong>，即：</p><ul><li>要么事务中的所有操作全部成功并提交；</li><li>要么事务中的所有操作全部失败并回滚。</li></ul><hr><h2 id="%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF" tabindex="-1">事务的应用场景 <a class="header-anchor" href="#事务的应用场景" aria-label="Permalink to &quot;事务的应用场景&quot;">​</a></h2><p>事务通常用于需要多条SQL语句共同完成的复杂业务逻辑。例如：</p><ul><li><strong>银行转账</strong>：从一个账户扣款，同时向另一个账户存款。</li><li><strong>库存管理</strong>：商品的出库和入库操作。</li></ul><p>事务的使用可以确保数据的一致性，避免出现部分操作成功、部分操作失败的情况。</p><hr><h2 id="%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%B8%89%E4%B8%AA%E7%8A%B6%E6%80%81" tabindex="-1">事务的三个状态 <a class="header-anchor" href="#事务的三个状态" aria-label="Permalink to &quot;事务的三个状态&quot;">​</a></h2><blockquote><ul><li><h3 id="BEGIN%EF%BC%88%E6%88%96%20START%20TRANSACTION%EF%BC%89%EF%BC%9A%E5%BC%80%E5%90%AF%E4%BA%8B%E5%8A%A1%E3%80%82" tabindex="-1"><strong>BEGIN</strong>（或 <code>START TRANSACTION</code>）：开启事务。 <a class="header-anchor" href="#BEGIN（或 START TRANSACTION）：开启事务。" aria-label="Permalink to &quot;**BEGIN**（或 \`START TRANSACTION\`）：开启事务。&quot;">​</a></h3></li><li><h3 id="COMMIT%EF%BC%9A%E6%8F%90%E4%BA%A4%E4%BA%8B%E5%8A%A1%EF%BC%8C%E4%BF%9D%E5%AD%98%E6%89%80%E6%9C%89%E6%9B%B4%E6%94%B9%E3%80%82" tabindex="-1"><strong>COMMIT</strong>：提交事务，保存所有更改。 <a class="header-anchor" href="#COMMIT：提交事务，保存所有更改。" aria-label="Permalink to &quot;**COMMIT**：提交事务，保存所有更改。&quot;">​</a></h3></li><li><h3 id="ROLLBACK%EF%BC%9A%E5%9B%9E%E6%BB%9A%E4%BA%8B%E5%8A%A1%EF%BC%8C%E6%92%A4%E9%94%80%E6%89%80%E6%9C%89%E6%9B%B4%E6%94%B9%EF%BC%8C%E6%81%A2%E5%A4%8D%E5%88%B0%E4%BA%8B%E5%8A%A1%E5%BC%80%E5%A7%8B%E5%89%8D%E7%9A%84%E7%8A%B6%E6%80%81%E3%80%82" tabindex="-1"><strong>ROLLBACK</strong>：回滚事务，撤销所有更改，恢复到事务开始前的状态。 <a class="header-anchor" href="#ROLLBACK：回滚事务，撤销所有更改，恢复到事务开始前的状态。" aria-label="Permalink to &quot;**ROLLBACK**：回滚事务，撤销所有更改，恢复到事务开始前的状态。&quot;">​</a></h3></li></ul></blockquote><h2 id="%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%AE%9E%E7%8E%B0" tabindex="-1">事务的实现 <a class="header-anchor" href="#事务的实现" aria-label="Permalink to &quot;事务的实现&quot;">​</a></h2><p>事务的实现依赖于数据库的存储引擎。例如：</p><blockquote><ul><li><h3 id="InnoDB%EF%BC%88MySQL%E9%BB%98%E8%AE%A4%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%EF%BC%89%EF%BC%9A%E6%94%AF%E6%8C%81%E4%BA%8B%E5%8A%A1%E3%80%81%E8%A1%8C%E9%94%81%E5%92%8C%E5%A4%96%E9%94%AE%E3%80%82" tabindex="-1"><strong>InnoDB</strong>（MySQL默认存储引擎）：支持事务、行锁和外键。 <a class="header-anchor" href="#InnoDB（MySQL默认存储引擎）：支持事务、行锁和外键。" aria-label="Permalink to &quot;**InnoDB**（MySQL默认存储引擎）：支持事务、行锁和外键。&quot;">​</a></h3></li><li><h3 id="MyISAM%EF%BC%9A%E4%B8%8D%E6%94%AF%E6%8C%81%E4%BA%8B%E5%8A%A1%EF%BC%8C%E6%AF%8F%E6%9D%A1SQL%E8%AF%AD%E5%8F%A5%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4%E3%80%82" tabindex="-1"><strong>MyISAM</strong>：不支持事务，每条SQL语句自动提交。 <a class="header-anchor" href="#MyISAM：不支持事务，每条SQL语句自动提交。" aria-label="Permalink to &quot;**MyISAM**：不支持事务，每条SQL语句自动提交。&quot;">​</a></h3></li><li><h3 id="InnoDB%E9%80%9A%E8%BF%87Redo%20Log%EF%BC%88%E9%87%8D%E5%81%9A%E6%97%A5%E5%BF%97%EF%BC%89%E5%92%8CUndo%20Log%EF%BC%88%E5%9B%9E%E6%BB%9A%E6%97%A5%E5%BF%97%EF%BC%89%E6%9D%A5%E5%AE%9E%E7%8E%B0%E4%BA%8B%E5%8A%A1%E7%9A%84%E6%8F%90%E4%BA%A4%E5%92%8C%E5%9B%9E%E6%BB%9A%E3%80%82" tabindex="-1">InnoDB通过<strong>Redo Log</strong>（重做日志）和<strong>Undo Log</strong>（回滚日志）来实现<strong>事务的提交和回滚</strong>。 <a class="header-anchor" href="#InnoDB通过Redo Log（重做日志）和Undo Log（回滚日志）来实现事务的提交和回滚。" aria-label="Permalink to &quot;InnoDB通过**Redo Log**（重做日志）和**Undo Log**（回滚日志）来实现**事务的提交和回滚**。&quot;">​</a></h3></li></ul></blockquote><blockquote><h3 id="%E6%9F%A5%E7%9C%8B%20%E5%BC%95%E6%93%8E%20%E7%9B%B8%E5%85%B3" tabindex="-1">查看 引擎 相关 <a class="header-anchor" href="#查看 引擎 相关" aria-label="Permalink to &quot;查看 引擎 相关&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show engines\\G</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">***************************</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">row</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ***************************</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Engine: InnoDB</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     Support: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DEFAULT</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     Comment: Supports transactions, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">row-level</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> locking, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foreign keys</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Transactions: YES</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          XA: YES</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Savepoints: YES</span></span></code></pre></div><p>transactions--- <strong>事务,交易</strong></p></blockquote><hr><h2 id="%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-2" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项-2" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><ul><li><p>如果业务中涉及事务，需将 <code>autocommit</code> 设置为 <code>0</code>（手动提交模式）。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @@autocommit;</span></span></code></pre></div><h3 id="%E9%BB%98%E8%AE%A4%E4%B8%BA%201%2C%20%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4" tabindex="-1">默认为 1, 自动提交 <a class="header-anchor" href="#默认为 1%2C 自动提交" aria-label="Permalink to &quot;默认为 1, 自动提交&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @@autocommit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li><li><p>使用事务时，需确保所有操作都成功后再提交，否则应回滚。</p></li></ul><h1 id="%E4%BA%8B%E5%8A%A1ACID" tabindex="-1">事务ACID <a class="header-anchor" href="#事务ACID" aria-label="Permalink to &quot;事务ACID&quot;">​</a></h1><h2 id="%E4%BA%8B%E5%8A%A1%E7%9A%84%E7%89%B9%E6%80%A7%EF%BC%88ACID%EF%BC%89" tabindex="-1">事务的特性（ACID） <a class="header-anchor" href="#事务的特性（ACID）" aria-label="Permalink to &quot;事务的特性（ACID）&quot;">​</a></h2><p>事务具有以下四个特性：</p><ul><li><strong>原子性（Atomicity）</strong>：事务是不可分割的最小操作单元。</li><li><strong>一致性（Consistency）</strong>：事务<strong>执行前后</strong>，数据库的状态必须保持一致。</li><li><strong>隔离性（Isolation）</strong>：多个事务<strong>并发执行</strong>时，彼此之间互不干扰。 -- 就像 多线程 的 线程安全问题</li><li><strong>持久性（Durability）</strong>：事务一旦提交，其结果将永久保存。</li></ul><blockquote><p><img src="`+P+'" alt="image-20250514172622330"></p></blockquote><p><img src="'+I+`" alt="image-20250514174120287"></p><blockquote><h3 id="commit%20%E5%8F%AA%E6%98%AF%E4%B8%80%E4%B8%AA%E7%8A%B6%E6%80%81%2C%20%E5%B9%B6%E4%B8%8D%E6%98%AF%20%E7%9B%B4%E6%8E%A5%20%E7%A3%81%E7%9B%98io" tabindex="-1">commit 只是一个状态, 并不是 直接 磁盘io <a class="header-anchor" href="#commit 只是一个状态%2C 并不是 直接 磁盘io" aria-label="Permalink to &quot;commit 只是一个状态, 并不是 直接 磁盘io&quot;">​</a></h3><h3 id="%E5%AF%B9%E4%BA%8E%20%E5%B9%B6%E5%8F%91%E6%80%A7%E9%AB%98%E4%BD%8E%2C%20%E5%8F%96%E5%86%B3%E4%BA%8E%20%E9%9A%94%E7%A6%BB%E6%80%A7%E7%9A%84%E9%AB%98%E4%BD%8E%20%2C%20%E4%B9%9F%E5%86%B3%E5%AE%9A%E4%BA%86%20%E5%AE%89%E5%85%A8%E6%80%A7" tabindex="-1">对于 并发性高低, 取决于 隔离性的高低 , 也决定了 安全性 <a class="header-anchor" href="#对于 并发性高低%2C 取决于 隔离性的高低 %2C 也决定了 安全性" aria-label="Permalink to &quot;对于 并发性高低, 取决于 隔离性的高低 , 也决定了 安全性&quot;">​</a></h3></blockquote><h2 id="ACID%E7%89%B9%E6%80%A7%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6" tabindex="-1">ACID特性的实现机制 <a class="header-anchor" href="#ACID特性的实现机制" aria-label="Permalink to &quot;ACID特性的实现机制&quot;">​</a></h2><ul><li><h3 id="Undo%20Log%3A%20%E7%94%A8%E4%BA%8E%E5%9B%9E%E6%BB%9A%E6%9C%AA%E5%AE%8C%E6%88%90%E7%9A%84%E4%BA%8B%E5%8A%A1%EF%BC%8C%E4%BF%9D%E8%AF%81%E5%8E%9F%E5%AD%90%E6%80%A7%E3%80%82" tabindex="-1"><strong>Undo Log</strong>: 用于回滚未完成的事务，保证原子性。 <a class="header-anchor" href="#Undo Log%3A 用于回滚未完成的事务，保证原子性。" aria-label="Permalink to &quot;**Undo Log**: 用于回滚未完成的事务，保证原子性。&quot;">​</a></h3></li><li><h3 id="Redo%20Log%3A%20%E7%94%A8%E4%BA%8E%E6%81%A2%E5%A4%8D%E5%B7%B2%E6%8F%90%E4%BA%A4%E7%9A%84%E4%BA%8B%E5%8A%A1%EF%BC%8C%E4%BF%9D%E8%AF%81%E6%8C%81%E4%B9%85%E6%80%A7%E3%80%82" tabindex="-1"><strong>Redo Log</strong>: 用于恢复已提交的事务，<strong>保证持久性</strong>。 <a class="header-anchor" href="#Redo Log%3A 用于恢复已提交的事务，保证持久性。" aria-label="Permalink to &quot;**Redo Log**: 用于恢复已提交的事务，**保证持久性**。&quot;">​</a></h3><blockquote><ol><li><p><strong>保证持久性</strong>：</p><ul><li><p>当事务提交后，**即使系统崩溃或掉电，**Redo Log 也能确保事务的修改被持久化到磁盘。</p><blockquote><p>这个意思是, 提交了, 放到缓存了, 还没写磁盘</p><p>事务虽然提交了，但数据却没有真正保存到磁盘，导致数据不一致</p></blockquote></li><li><p>数据库可以通过重做日志恢复已提交的事务，避免数据丢失。</p></li></ul></li><li><p><strong>提高性能</strong>：</p><ul><li>数据库的写操作通常是<strong>先写入内存（缓冲区），再异步写入磁盘。Redo Log 允许事务提交时只写日志</strong>，而不是立即将数据写入磁盘，从而提高性能。</li></ul></li></ol><blockquote><h4 id="Redo%20Log%20%E7%9A%84%E5%86%99%E5%85%A5%E7%8A%B6%E6%80%81" tabindex="-1"><strong>Redo Log 的写入状态</strong> <a class="header-anchor" href="#Redo Log 的写入状态" aria-label="Permalink to &quot;**Redo Log 的写入状态**&quot;">​</a></h4><ul><li><strong>Redo Log 是顺序写入的</strong>，并且每次写入都会记录一个事务的状态（如 &quot;准备提交&quot; 或 &quot;已提交&quot;）。</li><li>如果数据库重启时发现某个事务的状态是 &quot;准备提交&quot; 而不是 &quot;已提交&quot;，说明事务未完成，数据可能写了一半。</li></ul></blockquote></blockquote></li><li><p><strong>锁机制</strong>: 用于控制<strong>并发事务</strong>的隔离性。</p></li><li><p><strong>约束和规则</strong>: 用于保证<strong>数据的一致性</strong>。</p></li></ul><blockquote><h3 id="ACD%20%E7%94%B1%20%20%E6%97%A5%E5%BF%97%20%E4%BF%9D%E8%AF%81" tabindex="-1">ACD 由 日志 保证 <a class="header-anchor" href="#ACD 由  日志 保证" aria-label="Permalink to &quot;ACD 由  日志 保证&quot;">​</a></h3><h3 id="I%20%E7%94%B1%20%E9%94%81%E6%9C%BA%E5%88%B6%2Bmvcc%20%E4%BF%9D%E8%AF%81" tabindex="-1">I 由 锁机制+mvcc 保证 <a class="header-anchor" href="#I 由 锁机制%2Bmvcc 保证" aria-label="Permalink to &quot;I 由 锁机制+mvcc 保证&quot;">​</a></h3></blockquote><h2 id="mysql%E9%87%8D%E7%82%B9" tabindex="-1">mysql重点 <a class="header-anchor" href="#mysql重点" aria-label="Permalink to &quot;mysql重点&quot;">​</a></h2><blockquote><h3 id="%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84%E6%98%AF" tabindex="-1">最重要的是 <a class="header-anchor" href="#最重要的是" aria-label="Permalink to &quot;最重要的是&quot;">​</a></h3><h2 id="%E6%97%A5%E5%BF%97!!!" tabindex="-1"><strong>日志!!!</strong> <a class="header-anchor" href="#日志!!!" aria-label="Permalink to &quot;**日志!!!**&quot;">​</a></h2></blockquote><h1 id="%E8%84%8F%E8%AF%BB%2C%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB%2C%E5%B9%BB%E8%AF%BB" tabindex="-1">脏读,不可重复读,幻读 <a class="header-anchor" href="#脏读%2C不可重复读%2C幻读" aria-label="Permalink to &quot;脏读,不可重复读,幻读&quot;">​</a></h1><h2 id="%E4%BA%8B%E5%8A%A1%E5%B9%B6%E5%8F%91%E9%97%AE%E9%A2%98" tabindex="-1">事务并发问题 <a class="header-anchor" href="#事务并发问题" aria-label="Permalink to &quot;事务并发问题&quot;">​</a></h2><p>事务并发执行时，如果不加以控制，可能会导致以下问题：</p><ul><li><h3 id="%E8%84%8F%E8%AF%BB%EF%BC%88Dirty%20Read%EF%BC%89%EF%BC%9A----%20%E5%BF%85%E9%A1%BB%E6%9D%9C%E7%BB%9D" tabindex="-1"><strong>脏读（Dirty Read）</strong>：---- 必须杜绝 <a class="header-anchor" href="#脏读（Dirty Read）：---- 必须杜绝" aria-label="Permalink to &quot;**脏读（Dirty Read）**：---- 必须杜绝&quot;">​</a></h3><ul><li>一个事务读取了另一个事务尚未提交的数据。</li><li>如果另一个事务回滚，则读取到的数据是无效的。</li><li><strong>必须杜绝</strong>，因为它会导致严重的数据不一致问题。</li></ul><blockquote><h3 id="%E8%84%8F%E8%AF%BB%2C%20%E9%9C%80%E8%A6%81%20%E9%85%8D%E5%90%88%20%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%20%E7%90%86%E8%A7%A3%20%20---%20%E4%B8%8D%E7%84%B6%E7%90%86%E8%A7%A3%E4%B8%8D%E4%BA%86!!" tabindex="-1">脏读, 需要 配合 <strong>事务隔离级别</strong> 理解 --- 不然理解不了!! <a class="header-anchor" href="#脏读%2C 需要 配合 事务隔离级别 理解  --- 不然理解不了!!" aria-label="Permalink to &quot;脏读, 需要 配合 **事务隔离级别** 理解  --- 不然理解不了!!&quot;">​</a></h3><p>在某些数据库的默认事务隔离级别（如 <strong>Read Uncommitted</strong>）下</p><h3 id="%E4%BA%8B%E5%8A%A1B%E6%98%AF%E5%85%81%E8%AE%B8%E8%AF%BB%E5%8F%96%E4%BA%8B%E5%8A%A1A%E5%B0%9A%E6%9C%AA%E6%8F%90%E4%BA%A4%E7%9A%84%E6%95%B0%E6%8D%AE%E7%9A%84%E3%80%82" tabindex="-1">事务B是允许读取事务A尚未提交的数据的。 <a class="header-anchor" href="#事务B是允许读取事务A尚未提交的数据的。" aria-label="Permalink to &quot;事务B是允许读取事务A尚未提交的数据的。&quot;">​</a></h3><p>这种行为就是导致<strong>脏读</strong>的原因。</p><h3 id="%E7%A4%BA%E4%BE%8B-4" tabindex="-1">示例 <a class="header-anchor" href="#示例-4" aria-label="Permalink to &quot;示例&quot;">​</a></h3><ol><li><p><strong>事务A</strong>：正在修改一条数据，但还没有提交。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BEGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                     </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> accounts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                     </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 此时事务A还没有提交</span></span></code></pre></div></li><li><p><strong>事务B</strong>：在事务A提交之前，读取了事务A修改的数据。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> accounts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                     </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 读取到了事务A尚未提交的修改结果</span></span></code></pre></div></li><li><p>如果事务A随后回滚：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ROLLBACK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                     </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 数据恢复到事务A修改之前的状态</span></span></code></pre></div></li></ol><p>此时，事务B读取到的数据是无效的，因为事务A的修改并没有真正生效。这种读取未提交数据的行为就是<strong>脏读</strong>。</p></blockquote></li><li><h3 id="%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB%EF%BC%88Non-Repeatable%20Read%EF%BC%89%EF%BC%9A%20%20---%20%E5%8F%AF%E8%83%BD%E6%98%AF%E5%85%81%E8%AE%B8%E7%9A%84%20--%20%E6%95%B0%E6%8D%AE%E5%80%BC%E8%A2%AB%E4%BF%AE%E6%94%B9" tabindex="-1"><strong>不可重复读（Non-Repeatable Read）</strong>： --- 可能是允许的 -- 数据值被修改 <a class="header-anchor" href="#不可重复读（Non-Repeatable Read）：  --- 可能是允许的 -- 数据值被修改" aria-label="Permalink to &quot;**不可重复读（Non-Repeatable Read）**：  --- 可能是允许的 -- 数据值被修改&quot;">​</a></h3><ul><li>一个事务在两次读取同一数据时，发现数据被另一个事务修改并提交，导致两次读取结果不一致。</li><li><h3 id="%E4%B9%9F%E5%B0%B1%E6%98%AF%2C%20%E5%8F%A6%E4%B8%80%E4%B8%AA%E4%BA%8B%E5%8A%A1%E4%BF%AE%E6%94%B9%2C%20%E4%B8%8D%E5%BD%B1%E5%93%8D%2C%20%E8%AF%BB%E5%88%B0%E8%BF%98%E6%98%AF%20%E6%9C%AA%E4%BF%AE%E6%94%B9%E7%9A%84" tabindex="-1">也就是, 另一个事务修改, 不影响, 读到还是 未修改的 <a class="header-anchor" href="#也就是%2C 另一个事务修改%2C 不影响%2C 读到还是 未修改的" aria-label="Permalink to &quot;也就是, 另一个事务修改, 不影响, 读到还是 未修改的&quot;">​</a></h3></li><li><strong>是否需要杜绝</strong>取决于业务需求，某些场景下可以接受。</li></ul></li><li><h3 id="%E5%B9%BB%E8%AF%BB%EF%BC%88Phantom%20Read%EF%BC%89%EF%BC%9A%20--%20%E6%95%B0%E6%8D%AE%E8%A1%8C%E8%A2%AB%E6%96%B0%E5%A2%9E%E6%88%96%E5%88%A0%E9%99%A4%E3%80%82" tabindex="-1"><strong>幻读（Phantom Read）</strong>： -- 数据行被新增或删除。 <a class="header-anchor" href="#幻读（Phantom Read）： -- 数据行被新增或删除。" aria-label="Permalink to &quot;**幻读（Phantom Read）**： -- 数据行被新增或删除。&quot;">​</a></h3><ul><li>一个事务在两次查询时，发现数据的数量发生了变化（如新增或删除了符合查询条件的记录）。</li><li><strong>是否需要杜绝</strong>同样取决于业务需求。</li></ul></li></ul><h2 id="%E4%BA%8B%E5%8A%A1%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4" tabindex="-1">事务相关命令 <a class="header-anchor" href="#事务相关命令" aria-label="Permalink to &quot;事务相关命令&quot;">​</a></h2><ul><li><p><strong>事务控制命令</strong>：</p><ul><li><code>BEGIN</code>：开启事务。</li><li><code>COMMIT</code>：提交事务。</li><li><code>ROLLBACK</code>：回滚事务。</li><li><code>SAVEPOINT point1</code>: 设置一个名字为point1的保存点</li><li><code>ROLLBACK TO point1</code>：回滚到指定的保存点。</li></ul></li><li><p><strong>自动提交设置</strong>： -- 加 @@ --- 这表示系统变量</p><ul><li><code>SET AUTOCOMMIT = 0</code>：关闭自动提交，改为手动提交事务。</li><li><code>SET AUTOCOMMIT = 1</code>：开启自动提交。</li></ul></li><li><p><strong>隔离级别设置</strong>：</p><ul><li><code>SET TRANSACTION ISOLATION LEVEL &lt;级别&gt;</code>：设置事务的隔离级别。</li><li><code>SELECT @@tx_isolation</code>：查询当前事务的隔离级别。</li><li><h3 id="%E5%9C%A8%20MySQL%208.0%20%E5%8F%8A%E6%9B%B4%E9%AB%98%E7%89%88%E6%9C%AC%E4%B8%AD%EF%BC%8C%40%40tx_isolation%20%E5%B7%B2%E8%A2%AB%E5%BC%83%E7%94%A8%EF%BC%8C%E6%94%B9%E4%B8%BA%E4%BD%BF%E7%94%A8%20%40%40transaction_isolation" tabindex="-1">在 MySQL 8.0 及更高版本中，<code>@@tx_isolation</code> 已被弃用，改为使用 <code>@@transaction_isolation</code> <a class="header-anchor" href="#在 MySQL 8.0 及更高版本中，%40%40tx_isolation 已被弃用，改为使用 %40%40transaction_isolation" aria-label="Permalink to &quot;在 MySQL 8.0 及更高版本中，\`@@tx_isolation\` 已被弃用，改为使用 \`@@transaction_isolation\`&quot;">​</a></h3></li></ul></li></ul><h1 id="%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB" tabindex="-1">事务隔离级别 <a class="header-anchor" href="#事务隔离级别" aria-label="Permalink to &quot;事务隔离级别&quot;">​</a></h1><h2 id="%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E7%9A%84%E4%BD%9C%E7%94%A8-why" tabindex="-1">事务隔离级别的作用-why <a class="header-anchor" href="#事务隔离级别的作用-why" aria-label="Permalink to &quot;事务隔离级别的作用-why&quot;">​</a></h2><ul><li>事务隔离级别用于解决事务并发执行时的数据安全问题。</li><li>主要问题包括：脏读（Dirty Read）、不可重复读（Non-Repeatable Read）、幻读（Phantom Read）。</li></ul><blockquote><h3 id="%E6%B7%AE%E8%AF%9D" tabindex="-1">淮话 <a class="header-anchor" href="#淮话" aria-label="Permalink to &quot;淮话&quot;">​</a></h3><p>数据在并发执行时, 可能出现 脏读,不可重复读,幻读, 不能保证数据的 安全性,</p><p>而 这并非都是 不允许的, 因此, 出现了 事务隔离级别, 有的 需要完全杜绝, 有的可以被允许</p></blockquote><h2 id="%E5%9B%9B%E7%A7%8D%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB" tabindex="-1">四种事务隔离级别 <a class="header-anchor" href="#四种事务隔离级别" aria-label="Permalink to &quot;四种事务隔离级别&quot;">​</a></h2><ul><li><p><strong>未提交读（Read Uncommitted）</strong></p><ul><li>允许读取未提交的数据。</li><li>问题：可能发生脏读、不可重复读和幻读。</li></ul></li><li><p><strong>已提交读（Read Committed）</strong></p><ul><li>只能读取已提交的数据。</li><li>解决了脏读问题，但仍可能发生不可重复读和幻读。</li><li>Oracle 默认隔离级别。</li></ul></li><li><p><strong>可重复读（Repeatable Read）</strong></p><ul><li>保证同一事务中多次读取的数据一致。</li><li>解决了脏读和不可重复读问题，但可能发生幻读。</li><li>MySQL 默认隔离级别。</li></ul></li><li><h3 id="%E4%B8%B2%E8%A1%8C%E5%8C%96%EF%BC%88Serializable%EF%BC%89%20%20-%20%20%E5%B9%B6%E5%8F%91%E5%A0%AA%E5%BF%A7" tabindex="-1"><strong>串行化（Serializable）</strong> - <code>并发堪忧</code> <a class="header-anchor" href="#串行化（Serializable）  -  并发堪忧" aria-label="Permalink to &quot;**串行化（Serializable）**  -  \`并发堪忧\`&quot;">​</a></h3><ul><li>最高隔离级别，事务串行执行。</li><li>解决了脏读、不可重复读和幻读问题，<strong>但并发性能最低</strong>。</li></ul></li></ul><h2 id="%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E4%B8%8E%E9%97%AE%E9%A2%98%E7%9A%84%E5%85%B3%E7%B3%BB" tabindex="-1">隔离级别与问题的关系 <a class="header-anchor" href="#隔离级别与问题的关系" aria-label="Permalink to &quot;隔离级别与问题的关系&quot;">​</a></h2><table tabindex="0"><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>未提交读</td><td>可能</td><td>可能</td><td>可能</td></tr><tr><td>已提交读</td><td>不可能</td><td>可能</td><td>可能</td></tr><tr><td>可重复读</td><td>不可能</td><td>不可能</td><td>可能</td></tr><tr><td>串行化</td><td>不可能</td><td>不可能</td><td>不可能</td></tr></tbody></table><h2 id="MySQL%20%E5%92%8C%20Oracle%20%E7%9A%84%E9%BB%98%E8%AE%A4%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB" tabindex="-1">MySQL 和 Oracle 的默认隔离级别 <a class="header-anchor" href="#MySQL 和 Oracle 的默认隔离级别" aria-label="Permalink to &quot;MySQL 和 Oracle 的默认隔离级别&quot;">​</a></h2><ul><li><strong>MySQL</strong>：可重复读（Repeatable Read）。 -- 默认 不允许 脏读和 不可重复读</li><li><strong>Oracle</strong>：已提交读（Read Committed）。--- 即默认不允许 脏读</li></ul><h2 id="%E4%BF%AE%E6%94%B9%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB" tabindex="-1">修改隔离级别 <a class="header-anchor" href="#修改隔离级别" aria-label="Permalink to &quot;修改隔离级别&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @@transaction_isolation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;级别&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> //</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 级别</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> READ-UNCOMMITTED</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> READ-COMMITTED</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> REPEATABLE-READ</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SERIALIZABLE</span></span></code></pre></div><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p></p><h3 id="%E7%9F%AD%E6%9D%A0%E6%98%AF%E4%B8%AD%E9%97%B4%2C%20%20%E4%B8%8D%E6%98%AF%20%E4%B8%8B%E5%88%92%E7%BA%BF" tabindex="-1"><strong>短杠是中间, 不是 下划线</strong> <a class="header-anchor" href="#短杠是中间%2C  不是 下划线" aria-label="Permalink to &quot;**短杠是中间,  不是 下划线**&quot;">​</a></h3><h3 id="%40%40%20%E6%9F%A5%E8%AF%A2%E9%9C%80%E8%A6%81%2C%20%20%E4%BF%AE%E6%94%B9%E4%B8%8D%E9%9C%80%E8%A6%81---%E6%9C%89%E7%82%B9%E5%8F%98%E6%80%81" tabindex="-1"><strong>@@ 查询需要, 修改不需要</strong>---<strong>有点变态</strong> <a class="header-anchor" href="#%40%40 查询需要%2C  修改不需要---有点变态" aria-label="Permalink to &quot;**@@ 查询需要,  修改不需要**---**有点变态**&quot;">​</a></h3><h3 id="%E4%BF%AE%E6%94%B9%E5%AE%8C%E5%BF%85%E9%A1%BB%20%20%E7%9C%8B%E4%B8%80%E4%B8%8B%E6%98%AF%E5%90%A6%E6%88%90%E5%8A%9F!!" tabindex="-1"><strong>修改完必须 看一下是否成功!!</strong> <a class="header-anchor" href="#修改完必须  看一下是否成功!!" aria-label="Permalink to &quot;**修改完必须  看一下是否成功!!**&quot;">​</a></h3></div><h2 id="%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E5%AE%9E%E8%B7%B5" tabindex="-1">隔离级别实践 <a class="header-anchor" href="#隔离级别实践" aria-label="Permalink to &quot;隔离级别实践&quot;">​</a></h2><p>开启两个 mysqld, user为例</p><blockquote><p>修改隔离级别</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transaction_isolation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;READ-UNCOMMITTED&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用@@, 不会生效</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @@transaction_isolation;</span></span></code></pre></div></blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xing huai&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">26</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xing huai&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xing huai&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 读到了 未提交的 修改</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">rollback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><blockquote><p>设置 为 提交读, 继续测试</p><p>修改完 提交 <code>commit</code></p></blockquote><blockquote><p>设置为 可重复读 , 继续测试</p><p>在修改后, 提交后</p><p>另一个读取的 仍是 未修改的值</p></blockquote><blockquote><p>设置为 串行,</p><h2 id="%E8%BF%9B%E8%A1%8C%20%E5%86%99%2C%20%E7%9B%B4%E6%8E%A5%20%E9%98%BB%E5%A1%9E%E4%BA%86%2C%20%E9%94%81%E4%BD%8F%E4%BA%86!!" tabindex="-1">进行 写, <strong>直接 阻塞了, 锁住了!!</strong> <a class="header-anchor" href="#进行 写%2C 直接 阻塞了%2C 锁住了!!" aria-label="Permalink to &quot;进行 写, **直接 阻塞了, 锁住了!!**&quot;">​</a></h2></blockquote><h2 id="%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB%E9%97%AE%E9%A2%98" tabindex="-1">可重复读问题 <a class="header-anchor" href="#可重复读问题" aria-label="Permalink to &quot;可重复读问题&quot;">​</a></h2><p>可重复读 并不能 完全意义上, 防止 幻读</p><blockquote><h3 id="%E5%8F%AF%E4%BB%A5%E9%98%B2%E6%AD%A2%2C%20%20%E4%BD%86%20%E4%B8%8D%E8%83%BD%E5%AE%8C%E5%85%A8%20%E9%98%B2%E6%AD%A2" tabindex="-1">可以防止, 但 不能完全 防止 <a class="header-anchor" href="#可以防止%2C  但 不能完全 防止" aria-label="Permalink to &quot;可以防止,  但 不能完全 防止&quot;">​</a></h3><p>在一个 mysql 服务里, 防止了 幻读 发生</p><p>但是 在另一个 已经 进入事务 并读过的 mysql服务里, 不能 防止 幻读发生</p></blockquote><blockquote><h3 id="%E4%BE%8B%E5%AD%90" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transaction_isolation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;REPEATABLE-READ&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">insert into</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,age,sex) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hehe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;man&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 还是原来的</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hehe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 能成功, </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 不能看到新的</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> updata;  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 能看到, 出现幻读</span></span></code></pre></div><p>但是,还是看不到, 不知道为啥, 和老师的 不太一样</p><h2 id="%E8%80%81%E5%B8%88%E7%9A%84%20%E7%9C%8B%E5%88%B0%E4%BA%86%E5%B9%BB%E8%AF%BB%2C%20%E6%88%91%E7%9A%84%E6%B2%A1%E7%9C%8B%E5%88%B0%20%E5%B9%BB%E8%AF%BB" tabindex="-1">老师的 看到了幻读, 我的没看到 幻读 <a class="header-anchor" href="#老师的 看到了幻读%2C 我的没看到 幻读" aria-label="Permalink to &quot;老师的 看到了幻读, 我的没看到 幻读&quot;">​</a></h2><h3 id="25-05-15-%20%E4%BD%BF%E7%94%A8%20select%20...%20for%20update%20%20%E4%BC%9A%E7%9C%8B%E5%88%B0%E5%B9%BB%E8%AF%BB%20--%208.0.x%20%E7%89%88%E6%9C%AC--%20%E6%AD%A4%E6%97%B6%E5%85%B6%E4%BB%96%E4%BA%8B%E5%8A%A1%E4%B8%8D%E8%83%BD%E4%BF%AE%E6%94%B9" tabindex="-1">25-05-15- 使用 <code>select ... for update</code> 会看到幻读 -- 8.0.x 版本-- 此时其他事务不能修改 <a class="header-anchor" href="#25-05-15- 使用 select ... for update  会看到幻读 -- 8.0.x 版本-- 此时其他事务不能修改" aria-label="Permalink to &quot;25-05-15- 使用 \`select ... for update\`  会看到幻读 -- 8.0.x 版本-- 此时其他事务不能修改&quot;">​</a></h3><blockquote><p><code>SELECT ... FOR UPDATE</code> 是一种<strong>加锁查询</strong>语句，常用于数据库事务中。</p><hr><h3 id="%E4%BD%9C%E7%94%A8%E8%AF%B4%E6%98%8E" tabindex="-1">作用说明 <a class="header-anchor" href="#作用说明" aria-label="Permalink to &quot;作用说明&quot;">​</a></h3><ul><li>查询数据的同时，对查询到的行<strong>加排他锁（行锁）</strong>。</li><li>在当前事务提交前，其他事务<strong>不能修改或删除</strong>这些被锁定的行。</li><li>主要用于<strong>防止并发修改、保证数据一致性</strong>，常见于“先查后改”场景。</li></ul></blockquote></blockquote><blockquote><h3 id="%E5%92%8C%E8%80%81%E5%B8%88%20%E7%BB%93%E6%9E%9C%20%E4%B8%8D%E5%A4%AA%E4%B8%80%E6%A0%B7" tabindex="-1">和老师 结果 不太一样 <a class="header-anchor" href="#和老师 结果 不太一样" aria-label="Permalink to &quot;和老师 结果 不太一样&quot;">​</a></h3><h3 id="%E5%85%B7%E4%BD%93%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90" tabindex="-1">具体行为分析 <a class="header-anchor" href="#具体行为分析" aria-label="Permalink to &quot;具体行为分析&quot;">​</a></h3><h4 id="%E4%BA%8B%E5%8A%A1%201%20%E5%92%8C%E4%BA%8B%E5%8A%A1%202%20%E7%9A%84%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B" tabindex="-1">事务 1 和事务 2 的操作流程 <a class="header-anchor" href="#事务 1 和事务 2 的操作流程" aria-label="Permalink to &quot;事务 1 和事务 2 的操作流程&quot;">​</a></h4><ol><li><strong>事务 2 开始时的快照视图</strong><ul><li>事务 2 在 <code>BEGIN</code> 时创建了一个快照视图。</li><li>此时，<code>user</code> 表中没有 <code> name=&#39;hehe&#39;</code> 的记录。</li></ul></li><li><strong>事务 1 插入数据</strong><ul><li>事务 1 插入了一条 <code> name=&#39;hehe&#39;</code> 的记录，但事务 2 的快照视图不会更新。</li></ul></li><li><strong>事务 2 查询数据</strong><ul><li>事务 2 的 <code>SELECT</code> 查询基于快照视图，因此看不到事务 1 插入的数据。</li></ul></li><li><strong>事务 1 提交</strong><ul><li>事务 1 提交后，数据对其他事务可见，但事务 2 的快照视图仍然不变。</li></ul></li><li><strong>事务 2 的 <code>UPDATE</code></strong><ul><li><code>UPDATE</code> 操作不依赖快照视图，而是直接操作当前最新的数据，因此可以成功更新事务 1 提交的记录。</li></ul></li></ol></blockquote><h2 id="%E5%85%B3%E4%BA%8E%20%E5%B9%BB%E8%AF%BB" tabindex="-1">关于 幻读 <a class="header-anchor" href="#关于 幻读" aria-label="Permalink to &quot;关于 幻读&quot;">​</a></h2><blockquote><h3 id="%E5%9B%9E%E7%AD%94" tabindex="-1">回答 <a class="header-anchor" href="#回答" aria-label="Permalink to &quot;回答&quot;">​</a></h3><ol><li><p><strong>在事务里，不同的 MySQL 会话是隔开的</strong></p><ul><li>每个事务在自己的会话中运行，事务之间的数据是隔离的，具体隔离程度取决于事务的隔离级别。</li><li>例如： <ul><li>在 <code>READ UNCOMMITTED</code> 隔离级别下，一个事务可以读取另一个事务未提交的数据。</li><li>在 <code>REPEATABLE READ</code> 或更高隔离级别下，一个事务无法看到另一个事务未提交的更改。</li></ul></li></ul></li><li><p><strong>同一个事务里，不会发生幻读吗？</strong></p><ul><li><p><strong>是否发生幻读取决于隔离级别：</strong></p><ul><li><strong><code>READ UNCOMMITTED</code> 和 <code>READ COMMITTED</code></strong>：可能发生幻读。</li><li><strong><code>REPEATABLE READ</code></strong>：在 MySQL 中，<code>REPEATABLE READ</code> 使用 MVCC（多版本并发控制）机制，通常可以防止幻读，但仅限于 <code>SELECT</code> 查询。对于 <code>INSERT</code> 或 <code>DELETE</code> 操作引发的幻读，<code>REPEATABLE READ</code> 可能无法完全防止。</li><li><strong><code>SERIALIZABLE</code></strong>：完全防止幻读，因为事务是串行执行的。</li></ul></li><li><p><strong>幻读的定义：</strong></p><ul><li>幻读是指在同一个事务中，前后两次查询结果集的行数不一致。例如： <ul><li>第一次查询条件为 <code>age &gt; 20</code>，返回 5 行。</li><li>另一个事务插入了一条符合条件的记录。</li><li>第二次查询条件相同，但返回了 6 行。</li></ul></li></ul></li><li><p><strong>在 <code>REPEATABLE READ</code> 下的特殊情况：</strong></p><ul><li>MySQL 的 <code>REPEATABLE READ</code> 隔离级别通过 MVCC 防止了大多数幻读，但对于某些操作（如范围查询中的 <code>INSERT</code>），可能仍会发生幻读。</li></ul></li></ul></li></ol><hr><h3 id="%E6%80%BB%E7%BB%93-11" tabindex="-1">总结 <a class="header-anchor" href="#总结-11" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li><strong>不同事务是隔离的</strong>，但隔离程度取决于隔离级别。</li><li><strong>同一个事务中是否发生幻读</strong>，取决于隔离级别： <ul><li><code>SERIALIZABLE</code>：完全防止幻读。</li><li><code>REPEATABLE READ</code>：大多数情况下防止幻读，但可能<strong>无法完全防止范</strong>围查询中的幻读。</li><li><code>READ COMMITTED</code> 和 <code>READ UNCOMMITTED</code>：可能发生幻读。</li></ul></li></ul></blockquote><h2 id="%E6%80%A7%E8%83%BD%E4%B8%8E%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E7%9A%84%E6%9D%83%E8%A1%A1" tabindex="-1">性能与隔离级别的权衡 <a class="header-anchor" href="#性能与隔离级别的权衡" aria-label="Permalink to &quot;性能与隔离级别的权衡&quot;">​</a></h2><ul><li>隔离级别越高，数据安全性越强，但性能开销越大。</li><li>串行化隔离级别虽然最安全，但并发性能最差，实际中很少使用。</li></ul><h2 id="MySQL%20%E7%9A%84%20MVCC%EF%BC%88%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%89-%E5%85%88%E4%BA%86%E8%A7%A3" tabindex="-1">MySQL 的 MVCC（多版本并发控制）-先了解 <a class="header-anchor" href="#MySQL 的 MVCC（多版本并发控制）-先了解" aria-label="Permalink to &quot;MySQL 的 MVCC（多版本并发控制）-先了解&quot;">​</a></h2><ul><li>MySQL 使用 MVCC 和锁机制来实现隔离级别。</li><li>可重复读隔离级别下，MVCC 可以防止脏读和不可重复读，但无法完全防止幻读。</li></ul><h1 id="25-05-14" tabindex="-1">25-05-14 <a class="header-anchor" href="#25-05-14" aria-label="Permalink to &quot;25-05-14&quot;">​</a></h1><h1 id="%E7%B3%BB%E7%BB%9F%E5%B4%A9%E6%BA%83%E7%9A%84%E5%A4%84%E7%90%86%E6%AD%A5%E9%AA%A4-%E8%A1%A5%E5%85%85" tabindex="-1">系统崩溃的处理步骤-补充 <a class="header-anchor" href="#系统崩溃的处理步骤-补充" aria-label="Permalink to &quot;系统崩溃的处理步骤-补充&quot;">​</a></h1><blockquote><p>详细讲解<strong>数据库事务</strong>与**断电/崩溃（宕机）**时的数据安全保障机制。</p><hr><h2 id="%E4%B8%80%E3%80%81%E4%BA%8B%E5%8A%A1%EF%BC%88Transaction%EF%BC%89%E8%AF%A6%E8%A7%A3" tabindex="-1">一、事务（Transaction）详解 <a class="header-anchor" href="#一、事务（Transaction）详解" aria-label="Permalink to &quot;一、事务（Transaction）详解&quot;">​</a></h2><p>事务是数据库管理系统中的一个操作序列，这些操作要么全部执行，要么全部不执行。事务的四大特性（ACID）：</p><ol><li><p><strong>原子性（Atomicity）</strong><br> 事务中的所有操作要么全部完成，要么全部不完成，不会停留在中间状态。</p></li><li><p><strong>一致性（Consistency）</strong><br> 事务执行前后，数据库都处于一致性状态。例如转账操作，A账户扣钱，B账户加钱，不能只扣不加。</p></li><li><p><strong>隔离性（Isolation）</strong><br> 并发执行的事务之间互不影响。隔离级别不同，影响并发读写的效果。</p></li><li><p><strong>持久性（Durability）</strong><br> 事务一旦提交，对数据库的修改就是永久性的，即使系统崩溃也不会丢失。</p></li></ol><hr><h2 id="%E4%BA%8C%E3%80%81%E6%96%AD%E7%94%B5%2F%E5%B4%A9%E6%BA%83%E6%97%B6%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8" tabindex="-1">二、断电/崩溃时的数据安全 <a class="header-anchor" href="#二、断电%2F崩溃时的数据安全" aria-label="Permalink to &quot;二、断电/崩溃时的数据安全&quot;">​</a></h2><h3 id="1.%20%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0" tabindex="-1">1. 问题描述 <a class="header-anchor" href="#1. 问题描述" aria-label="Permalink to &quot;1. 问题描述&quot;">​</a></h3><ul><li>当数据库正在执行事务时突然断电或崩溃，内存中的数据会丢失。</li><li>如何保证已提交的事务数据不会丢失？未提交的数据不会“污染”数据库？</li></ul><h3 id="2.%20%E5%85%B3%E9%94%AE%E6%9C%BA%E5%88%B6" tabindex="-1">2. 关键机制 <a class="header-anchor" href="#2. 关键机制" aria-label="Permalink to &quot;2. 关键机制&quot;">​</a></h3><h4 id="%EF%BC%881%EF%BC%89WAL%EF%BC%88Write-Ahead%20Logging%EF%BC%8C%E9%A2%84%E5%86%99%E5%BC%8F%E6%97%A5%E5%BF%97%EF%BC%89" tabindex="-1">（1）WAL（Write-Ahead Logging，预写式日志） <a class="header-anchor" href="#（1）WAL（Write-Ahead Logging，预写式日志）" aria-label="Permalink to &quot;（1）WAL（Write-Ahead Logging，预写式日志）&quot;">​</a></h4><ul><li><strong>原理</strong>：先写日志，再写数据。</li><li>当事务执行时，先把操作记录到日志（如redo log），再修改数据页。</li><li>日志通常会先写入磁盘，保证即使断电，日志也能恢复数据。</li></ul><h4 id="%EF%BC%882%EF%BC%89Redo%20Log%EF%BC%88%E9%87%8D%E5%81%9A%E6%97%A5%E5%BF%97%EF%BC%89" tabindex="-1">（2）Redo Log（重做日志） <a class="header-anchor" href="#（2）Redo Log（重做日志）" aria-label="Permalink to &quot;（2）Redo Log（重做日志）&quot;">​</a></h4><ul><li>记录已提交事务对数据的修改。</li><li>崩溃恢复时，数据库会根据redo log把已提交但未写入磁盘的数据“重做”一遍，保证持久性。</li></ul><h4 id="%EF%BC%883%EF%BC%89Undo%20Log%EF%BC%88%E5%9B%9E%E6%BB%9A%E6%97%A5%E5%BF%97%EF%BC%89" tabindex="-1">（3）Undo Log（回滚日志） <a class="header-anchor" href="#（3）Undo Log（回滚日志）" aria-label="Permalink to &quot;（3）Undo Log（回滚日志）&quot;">​</a></h4><ul><li>记录事务执行前的数据快照。</li><li>用于回滚未提交的事务，保证原子性和一致性。</li></ul><h4 id="%EF%BC%884%EF%BC%89%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4" tabindex="-1">（4）两阶段提交 <a class="header-anchor" href="#（4）两阶段提交" aria-label="Permalink to &quot;（4）两阶段提交&quot;">​</a></h4><ul><li>保证事务的提交过程可靠，防止部分提交。</li></ul><h3 id="3.%20%E5%B4%A9%E6%BA%83%E6%81%A2%E5%A4%8D%E6%B5%81%E7%A8%8B" tabindex="-1">3. 崩溃恢复流程 <a class="header-anchor" href="#3. 崩溃恢复流程" aria-label="Permalink to &quot;3. 崩溃恢复流程&quot;">​</a></h3><ol><li><strong>崩溃发生</strong>，数据库重启。</li><li><strong>扫描redo log</strong>，找到所有已提交但未写入磁盘的数据，进行重做（保证持久性）。</li><li><strong>扫描undo log</strong>，回滚所有未提交的事务（保证原子性和一致性）。</li><li>数据库恢复到崩溃前的正确状态。</li></ol><h3 id="4.%20%E4%BE%8B%E5%AD%90%E8%AF%B4%E6%98%8E" tabindex="-1">4. 例子说明 <a class="header-anchor" href="#4. 例子说明" aria-label="Permalink to &quot;4. 例子说明&quot;">​</a></h3><p>假设有如下转账事务：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BEGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> account </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> account </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> balance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">COMMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li><strong>执行过程中断电</strong>：如果事务未提交，undo log会回滚所有操作，数据不会被污染。</li><li><strong>刚提交还未写入磁盘断电</strong>：redo log已写入磁盘，重启后数据库会根据redo log重做操作，保证数据不丢失。</li></ul><hr><h2 id="%E4%B8%89%E3%80%81%E6%80%BB%E7%BB%93" tabindex="-1">三、总结 <a class="header-anchor" href="#三、总结" aria-label="Permalink to &quot;三、总结&quot;">​</a></h2><ul><li>事务通过ACID特性保证数据安全。</li><li>断电/崩溃时，数据库通过<strong>预写日志（WAL）</strong>、<strong>redo log</strong>、<strong>undo log</strong>等机制，保证已提交的数据不会丢失，未提交的数据不会污染数据库。</li><li>这些机制共同保障了数据库的高可靠性和数据一致性。</li></ul></blockquote><h1 id="%E8%A1%A8%E7%BA%A7%E9%94%81%2C%E8%A1%8C%E7%BA%A7%E9%94%81" tabindex="-1">表级锁,行级锁 <a class="header-anchor" href="#表级锁%2C行级锁" aria-label="Permalink to &quot;表级锁,行级锁&quot;">​</a></h1><h2 id="%E5%86%8D%E6%AC%A1%E5%9B%9E%E9%A1%BE%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB" tabindex="-1">再次回顾为什么要事务隔离级别 <a class="header-anchor" href="#再次回顾为什么要事务隔离级别" aria-label="Permalink to &quot;再次回顾为什么要事务隔离级别&quot;">​</a></h2><blockquote><p>事务要允许 并发执行 ==&gt; 数据安全性与一致性 和 并发效率问题</p><p>如果没有 事务隔离级别 ==&gt; 脏读, 不可重复读(可能被允许), 幻读(只有串行能完全解决)</p><p>串行化 完全靠锁实现 &gt; ==给所有事物排序==</p><p><img src="`+S+`" alt="image-20250515083926198"></p></blockquote><h2 id="%E9%94%81%E6%9C%BA%E5%88%B6" tabindex="-1">锁机制 <a class="header-anchor" href="#锁机制" aria-label="Permalink to &quot;锁机制&quot;">​</a></h2><ul><li><h3 id="%E8%A1%A8%E7%BA%A7%E9%94%81%EF%BC%88Table%20Lock%EF%BC%89%EF%BC%9A" tabindex="-1"><strong>表级锁（Table Lock）</strong>： <a class="header-anchor" href="#表级锁（Table Lock）：" aria-label="Permalink to &quot;**表级锁（Table Lock）**：&quot;">​</a></h3><ul><li>锁住整张表。</li><li>开销小，加锁快，不会死锁。</li><li>锁力度大，并发能力低。</li></ul></li><li><h3 id="%E8%A1%8C%E7%BA%A7%E9%94%81%EF%BC%88Row%20Lock%EF%BC%89%EF%BC%9A" tabindex="-1"><strong>行级锁（Row Lock）</strong>： <a class="header-anchor" href="#行级锁（Row Lock）：" aria-label="Permalink to &quot;**行级锁（Row Lock）**：&quot;">​</a></h3><ul><li>锁住特定的行记录。</li><li>开销大，加锁慢，可能死锁。</li><li>锁力度小，并发能力高。</li></ul></li></ul><h1 id="%E6%8E%92%E5%AE%83%E9%94%81%E5%92%8C%E5%85%B1%E4%BA%AB%E9%94%81" tabindex="-1">排它锁和共享锁 <a class="header-anchor" href="#排它锁和共享锁" aria-label="Permalink to &quot;排它锁和共享锁&quot;">​</a></h1><h2 id="%E9%94%81%E6%94%AF%E6%8C%81" tabindex="-1">锁支持 <a class="header-anchor" href="#锁支持" aria-label="Permalink to &quot;锁支持&quot;">​</a></h2><ul><li><h3 id="MyISAM%20%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%8F%AA%E6%94%AF%E6%8C%81%E8%A1%A8%E7%BA%A7%E9%94%81%E3%80%82" tabindex="-1">MyISAM 存储引擎<strong>只支持表级锁</strong>。 <a class="header-anchor" href="#MyISAM 存储引擎只支持表级锁。" aria-label="Permalink to &quot;MyISAM 存储引擎**只支持表级锁**。&quot;">​</a></h3></li><li><p>InnoDB 支持行级锁。</p></li></ul><h2 id="%E9%94%81%E7%9A%84%E5%88%86%E7%B1%BB" tabindex="-1">锁的分类 <a class="header-anchor" href="#锁的分类" aria-label="Permalink to &quot;锁的分类&quot;">​</a></h2><ul><li><h3 id="%E6%8E%92%E4%BB%96%E9%94%81%20(X%20%E9%94%81%2F%E5%86%99%E9%94%81)%EF%BC%9A" tabindex="-1"><strong>排他锁 (X 锁/写锁)</strong>： <a class="header-anchor" href="#排他锁 (X 锁%2F写锁)：" aria-label="Permalink to &quot;**排他锁 (X 锁/写锁)**：&quot;">​</a></h3><ul><li><h3 id="%E7%8B%AC%E5%8D%A0%E9%94%81%EF%BC%8C%E4%B8%8D%E8%83%BD%E4%B8%8E%E5%85%B6%E4%BB%96%E9%94%81%E5%85%B1%E5%AD%98%E3%80%82" tabindex="-1"><strong>独占锁</strong>，<strong>不能与其他锁共存</strong>。 <a class="header-anchor" href="#独占锁，不能与其他锁共存。" aria-label="Permalink to &quot;**独占锁**，**不能与其他锁共存**。&quot;">​</a></h3></li><li>写操作需要获取排他锁。</li></ul></li><li><h3 id="%E5%85%B1%E4%BA%AB%E9%94%81%20(S%20%E9%94%81%2F%E8%AF%BB%E9%94%81)%EF%BC%9A" tabindex="-1"><strong>共享锁 (S 锁/读锁)</strong>： <a class="header-anchor" href="#共享锁 (S 锁%2F读锁)：" aria-label="Permalink to &quot;**共享锁 (S 锁/读锁)**：&quot;">​</a></h3><ul><li><strong>允许多个事务同时读取</strong>数据。</li><li>读操作需要获取共享锁。</li></ul></li></ul><h2 id="%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E4%B8%8E%E9%94%81" tabindex="-1">事务隔离级别与锁 <a class="header-anchor" href="#事务隔离级别与锁" aria-label="Permalink to &quot;事务隔离级别与锁&quot;">​</a></h2><ul><li><p><strong>可重复读 (Repeatable Read)</strong>：</p><ul><li><p>默认隔离级别，防止脏读和不可重复读，但可能出现幻读。</p></li><li><h3 id="%E4%BD%BF%E7%94%A8%20MVCC%20%E5%AE%9E%E7%8E%B0%E5%BF%AB%E7%85%A7%E8%AF%BB%EF%BC%8C%E9%80%9A%E5%B8%B8%E4%B8%8D%E5%8A%A0%E9%94%81%E3%80%82" tabindex="-1">使用 <strong>MVCC 实现快照读，通常不加锁。</strong> <a class="header-anchor" href="#使用 MVCC 实现快照读，通常不加锁。" aria-label="Permalink to &quot;使用 **MVCC 实现快照读，通常不加锁。**&quot;">​</a></h3></li><li><p>可以通过显式加锁 (select ... <code>FOR UPDATE</code> 或 <code>LOCK IN SHARE MODE</code>) 实现排他锁或共享锁。</p></li></ul></li><li><p><strong>串行化 (Serializable)</strong>：</p><ul><li>最严格的隔离级别，所有操作都串行化。</li><li>读操作获取共享锁，写操作获取排他锁。</li></ul></li></ul><h2 id="%E6%98%BE%E5%BC%8F%E5%8A%A0%E9%94%81" tabindex="-1">显式加锁 <a class="header-anchor" href="#显式加锁" aria-label="Permalink to &quot;显式加锁&quot;">​</a></h2><ul><li><code>FOR UPDATE</code>：获取排他锁。</li><li><code>LOCK IN SHARE MODE</code>：获取共享锁。</li></ul><h2 id="%E9%94%81%E5%AE%9E%E8%B7%B5" tabindex="-1">锁实践 <a class="header-anchor" href="#锁实践" aria-label="Permalink to &quot;锁实践&quot;">​</a></h2><div class="warning custom-block github-alert"><p class="custom-block-title">WARNING</p><p></p><h3 id="%E5%85%B1%E4%BA%AB%E9%94%81%20%E6%97%A0%20for" tabindex="-1"><strong>共享锁 无 for</strong> <a class="header-anchor" href="#共享锁 无 for" aria-label="Permalink to &quot;**共享锁 无 for**&quot;">​</a></h3></div><blockquote><h3 id="%E4%B8%A4%E4%B8%AA%E4%BA%8B%E5%8A%A1%20%E5%90%8C%E6%97%B6%20%E6%8E%92%E5%AE%83%E9%94%81----%3E%20%20%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E9%98%BB%E5%A1%9E%20%3D%3D%3D%20%E6%8E%92%E5%AE%83%E9%94%81%20%E6%98%AF%20%E7%8B%AC%E5%8D%A0" tabindex="-1">两个事务 同时 排它锁----&gt; 其中一个阻塞 === 排它锁 是 独占 <a class="header-anchor" href="#两个事务 同时 排它锁----&gt;  其中一个阻塞 %3D%3D%3D 排它锁 是 独占" aria-label="Permalink to &quot;两个事务 同时 排它锁----&gt;  其中一个阻塞 === 排它锁 是 独占&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> //</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 阻塞</span></span></code></pre></div><h3 id="%E4%B8%80%E4%B8%AA%E6%8E%92%E4%BB%96%2C%20%E4%B8%80%E4%B8%AA%E5%85%B1%E4%BA%AB" tabindex="-1">一个排他, 一个共享 <a class="header-anchor" href="#一个排他%2C 一个共享" aria-label="Permalink to &quot;一个排他, 一个共享&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  //</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> share mode;  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 阻塞</span></span></code></pre></div><h3 id="%E4%B8%8D%E8%BF%87%20%E4%B8%8D%E5%90%8C%E8%A1%8C%2C%20%E5%B0%B1%E5%8F%AF%E4%BB%A5%20%E5%8F%A6%E5%A4%96%E6%93%8D%E4%BD%9C%E4%BA%86" tabindex="-1">不过 不同行, 就可以 另外操作了 <a class="header-anchor" href="#不过 不同行%2C 就可以 另外操作了" aria-label="Permalink to &quot;不过 不同行, 就可以 另外操作了&quot;">​</a></h3><p>支持到 行级锁</p></blockquote><h2 id="InnoDB%20%E8%A1%8C%E9%94%81%E9%80%80%E5%8C%96" tabindex="-1">InnoDB 行锁退化 <a class="header-anchor" href="#InnoDB 行锁退化" aria-label="Permalink to &quot;InnoDB 行锁退化&quot;">​</a></h2><ul><li><h3 id="%E8%A1%8C%E9%94%81%E6%98%AF%E5%8A%A0%E5%9C%A8%E7%B4%A2%E5%BC%95%E9%A1%B9%E4%B8%8A%E7%9A%84%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E7%9B%B4%E6%8E%A5%E5%8A%A0%E5%9C%A8%E8%A1%8C%E8%AE%B0%E5%BD%95%E4%B8%8A%E7%9A%84%E3%80%82" tabindex="-1">行锁是加在<strong>索引项</strong>上的，而不是直接加在行记录上的。 <a class="header-anchor" href="#行锁是加在索引项上的，而不是直接加在行记录上的。" aria-label="Permalink to &quot;行锁是加在**索引项**上的，而不是直接加在行记录上的。&quot;">​</a></h3></li><li><h3 id="%E5%A6%82%E6%9E%9C%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%E6%9C%AA%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95%EF%BC%8CInnoDB%20%E4%BC%9A%E9%80%80%E5%8C%96%E4%B8%BA%E8%A1%A8%E9%94%81%E3%80%82" tabindex="-1">如果<strong>查询条件未使用索引</strong>，InnoDB 会<code>退化为表锁</code>。 <a class="header-anchor" href="#如果查询条件未使用索引，InnoDB 会退化为表锁。" aria-label="Permalink to &quot;如果**查询条件未使用索引**，InnoDB 会\`退化为表锁\`。&quot;">​</a></h3></li><li><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> name=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xing huai&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 表锁</span></span></code></pre></div></li></ul><h2 id="%E9%94%81%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7" tabindex="-1">锁的兼容性 <a class="header-anchor" href="#锁的兼容性" aria-label="Permalink to &quot;锁的兼容性&quot;">​</a></h2><blockquote><p>有排它锁, 就互斥</p></blockquote><ul><li><strong>共享锁 (S)</strong> 与 <strong>共享锁 (S)</strong>：兼容。</li><li><strong>排他锁 (X)</strong> 与 <strong>排他锁 (X)</strong>：互斥。</li><li><strong>共享锁 (S)</strong> 与 <strong>排他锁 (X)</strong>：互斥。</li></ul><h2 id="%E7%B4%A2%E5%BC%95%E5%AF%B9%E8%A1%8C%E9%94%81%E7%9A%84%E5%BD%B1%E5%93%8D" tabindex="-1">索引对行锁的影响 <a class="header-anchor" href="#索引对行锁的影响" aria-label="Permalink to &quot;索引对行锁的影响&quot;">​</a></h2><ul><li>使用索引字段作为查询条件时，InnoDB 会加行锁。</li><li>如果查询条件未使用索引，InnoDB 会加表锁。</li><li><h3 id="%E7%B4%A2%E5%BC%95%E6%8F%90%E9%AB%98%E4%BA%86%E9%94%81%E7%9A%84%E7%B2%92%E5%BA%A6%E5%92%8C%E5%B9%B6%E5%8F%91%E6%80%A7%E8%83%BD%E3%80%82" tabindex="-1"><strong>索引提高了锁的粒度和并发性能。</strong> <a class="header-anchor" href="#索引提高了锁的粒度和并发性能。" aria-label="Permalink to &quot;**索引提高了锁的粒度和并发性能。**&quot;">​</a></h3></li></ul><h2 id="%E4%B8%B2%E8%A1%8C%E5%8C%96%E7%BA%A7%E5%88%AB%E7%9A%84%E9%94%81" tabindex="-1">串行化级别的锁 <a class="header-anchor" href="#串行化级别的锁" aria-label="Permalink to &quot;串行化级别的锁&quot;">​</a></h2><p>使用 select 会 自动加 共享锁</p><p>使用 insert, uptate, delete 自动加 排他锁</p><h2 id="%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-3" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项-3" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><ul><li><p>InnoDB 的行锁是<strong>基于索引实现</strong>的，未使用索引的查询会退化为表锁。</p></li><li><p>锁的高并发性能依赖于索引的使用。</p></li><li><p>MySQL 会对<strong>长时间阻塞的锁设置超时机制，避免死锁</strong>。</p></li><li><h3 id="%E8%A1%A8%E7%BA%A7%E9%94%81%E5%92%8C%E8%A1%8C%E7%BA%A7%E9%94%81%E6%98%AF%E9%94%81%E7%9A%84%E5%8A%9B%E5%BA%A6%EF%BC%8C%E6%8E%92%E4%BB%96%E9%94%81%E5%92%8C%E5%85%B1%E4%BA%AB%E9%94%81%E6%98%AF%E9%94%81%E7%9A%84%E7%B1%BB%E5%9E%8B%E3%80%82" tabindex="-1">表级锁和行级锁是<strong>锁的力度</strong>，排他锁和共享锁是<strong>锁的类型</strong>。 <a class="header-anchor" href="#表级锁和行级锁是锁的力度，排他锁和共享锁是锁的类型。" aria-label="Permalink to &quot;表级锁和行级锁是**锁的力度**，排他锁和共享锁是**锁的类型**。&quot;">​</a></h3></li><li><p><strong>无索引字段查询</strong>：加表锁。</p></li><li><p><strong>有索引字段查询</strong>：加行锁。</p></li><li><h3 id="%E8%BE%85%E5%8A%A9%E7%B4%A2%E5%BC%95%EF%BC%9A%E9%80%9A%E8%BF%87%E8%BE%85%E5%8A%A9%E7%B4%A2%E5%BC%95%E6%89%BE%E5%88%B0%E4%B8%BB%E9%94%AE%EF%BC%8C%E5%86%8D%E5%8A%A0%E9%94%81%E3%80%82" tabindex="-1"><strong>辅助索引</strong>：通过辅助索引找到主键，再加锁。 <a class="header-anchor" href="#辅助索引：通过辅助索引找到主键，再加锁。" aria-label="Permalink to &quot;**辅助索引**：通过辅助索引找到主键，再加锁。&quot;">​</a></h3></li><li><p><strong>主键索引</strong>：直接加锁。</p></li></ul><h1 id="%E9%97%B4%E9%9A%99%E9%94%81%E4%B8%8Enext-key%20lock(%E4%B8%80)" tabindex="-1">间隙锁与next-key lock(一) <a class="header-anchor" href="#间隙锁与next-key lock(一)" aria-label="Permalink to &quot;间隙锁与next-key lock(一)&quot;">​</a></h1><p><img src="`+N+`" alt="image-20250515112855758"></p><h2 id="%E4%B8%B2%E8%A1%8C%E5%8C%96%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%B9%BB%E8%AF%BB%EF%BC%9F" tabindex="-1">串行化隔离级别如何解决幻读？ <a class="header-anchor" href="#串行化隔离级别如何解决幻读？" aria-label="Permalink to &quot;串行化隔离级别如何解决幻读？&quot;">​</a></h2><p>在 <strong>串行化隔离级别</strong>下，MySQL 使用 <strong>间隙锁（Gap Lock）</strong> 来防止幻读的发生。</p><h2 id="%E9%97%B4%E9%9A%99%E9%94%81%E7%9A%84%E6%A6%82%E5%BF%B5" tabindex="-1">间隙锁的概念 <a class="header-anchor" href="#间隙锁的概念" aria-label="Permalink to &quot;间隙锁的概念&quot;">​</a></h2><ul><li><strong>间隙锁（Gap Lock）</strong> 是一种锁定记录之间“间隙”的机制。</li><li>它不仅锁定了查询结果中的具体行（行锁/Record Lock），还锁定了这些行之间的“间隙”。</li><li><strong>通过锁定间隙，防止其他事务在这些间隙中插入新数据。</strong></li><li><h3 id="%E7%A9%BA%E6%B4%9E%3A%20%E5%B0%B1%E6%98%AF%20%E9%97%B4%E9%9A%99" tabindex="-1"><strong>空洞:</strong> 就是 间隙 <a class="header-anchor" href="#空洞%3A 就是 间隙" aria-label="Permalink to &quot;**空洞:** 就是 间隙&quot;">​</a></h3></li><li><h3 id="%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%BB%93%E6%9E%9C%E7%9A%84%E5%89%8D%E9%9D%A2%E9%97%B4%E9%9A%99%20--%20%E4%B9%9F%E5%8A%A0%E4%BA%86%E9%97%B4%E9%9A%99%E9%94%81" tabindex="-1">第一个结果的前面间隙 -- 也加了间隙锁 <a class="header-anchor" href="#第一个结果的前面间隙 -- 也加了间隙锁" aria-label="Permalink to &quot;第一个结果的前面间隙 -- 也加了间隙锁&quot;">​</a></h3></li></ul><h2 id="Next-Key%20Lock-%E4%B8%B4%E9%94%AE%E9%94%81" tabindex="-1">Next-Key Lock-<strong>临键锁</strong> <a class="header-anchor" href="#Next-Key Lock-临键锁" aria-label="Permalink to &quot;Next-Key Lock-**临键锁**&quot;">​</a></h2><ul><li><strong>Next-Key Lock</strong> 是 <strong>行锁（Record Lock）</strong> 和 <strong>间隙锁（Gap Lock）</strong> 的组合。--- <strong>范围锁</strong></li><li>它锁定了查询结果中的行以及这些行之间的间隙。</li><li><strong>范围</strong>：<code>左开右闭</code>，例如 <code>(11, 12]</code>。</li></ul><hr><h2 id="%E9%97%B4%E9%9A%99%E9%94%81%E7%9A%84%E4%BD%9C%E7%94%A8" tabindex="-1">间隙锁的作用 <a class="header-anchor" href="#间隙锁的作用" aria-label="Permalink to &quot;间隙锁的作用&quot;">​</a></h2><ul><li>防止其他事务<strong>在查询范围内</strong>插入新数据。</li><li>确保事务的查询结果在整个事务期间保持一致。</li></ul><h2 id="%E7%A4%BA%E4%BE%8B-5" tabindex="-1">示例 <a class="header-anchor" href="#示例-5" aria-label="Permalink to &quot;示例&quot;">​</a></h2><blockquote><p>修改为 手动提交, 以及 串行化 隔离级别</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @@autocommit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transaction_isolation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;serializable&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">insert into</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,age,sex) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;gap&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;man&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div></blockquote><h2 id="%E6%B3%A8%E6%84%8F-2" tabindex="-1">注意 <a class="header-anchor" href="#注意-2" aria-label="Permalink to &quot;注意&quot;">​</a></h2><p>X 与 S 不能共存</p><p>即使 先 S ,后X 也不行</p><hr><h2 id="%E4%B8%BA%E4%BB%80%E4%B9%88%E9%97%B4%E9%9A%99%E9%94%81%E8%83%BD%E9%98%B2%E6%AD%A2%E5%B9%BB%E8%AF%BB%EF%BC%9F" tabindex="-1">为什么间隙锁能防止幻读？ <a class="header-anchor" href="#为什么间隙锁能防止幻读？" aria-label="Permalink to &quot;为什么间隙锁能防止幻读？&quot;">​</a></h2><ul><li>在事务 1 查询时，间隙锁锁定了所有可能插入新数据的范围。</li><li>事务 2 无法在这些范围内插入新数据，因此事务 1 的查询结果不会发生变化。</li></ul><h2 id="%E9%97%AE%E9%A2%98-%E8%A1%A5%E5%85%85" tabindex="-1">问题-补充 <a class="header-anchor" href="#问题-补充" aria-label="Permalink to &quot;问题-补充&quot;">​</a></h2><blockquote><p>如果说 是在查询的范围内 加 间隙锁, 如果, 查到的 不是连在 一起的, 这个 会 锁 从第一个查到的, 到 最后一个查到的 以及 空洞吗?</p><ul><li><strong>InnoDB 会自动按照索引顺序加锁</strong>，无论查询结果的顺序如何。</li><li>这确保了加锁的一致性和避免死锁的可能性。</li><li>如果查询没有使用索引，则会触发 <strong>表锁</strong>，而不是行锁或间隙锁。</li></ul></blockquote><h2 id="%E6%80%BB%E7%BB%93-12" tabindex="-1">总结 <a class="header-anchor" href="#总结-12" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li><strong>幻读问题</strong>：事务间并发导致查询结果不一致。</li><li><strong>解决方法</strong>：通过 <strong>间隙锁（Gap Lock）</strong> 和 <strong>Next-Key Lock</strong>，锁定查询范围内的行和间隙，防止其他事务插入新数据。</li><li><strong>串行化隔离级别</strong>：通过严格的锁机制，确保事务的完全隔离，避免幻读问题。</li></ul><p>这种机制虽然解决了数据一致性问题，但会降低并发性能，因此需要根据实际场景权衡使用。</p><h1 id="%E7%B4%A2%E5%BC%95-%E8%A1%A5%E5%85%85" tabindex="-1">索引-补充 <a class="header-anchor" href="#索引-补充" aria-label="Permalink to &quot;索引-补充&quot;">​</a></h1><p>b+索引会自动排序!!!</p><p>不然, b+ 怎么进行范围查询呢!!!</p><blockquote><h3 id="1.%20B%2B%20%E6%A0%91%E7%B4%A2%E5%BC%95" tabindex="-1">1. <strong>B+ 树索引</strong> <a class="header-anchor" href="#1. B%2B 树索引" aria-label="Permalink to &quot;1. **B+ 树索引**&quot;">​</a></h3><ul><li>大多数数据库（如 MySQL 的 InnoDB 存储引擎）使用 B+ 树结构来实现索引。</li><li>B+ 树索引会<strong>将数据按照索引列的值进行排序</strong>，并存储在叶子节点中。</li><li>如果是主键索引（聚簇索引），数据行会<strong>按照主键值的顺序存储</strong>。</li><li>如果是辅助索引（非聚簇索引），叶子节点存储的是索引列的值和对应的主键值，<strong>索引列的值也是有序的</strong>。</li></ul><h3 id="2.%20%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95" tabindex="-1">2. <strong>哈希索引</strong> <a class="header-anchor" href="#2. 哈希索引" aria-label="Permalink to &quot;2. **哈希索引**&quot;">​</a></h3><ul><li><strong>哈希索引不会排序</strong>，因为它是基于哈希函数计算的，适用于等值查询（如 <code>=</code>）。</li><li>哈希索引不支持范围查询（如 <code>&gt;</code>, <code>&lt;</code>）。</li></ul><h3 id="3.%20%E8%87%AA%E5%8A%A8%E6%8E%92%E5%BA%8F%E7%9A%84%E4%BD%9C%E7%94%A8" tabindex="-1">3. <strong>自动排序的作用</strong> <a class="header-anchor" href="#3. 自动排序的作用" aria-label="Permalink to &quot;3. **自动排序的作用**&quot;">​</a></h3><ul><li><strong>范围查询</strong>：由于索引是有序的，范围查询（如 <code>BETWEEN</code>、<code>&gt;</code>, <code>&lt;</code>）可以高效地利用索引。</li><li><strong>ORDER BY 优化</strong>：如果查询的 <code>ORDER BY</code> 子句与索引的排序一致，数据库可以直接利用索引，而无需额外排序。</li></ul></blockquote><h1 id="%E9%97%B4%E9%9A%99%E9%94%81-%E8%BE%85%E5%8A%A9%E7%B4%A2%E5%BC%95(%E4%BA%8C)" tabindex="-1">间隙锁-辅助索引(二) <a class="header-anchor" href="#间隙锁-辅助索引(二)" aria-label="Permalink to &quot;间隙锁-辅助索引(二)&quot;">​</a></h1><h2 id="%E6%B3%A8%E6%84%8F%E7%90%86%E8%A7%A3%E6%9C%AC%E8%8A%82%E7%9A%84%E5%86%85%E5%AE%B9-%E8%A1%A5%E5%85%85" tabindex="-1">注意理解本节的内容-补充 <a class="header-anchor" href="#注意理解本节的内容-补充" aria-label="Permalink to &quot;注意理解本节的内容-补充&quot;">​</a></h2><blockquote><h3 id="%E5%AF%B9%E4%BA%8E%20%E4%B8%BB%E9%94%AE%E7%B4%A2%E5%BC%95--%20%E5%A6%82%E6%9E%9C%E4%B8%BB%E9%94%AE%20%E4%B8%8D%E6%98%AF%20%E8%87%AA%E5%A2%9E%2C%20%E8%80%8C%E6%98%AF%E6%89%8B%E5%8A%A8%2C%20%E5%B0%86%E4%BC%9A%E5%92%8C%20%E8%BE%85%E5%8A%A9%E7%B4%A2%E5%BC%95%E4%B8%80%E6%A0%B7" tabindex="-1">对于 主键索引-- 如果主键 不是 自增, 而是手动, 将会和 辅助索引一样 <a class="header-anchor" href="#对于 主键索引-- 如果主键 不是 自增%2C 而是手动%2C 将会和 辅助索引一样" aria-label="Permalink to &quot;对于 主键索引-- 如果主键 不是 自增, 而是手动, 将会和 辅助索引一样&quot;">​</a></h3><p>已进行 测试</p></blockquote><p><img src="`+R+'" alt="image-20250515152318171"></p><h2 id="%E8%BE%85%E5%8A%A9%E7%B4%A2%E5%BC%95%E4%B8%8EB%2B%E6%A0%91%E7%BB%93%E6%9E%84" tabindex="-1">辅助索引与B+树结构 <a class="header-anchor" href="#辅助索引与B%2B树结构" aria-label="Permalink to &quot;辅助索引与B+树结构&quot;">​</a></h2><ul><li>辅助索引（Secondary Index）在B+树的叶子节点存储的是索引值和对应的主键值。</li><li>辅助索引的值是可以重复的，但主键值是唯一的。</li><li><h3 id="%E5%BD%93%E8%BE%85%E5%8A%A9%E7%B4%A2%E5%BC%95%E5%80%BC%E7%9B%B8%E5%90%8C%E6%97%B6%EF%BC%8C%E4%B8%BB%E9%94%AE%E5%80%BC%E6%8C%89%E5%8D%87%E5%BA%8F%E6%8E%92%E5%88%97%E3%80%82" tabindex="-1">当<strong>辅助索引值相同</strong>时，<strong>主键值按升序排列</strong>。 <a class="header-anchor" href="#当辅助索引值相同时，主键值按升序排列。" aria-label="Permalink to &quot;当**辅助索引值相同**时，**主键值按升序排列**。&quot;">​</a></h3></li></ul><h2 id="%E7%A4%BA%E4%BE%8B%E5%88%86%E6%9E%90" tabindex="-1">示例分析 <a class="header-anchor" href="#示例分析" aria-label="Permalink to &quot;示例分析&quot;">​</a></h2><blockquote><h4 id="%E6%9F%A5%E8%AF%A2%E6%9D%A1%E4%BB%B6%EF%BC%9ASELECT%20*%20FROM%20user%20WHERE%20age%20%3E%2020" tabindex="-1">查询条件：<code>SELECT * FROM user WHERE age &gt; 20</code> <a class="header-anchor" href="#查询条件：SELECT * FROM user WHERE age &gt; 20" aria-label="Permalink to &quot;查询条件：`SELECT * FROM user WHERE age &gt; 20`&quot;">​</a></h4><ul><li><p><strong>加锁范围</strong>：</p><ul><li><p>行锁：<code>age = 21, 22, 25</code> 的记录。</p></li><li><p>间隙锁：<code>20-21, 21-22, 22-25, &gt;25</code> 的间隙。</p></li></ul></li></ul><h4 id="%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C%EF%BC%9A" tabindex="-1">插入操作： <a class="header-anchor" href="#插入操作：" aria-label="Permalink to &quot;插入操作：&quot;">​</a></h4><ul><li>插入 <code>age = 19</code>：成功，因为 <code>19</code> 不在加锁范围内。</li><li>插入 <code>age = 20</code>：失败，因为 <code>20</code> 落在 <code>20-21</code> 的间隙锁范围内。</li><li>插入 <code>age = 18</code>：成功，因为 <code>18</code> 不在加锁范围内。</li></ul><h4 id="%E6%9F%A5%E8%AF%A2%E6%9C%AA%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95%E7%9A%84%E6%83%85%E5%86%B5%EF%BC%9A" tabindex="-1">查询未使用索引的情况： <a class="header-anchor" href="#查询未使用索引的情况：" aria-label="Permalink to &quot;查询未使用索引的情况：&quot;">​</a></h4><ul><li>如果查询未使用索引（例如 <code>age &gt; 18</code>），可能会加表锁，导致整个表被锁住，任何插入操作都会被阻塞。</li></ul></blockquote><h2 id="%E7%B4%A2%E5%BC%95-%E9%94%81-%E4%BC%98%E5%8C%96" tabindex="-1">索引-锁-优化 <a class="header-anchor" href="#索引-锁-优化" aria-label="Permalink to &quot;索引-锁-优化&quot;">​</a></h2><p>通过 <code>EXPLAIN</code> 查看查询<strong>是否使用了索引</strong></p><ul><li><h3 id="MySQL%20%E5%9C%A8%E6%9F%A5%E8%AF%A2%E6%97%B6%E5%8F%AF%E8%83%BD%E4%BC%9A%E9%80%89%E6%8B%A9%E4%B8%8D%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95%EF%BC%88%E4%BE%8B%E5%A6%82%EF%BC%8C%E5%BD%93%E5%85%A8%E8%A1%A8%E6%89%AB%E6%8F%8F%E7%9A%84%E4%BB%A3%E4%BB%B7%E4%B8%8E%E7%B4%A2%E5%BC%95%E6%89%AB%E6%8F%8F%E7%9B%B8%E5%B7%AE%E4%B8%8D%E5%A4%A7%E6%97%B6%EF%BC%89%E3%80%82" tabindex="-1">MySQL 在查询时可能会选择<strong>不使用索引</strong>（例如，当全表扫描的代价与索引扫描相差不大时）。 <a class="header-anchor" href="#MySQL 在查询时可能会选择不使用索引（例如，当全表扫描的代价与索引扫描相差不大时）。" aria-label="Permalink to &quot;MySQL 在查询时可能会选择**不使用索引**（例如，当全表扫描的代价与索引扫描相差不大时）。&quot;">​</a></h3><p>where 条件 使得 进行了 全表查询</p></li><li><h3 id="%E5%A6%82%E6%9E%9C%E6%9F%A5%E8%AF%A2%E6%9C%AA%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95%EF%BC%8C%E5%88%99%E5%8F%AF%E8%83%BD%E4%BC%9A%E5%8A%A0%E8%A1%A8%E9%94%81%E8%80%8C%E4%B8%8D%E6%98%AF%E8%A1%8C%E9%94%81%E6%88%96%E9%97%B4%E9%9A%99%E9%94%81%E3%80%82" tabindex="-1">如果<strong>查询未使用索引</strong>，则<strong>可能会加表锁</strong>而不是行锁或间隙锁。 <a class="header-anchor" href="#如果查询未使用索引，则可能会加表锁而不是行锁或间隙锁。" aria-label="Permalink to &quot;如果**查询未使用索引**，则**可能会加表锁**而不是行锁或间隙锁。&quot;">​</a></h3></li></ul><h2 id="%E6%B3%A8%E6%84%8F!!%3E%3D-%E6%9C%AC%E8%8A%82%E9%87%8D%E7%82%B9%E6%B1%87%E6%80%BB" tabindex="-1">注意!!&gt;=-本节重点汇总 <a class="header-anchor" href="#注意!!&gt;%3D-本节重点汇总" aria-label="Permalink to &quot;注意!!&gt;=-本节重点汇总&quot;">​</a></h2><blockquote><h3 id="age%20%3E%2025%3A%20%20%2025-26%2C%2026-%E6%9C%80%E5%A4%A7%20%20%E9%83%BD%E5%8A%A0%E9%97%B4%E9%9A%99%E9%94%81" tabindex="-1">age <strong>&gt;</strong> 25: <strong>25-26</strong>, 26-最大 都加间隙锁 <a class="header-anchor" href="#age &gt; 25%3A   25-26%2C 26-最大  都加间隙锁" aria-label="Permalink to &quot;age **&gt;** 25:   **25-26**, 26-最大  都加间隙锁&quot;">​</a></h3><h3 id="age%20%3E%3D%2025%3A%20%20%2024-25%2C25-%E6%9C%80%E5%A4%A7%20%E9%83%BD%E5%8A%A0%E9%97%B4%E9%9A%99%E9%94%81" tabindex="-1">age <strong>&gt;=</strong> 25: <strong>24-25</strong>,25-最大 都加间隙锁 <a class="header-anchor" href="#age &gt;%3D 25%3A   24-25%2C25-最大 都加间隙锁" aria-label="Permalink to &quot;age **&gt;=** 25:   **24-25**,25-最大 都加间隙锁&quot;">​</a></h3><h3 id="%E6%84%9F%E8%A7%89%20%E5%AE%9E%E9%99%85%E5%B0%B1%E6%98%AF%20%E5%8A%A0%20%E6%89%BE%E5%88%B0%E7%9A%84%E7%AC%AC%E4%B8%80%E8%A1%8C%20%E5%89%8D%E9%9D%A2%E7%9A%84%20%E9%97%B4%E9%9A%99%20%E9%94%81" tabindex="-1">感觉 实际就是 加 <strong>找到的第一行</strong> <strong>前面的 间隙</strong> 锁 <a class="header-anchor" href="#感觉 实际就是 加 找到的第一行 前面的 间隙 锁" aria-label="Permalink to &quot;感觉 实际就是 加 **找到的第一行** **前面的 间隙** 锁&quot;">​</a></h3><h3 id="%E4%B8%B2%E8%A1%8C%E5%8C%96%2C%20%E4%B8%80%E5%AE%9A%E6%98%AF%20%E8%A1%8C%E9%94%81%E5%90%97%3F---explain" tabindex="-1">串行化, 一定是 行锁吗?---explain <a class="header-anchor" href="#串行化%2C 一定是 行锁吗%3F---explain" aria-label="Permalink to &quot;串行化, 一定是 行锁吗?---explain&quot;">​</a></h3></blockquote><h1 id="%E9%97%B4%E9%9A%99%E9%94%81(%E4%B8%89)" tabindex="-1">间隙锁(三) <a class="header-anchor" href="#间隙锁(三)" aria-label="Permalink to &quot;间隙锁(三)&quot;">​</a></h1><h2 id="%E5%9B%9E%E9%A1%BE" tabindex="-1">回顾 <a class="header-anchor" href="#回顾" aria-label="Permalink to &quot;回顾&quot;">​</a></h2><blockquote><h3 id="(%E4%B8%80)%E6%98%AF%E6%AD%A3%E7%A1%AE%E7%90%86%E8%A7%A3%E9%97%B4%E9%9A%99" tabindex="-1">(一)是正确理解间隙 <a class="header-anchor" href="#(一)是正确理解间隙" aria-label="Permalink to &quot;(一)是正确理解间隙&quot;">​</a></h3><h3 id="(%E4%BA%8C)%E6%98%AF%E6%AD%A3%E7%A1%AE%E7%90%86%E8%A7%A3%E9%97%B4%E9%9A%99%E8%8C%83%E5%9B%B4" tabindex="-1">(二)是正确理解间隙范围 <a class="header-anchor" href="#(二)是正确理解间隙范围" aria-label="Permalink to &quot;(二)是正确理解间隙范围&quot;">​</a></h3><h3 id="%E6%9C%AC%E8%8A%82%20%E4%B8%BB%E8%A6%81%E6%98%AF%20%E7%AD%89%E5%80%BC%E6%9F%A5%E8%AF%A2%20%E7%9A%84%E9%97%B4%E9%9A%99%E9%94%81" tabindex="-1">本节 主要是 等值查询 的间隙锁 <a class="header-anchor" href="#本节 主要是 等值查询 的间隙锁" aria-label="Permalink to &quot;本节 主要是 等值查询 的间隙锁&quot;">​</a></h3></blockquote><h2 id="%E7%AD%89%E5%80%BC-%E4%B8%BB%E9%94%AE%E7%B4%A2%E5%BC%95" tabindex="-1">等值-主键索引 <a class="header-anchor" href="#等值-主键索引" aria-label="Permalink to &quot;等值-主键索引&quot;">​</a></h2><blockquote><h3 id="where%20%E4%B8%BB%E9%94%AE%2C%20%E7%AD%89%E5%80%BC%E6%9F%A5%E8%AF%A2%2C%20%E4%B8%8D%E5%8F%AF%E8%83%BD%20%E5%B9%BB%E8%AF%BB%2C%20%E4%B8%BB%E9%94%AE%20%E4%B8%8D%E8%83%BD%E9%87%8D%E5%A4%8D" tabindex="-1">where 主键, 等值查询, 不可能 幻读, <strong>主键 不能重复</strong> <a class="header-anchor" href="#where 主键%2C 等值查询%2C 不可能 幻读%2C 主键 不能重复" aria-label="Permalink to &quot;where 主键, 等值查询, 不可能 幻读, **主键 不能重复**&quot;">​</a></h3></blockquote><h2 id="%E7%AD%89%E5%80%BC-%E8%BE%85%E5%8A%A9%E7%B4%A2%E5%BC%95" tabindex="-1">等值-辅助索引 <a class="header-anchor" href="#等值-辅助索引" aria-label="Permalink to &quot;等值-辅助索引&quot;">​</a></h2><p>要从 <strong>辅助索引 b+树</strong> 来去看 和理解</p><p><img src="'+M+'" alt="image-20250515153410837"></p><blockquote><p>insert 时</p><p>13,14 能成功</p><p>15不行, 因为按主键排序, 只会在 间隙锁那里</p><p>19可以 还是 主键排序, 不过在后面</p></blockquote><h1 id="MVCC%E5%92%8Cundo%20log(%E4%B8%80)" tabindex="-1">MVCC和undo log(一) <a class="header-anchor" href="#MVCC和undo log(一)" aria-label="Permalink to &quot;MVCC和undo log(一)&quot;">​</a></h1><h2 id="%E9%9D%A2%E8%AF%95%E9%87%8D%E7%82%B9" tabindex="-1">面试重点 <a class="header-anchor" href="#面试重点" aria-label="Permalink to &quot;面试重点&quot;">​</a></h2><p>已提交读</p><p>可重复读</p><h2 id="MVCC%EF%BC%88%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%89" tabindex="-1">MVCC（多版本并发控制） <a class="header-anchor" href="#MVCC（多版本并发控制）" aria-label="Permalink to &quot;MVCC（多版本并发控制）&quot;">​</a></h2><ul><li>是<strong>InnoDB存储引擎</strong>实现已提交读和可重复读隔离级别的底层原理。</li><li>提供了<strong>快照读</strong>（非锁定读），通过多版本数据实现并发控制。</li></ul><hr><h2 id="MVCC%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86" tabindex="-1">MVCC的实现原理 <a class="header-anchor" href="#MVCC的实现原理" aria-label="Permalink to &quot;MVCC的实现原理&quot;">​</a></h2><blockquote><p><strong>两种读取方式</strong>：</p><ul><li><strong>锁定读</strong>：读取时加锁（S锁或X锁）。</li><li><strong>非锁定读</strong>：通过MVCC实现的<strong>快照读</strong>，无需加锁。</li></ul><p><strong>关键技术：Undo Log（回滚日志）</strong>：</p><ul><li><strong>作用</strong>： <ol><li><strong>事务回滚</strong>：记录修改前的数据，用于事务失败时回滚。</li><li><strong>快照读</strong>：提供MVCC的非锁定读功能。</li></ol></li><li><strong>原理</strong>： <ul><li>每次数据修改时，修改前的数据会存储在Undo Log中。</li><li>当前数据行通过<code>DB_TRX_ID</code>（事务ID）和<code>DB_ROLL_PTR</code>（指向旧版本的指针）形成一个链表，指向修改前的旧版本数据。</li></ul></li></ul></blockquote><hr><h2 id="Undo%20Log%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E7%BB%93%E6%9E%84" tabindex="-1">Undo Log的原理和结构 <a class="header-anchor" href="#Undo Log的原理和结构" aria-label="Permalink to &quot;Undo Log的原理和结构&quot;">​</a></h2><blockquote><ol><li><p><strong>额外字段</strong>：</p><ul><li><strong>DB_TRX_ID</strong>：记录修改该行数据的事务ID。 一个事务里, 在该事务里, 是不会变的</li><li><h3 id="DB_ROLL_PTR%EF%BC%9A%E6%8C%87%E5%90%91Undo%20Log%E4%B8%AD%E6%97%A7%E7%89%88%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%9A%84%E6%8C%87%E9%92%88%E3%80%82" tabindex="-1"><strong>DB_ROLL_PTR</strong>：指向Undo Log中<strong>旧版本数据</strong>的指针。 <a class="header-anchor" href="#DB_ROLL_PTR：指向Undo Log中旧版本数据的指针。" aria-label="Permalink to &quot;**DB_ROLL_PTR**：指向Undo Log中**旧版本数据**的指针。&quot;">​</a></h3></li><li><strong>ROW_ID</strong>：行ID，用于唯一标识每行数据（与主键相关）。--- 若创建表没有主键列, InnoDB会自动 在这里 加唯一标识</li></ul></li><li><p><strong>数据版本链表</strong>：</p><ul><li>当前数据行通过<code>DB_ROLL_PTR</code>指向Undo Log中的旧版本数据。</li><li><h3 id="%E5%BD%A2%E6%88%90%E4%B8%80%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%BB%93%E6%9E%84%EF%BC%8C%E6%94%AF%E6%8C%81%E4%BA%8B%E5%8A%A1%E5%9B%9E%E6%BB%9A%E5%92%8C%E5%BF%AB%E7%85%A7%E8%AF%BB%E3%80%82" tabindex="-1">形成一个<strong>链表结构</strong>，支持事务回滚和快照读。 <a class="header-anchor" href="#形成一个链表结构，支持事务回滚和快照读。" aria-label="Permalink to &quot;形成一个**链表结构**，支持事务回滚和快照读。&quot;">​</a></h3></li></ul></li></ol></blockquote><hr><p><img src="'+O+'" alt="image-20250515163014467"></p><blockquote><p>图中, 下面是 就是 旧数据</p><p>上面是 新数据</p></blockquote><h2 id="%E6%80%BB%E7%BB%93-13" tabindex="-1">总结 <a class="header-anchor" href="#总结-13" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li><strong>Undo Log</strong> 是MVCC的核心，支持事务回滚和快照读。</li><li><strong>快照读</strong> 通过访问Undo Log中的旧版本数据实现，避免加锁，提高并发性能。</li><li><strong>事务隔离级别</strong> 的实现依赖于MVCC（已提交读和可重复读）或锁机制（串行化）。</li></ul><h1 id="MVCC%E5%92%8Cundo%20log(%E4%BA%8C)%E5%B7%B2%E6%8F%90%E4%BA%A4%E8%AF%BB" tabindex="-1">MVCC和undo log(二)已提交读 <a class="header-anchor" href="#MVCC和undo log(二)已提交读" aria-label="Permalink to &quot;MVCC和undo log(二)已提交读&quot;">​</a></h1><p><img src="'+T+'" alt="image-20250515173252412"></p><h2 id="%E5%B7%B2%E6%8F%90%E4%BA%A4%E8%AF%BB%EF%BC%88Read%20Committed%EF%BC%89%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8E%9F%E7%90%86" tabindex="-1"><strong>已提交读</strong>（Read Committed）隔离级别的原理 <a class="header-anchor" href="#已提交读（Read Committed）隔离级别的原理" aria-label="Permalink to &quot;**已提交读**（Read Committed）隔离级别的原理&quot;">​</a></h2><ul><li><h3 id="MVCC%EF%BC%88%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%EF%BC%89%EF%BC%9A" tabindex="-1"><strong>MVCC（多版本并发控制）</strong>： <a class="header-anchor" href="#MVCC（多版本并发控制）：" aria-label="Permalink to &quot;**MVCC（多版本并发控制）**：&quot;">​</a></h3><ul><li><strong>快照读</strong>：读取的是数据的历史版本（拍照时的数据），<strong>无需加锁</strong>。</li><li><strong>当前读</strong>：读取的是数据的最新版本（实时数据），<strong>需要加锁</strong>。</li></ul></li><li><h3 id="%E5%BF%AB%E7%85%A7%E7%94%9F%E6%88%90%E6%97%B6%E6%9C%BA%EF%BC%9A%20%20!!!" tabindex="-1"><strong>快照生成时机</strong>： !!! <a class="header-anchor" href="#快照生成时机：  !!!" aria-label="Permalink to &quot;**快照生成时机**：  !!!&quot;">​</a></h3><ul><li><p><strong>每次</strong>执行 <code>SELECT</code> 时，<strong>都会</strong>生成一个新的快照（Read View）。</p><h3 id="%E5%8D%B3%E4%BD%BF%E6%B2%A1%E6%9C%89%20%E4%BB%BB%E4%BD%95%E6%94%B9%E5%8F%98%2C%20%E5%8F%AA%E8%A6%81select%20%E5%B0%B1%E4%BC%9A%E4%BA%A7%E7%94%9F%E5%BF%AB%E7%85%A7" tabindex="-1">即使没有 任何改变, 只要<code>select</code> 就会产生快照 <a class="header-anchor" href="#即使没有 任何改变%2C 只要select 就会产生快照" aria-label="Permalink to &quot;即使没有 任何改变, 只要`select` 就会产生快照&quot;">​</a></h3></li><li><p><strong>快照只包含已提交的数据</strong>（<code>COMMIT</code> 状态），未提交的数据（<code>PREPARE</code> 状态）不会进入快照。</p></li></ul></li></ul><hr><h2 id="%E5%BF%AB%E7%85%A7%E8%AF%BB%E4%B8%8E%E5%BD%93%E5%89%8D%E8%AF%BB" tabindex="-1">快照读与当前读 <a class="header-anchor" href="#快照读与当前读" aria-label="Permalink to &quot;快照读与当前读&quot;">​</a></h2><ol><li><p><strong>快照读</strong>：</p><ul><li>通过 <strong>MVCC 实现</strong>，读取的是历史版本数据。</li><li>常见操作：普通的 <code>SELECT</code> 查询。</li><li>特点：无需加锁，性能高。</li></ul></li><li><p><strong>当前读</strong>：</p><ul><li>读取的是最新版本数据。</li><li>常见操作：<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>，以及手动加锁的查询（如 <code>SELECT ... FOR UPDATE</code>）。</li><li>特点：需要加锁，确保数据一致性。</li></ul></li></ol><hr><h2 id="%E5%B7%B2%E6%8F%90%E4%BA%A4%E8%AF%BB%E7%9A%84%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90-%E9%9D%A2%E8%AF%95" tabindex="-1">已提交读的行为分析-面试 <a class="header-anchor" href="#已提交读的行为分析-面试" aria-label="Permalink to &quot;已提交读的行为分析-面试&quot;">​</a></h2><blockquote><p>注意说明 undo log日志, 对 每行 多加的 字段</p></blockquote><blockquote><ol><li><h3 id="%E8%84%8F%E8%AF%BB%E7%9A%84%E8%A7%A3%E5%86%B3%EF%BC%9A%20%E9%9D%A2%E8%AF%95" tabindex="-1"><strong>脏读的解决</strong>： 面试 <a class="header-anchor" href="#脏读的解决： 面试" aria-label="Permalink to &quot;**脏读的解决**： 面试&quot;">​</a></h3><ul><li><h3 id="%E5%B7%B2%E6%8F%90%E4%BA%A4%E8%AF%BB%20%E4%BD%BF%E7%94%A8%E7%9A%84%E6%98%AF%20%E9%9D%9E%E9%94%81%E5%AE%9A%E8%AF%BB%2C%20%E6%98%AF%E4%B8%8D%E5%8A%A0%E9%94%81%20%E8%AF%BB%2C%20%E4%BE%9D%E8%B5%96%E4%BA%8E%20MVCC%20%E5%BF%AB%E7%85%A7%E8%AF%BB%20%E5%AE%9E%E7%8E%B0" tabindex="-1">已提交读 使用的是 <strong>非锁定读</strong>, 是<strong>不加锁 读</strong>, <strong>依赖于 MVCC 快照读</strong> 实现 <a class="header-anchor" href="#已提交读 使用的是 非锁定读%2C 是不加锁 读%2C 依赖于 MVCC 快照读 实现" aria-label="Permalink to &quot;已提交读 使用的是 **非锁定读**, 是**不加锁 读**, **依赖于 MVCC 快照读** 实现&quot;">​</a></h3></li><li>事务读取数据时，只能读取到其他事务已提交的数据。</li><li><h3 id="%E6%9C%AA%E6%8F%90%E4%BA%A4%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%BC%9A%E8%BF%9B%E5%85%A5%E5%BF%AB%E7%85%A7%EF%BC%8C%E5%9B%A0%E6%AD%A4%E6%97%A0%E6%B3%95%E8%A2%AB%E8%AF%BB%E5%8F%96%E3%80%82" tabindex="-1">未提交的数据<strong>不会进入快照</strong>，因此无法被读取。 <a class="header-anchor" href="#未提交的数据不会进入快照，因此无法被读取。" aria-label="Permalink to &quot;未提交的数据**不会进入快照**，因此无法被读取。&quot;">​</a></h3></li></ul></li><li><h3 id="%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB%E7%9A%84%E5%8E%9F%E5%9B%A0%EF%BC%9A%20!!" tabindex="-1"><strong>不可重复读的原因</strong>： !! <a class="header-anchor" href="#不可重复读的原因： !!" aria-label="Permalink to &quot;**不可重复读的原因**： !!&quot;">​</a></h3><ul><li><h3 id="commit%20%E5%90%8E%2C%20%E4%BF%AE%E6%94%B9%E7%9A%84%20%E8%BF%9B%E5%85%A5%E4%BA%86%20%E5%BF%AB%E7%85%A7%2C%20%E5%86%8D%E6%AC%A1%E8%AF%BB%2C%20%E7%BB%93%E6%9E%9C%E4%B8%8D%E4%B8%80%E6%A0%B7" tabindex="-1">commit 后, 修改的 进入了 快照, 再次读, 结果不一样 <a class="header-anchor" href="#commit 后%2C 修改的 进入了 快照%2C 再次读%2C 结果不一样" aria-label="Permalink to &quot;commit 后, 修改的 进入了 快照, 再次读, 结果不一样&quot;">​</a></h3></li><li>每次 <code>SELECT</code> 都会生成新的快照。</li><li><h3 id="%E5%A6%82%E6%9E%9C%E5%85%B6%E4%BB%96%E4%BA%8B%E5%8A%A1%E6%8F%90%E4%BA%A4%E4%BA%86%E6%9B%B4%E6%96%B0%E6%93%8D%E4%BD%9C%EF%BC%8C%E6%96%B0%E7%9A%84%E5%BF%AB%E7%85%A7%E4%BC%9A%E5%8C%85%E5%90%AB%E6%9C%80%E6%96%B0%E7%9A%84%E6%95%B0%E6%8D%AE%E7%89%88%E6%9C%AC%EF%BC%8C%E5%AF%BC%E8%87%B4%E5%90%8C%E4%B8%80%E4%BA%8B%E5%8A%A1%E4%B8%AD%E5%A4%9A%E6%AC%A1%E8%AF%BB%E5%8F%96%E7%BB%93%E6%9E%9C%E4%B8%8D%E4%B8%80%E8%87%B4%E3%80%82" tabindex="-1">如果其他事务<strong>提交了更新操作</strong>，<strong>新的快照会包含最新的数据版本</strong>，导致同一事务中多次读取结果不一致。 <a class="header-anchor" href="#如果其他事务提交了更新操作，新的快照会包含最新的数据版本，导致同一事务中多次读取结果不一致。" aria-label="Permalink to &quot;如果其他事务**提交了更新操作**，**新的快照会包含最新的数据版本**，导致同一事务中多次读取结果不一致。&quot;">​</a></h3></li></ul></li><li><h3 id="%E5%B9%BB%E8%AF%BB%E7%9A%84%E5%8E%9F%E5%9B%A0%EF%BC%9A" tabindex="-1"><strong>幻读的原因</strong>： <a class="header-anchor" href="#幻读的原因：" aria-label="Permalink to &quot;**幻读的原因**：&quot;">​</a></h3><ul><li>每次 <code>SELECT</code> 都会生成新的快照。</li><li>如果其他事务提交了插入操作，新的快照会包含新增的数据，导致查询结果集发生变化。</li></ul></li></ol></blockquote><hr><h2 id="%E6%80%BB%E7%BB%93-14" tabindex="-1">总结 <a class="header-anchor" href="#总结-14" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li><p><strong>已提交读的优点</strong>：</p><ul><li>通过 MVCC 快照读解决了脏读问题。</li><li>性能较高，适合大多数业务场景。</li></ul></li><li><p><strong>已提交读的缺点</strong>：</p><ul><li>无法解决不可重复读和幻读问题。</li><li>每次查询都会生成新的快照，可能导致结果不一致。</li></ul></li><li><p><strong>核心原理</strong>：</p><ul><li><strong>依赖 MVCC 的快照读机制</strong>。</li><li>快照<strong>只包含已提交的数据</strong>，未提交的数据不会进入快照。</li></ul></li></ul><h1 id="MVCC%E5%92%8Cundo%20log(%E4%BA%8C)%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB" tabindex="-1">MVCC和undo log(二)可重复读 <a class="header-anchor" href="#MVCC和undo log(二)可重复读" aria-label="Permalink to &quot;MVCC和undo log(二)可重复读&quot;">​</a></h1><h2 id="%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB%EF%BC%88Repeatable%20Read%EF%BC%89%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E7%9A%84%E5%8E%9F%E7%90%86" tabindex="-1">可重复读（Repeatable Read）隔离级别的原理 <a class="header-anchor" href="#可重复读（Repeatable Read）隔离级别的原理" aria-label="Permalink to &quot;可重复读（Repeatable Read）隔离级别的原理&quot;">​</a></h2><ol><li><p><strong>解决的问题</strong>：</p><ul><li><strong>解决了脏读问题</strong>：与已提交读相同，通过 MVCC 快照读，读取的都是已提交的数据。</li><li><strong>解决了不可重复读问题</strong>：同一事务中多次读取同一数据，结果始终一致。</li></ul></li><li><p><strong>未完全解决的问题</strong>：</p><ul><li><strong>部分解决幻读问题</strong>：通过快照读避免了新增数据的影响，但在某些情况下（如当前读操作），幻读仍可能发生。</li></ul></li><li><p><strong>实现方式</strong>：</p><ul><li><p><strong>MVCC（多版本并发控制）</strong>：</p><ul><li><strong>快照读</strong>：读取的是事务开始时生成的快照数据。</li><li><strong>当前读</strong>：读取的是最新版本数据（如 <code>UPDATE</code>、<code>DELETE</code> 等操作）。</li></ul></li><li><h3 id="%E5%BF%AB%E7%85%A7%E7%94%9F%E6%88%90%E6%97%B6%E6%9C%BA%EF%BC%9A%20!!!!" tabindex="-1"><strong>快照生成时机</strong>： !!!! <a class="header-anchor" href="#快照生成时机： !!!!" aria-label="Permalink to &quot;**快照生成时机**： !!!!&quot;">​</a></h3><ul><li><h3 id="%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB%EF%BC%9A%E4%BA%8B%E5%8A%A1%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%20SELECT%20%E6%97%B6%E7%94%9F%E6%88%90%E5%BF%AB%E7%85%A7%EF%BC%8C%E5%90%8E%E7%BB%AD%E6%9F%A5%E8%AF%A2%E5%9D%87%E5%9F%BA%E4%BA%8E%E8%AF%A5%E5%BF%AB%E7%85%A7%E3%80%82" tabindex="-1"><strong>可重复读</strong>：事务的第一次 <code>SELECT</code> 时生成快照，后续查询均基于该快照。 <a class="header-anchor" href="#可重复读：事务的第一次 SELECT 时生成快照，后续查询均基于该快照。" aria-label="Permalink to &quot;**可重复读**：事务的第一次 `SELECT` 时生成快照，后续查询均基于该快照。&quot;">​</a></h3><blockquote><h3 id="%E4%BA%8B%E5%8A%A11%20%E5%85%88%E5%8A%A0%2C%E6%9C%AA%E6%8F%90%E4%BA%A4%2C%20%20%20%E4%BA%8B%E5%8A%A12%20%E5%86%8Dselect%2C%20%E8%AF%BB%E4%B8%8D%E5%88%B0%2C%20%E5%9B%A0%E4%B8%BA%20%E6%B2%A1%E6%8F%90%E4%BA%A4!!" tabindex="-1">事务1 先加,未提交, 事务2 再select, 读不到, 因为 没提交!! <a class="header-anchor" href="#事务1 先加%2C未提交%2C   事务2 再select%2C 读不到%2C 因为 没提交!!" aria-label="Permalink to &quot;事务1 先加,未提交,   事务2 再select, 读不到, 因为 没提交!!&quot;">​</a></h3><p>可重复读, 是读 提交后的, 不是 未提交 就能看到</p></blockquote></li></ul></li></ul></li></ol><hr><h2 id="%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB%E7%9A%84%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90-%E9%9D%A2%E8%AF%95" tabindex="-1">可重复读的行为分析-面试 <a class="header-anchor" href="#可重复读的行为分析-面试" aria-label="Permalink to &quot;可重复读的行为分析-面试&quot;">​</a></h2><blockquote><ol><li><p><strong>脏读的解决</strong>：</p><ul><li>与已提交读相同，读取的都是已提交的数据。</li><li>未提交的数据不会进入快照，因此无法被读取。</li></ul></li><li><p><strong>不可重复读的解决</strong>：</p><ul><li><h3 id="%E4%BA%8B%E5%8A%A1%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%20SELECT%20%E6%97%B6%E7%94%9F%E6%88%90%E5%BF%AB%E7%85%A7%EF%BC%8C%E5%90%8E%E7%BB%AD%E6%9F%A5%E8%AF%A2%E5%9D%87%E5%9F%BA%E4%BA%8E%E8%AF%A5%E5%BF%AB%E7%85%A7%E3%80%82" tabindex="-1">事务的第一次 <code>SELECT</code> 时生成快照，<strong>后续查询均基于该快照</strong>。 <a class="header-anchor" href="#事务的第一次 SELECT 时生成快照，后续查询均基于该快照。" aria-label="Permalink to &quot;事务的第一次 `SELECT` 时生成快照，**后续查询均基于该快照**。&quot;">​</a></h3></li><li>即使其他事务提交了更新操作，当前<strong>事务的查询结果仍然一致。</strong></li></ul></li><li><p><strong>幻读的部分解决</strong>：</p><ul><li><p>快照读避免了新增数据的影响，因为查询基于事务开始时的快照。</p></li><li><h3 id="%E4%BD%86%E5%BD%93%E5%89%8D%E8%AF%BB%E6%93%8D%E4%BD%9C%EF%BC%88%E5%A6%82%20UPDATE%EF%BC%89%E4%BC%9A%E8%AF%BB%E5%8F%96%E6%9C%80%E6%96%B0%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%8F%AF%E8%83%BD%E5%AF%BC%E8%87%B4%E5%B9%BB%E8%AF%BB%E3%80%82" tabindex="-1">但当前读操作（如 <code>UPDATE</code>）会读取最新数据，可能导致幻读。 <a class="header-anchor" href="#但当前读操作（如 UPDATE）会读取最新数据，可能导致幻读。" aria-label="Permalink to &quot;但当前读操作（如 `UPDATE`）会读取最新数据，可能导致幻读。&quot;">​</a></h3><h3 id="update%20delete%20insert%20%20%E6%98%AF%20%E5%BD%93%E5%89%8D%E8%AF%BB%20%20%2C%20%20%E4%B8%8D%E8%BF%87%20%E9%AB%98%E7%89%88%E6%9C%AC%20%E4%BC%98%E5%8C%96%E4%BA%86%205.7%20%E5%92%8C8.0%20%E9%83%BD%E4%BC%98%E5%8C%96%E4%BA%86" tabindex="-1">update delete insert 是 当前读 , 不过 <strong>高版本 优化了</strong> 5.7 和8.0 都优化了 <a class="header-anchor" href="#update delete insert  是 当前读  %2C  不过 高版本 优化了 5.7 和8.0 都优化了" aria-label="Permalink to &quot;update delete insert  是 当前读  ,  不过 **高版本 优化了** 5.7 和8.0 都优化了&quot;">​</a></h3><p>select ... for update 会导致 幻读</p><h3 id="%E4%B8%8D%E7%94%A8%20%E8%BF%99%E4%B9%88%E5%9C%A8%E6%84%8F%2C%20%20%E5%AE%9E%E9%99%85%E5%8E%BB%20%E6%93%8D%E4%BD%9C%E5%B0%B1%E7%9F%A5%E9%81%93%E4%BA%86!!" tabindex="-1"><code>不用 这么在意, 实际去 操作就知道了!!</code> <a class="header-anchor" href="#不用 这么在意%2C  实际去 操作就知道了!!" aria-label="Permalink to &quot;`不用 这么在意,  实际去 操作就知道了!!`&quot;">​</a></h3></li></ul></li></ol></blockquote><hr><h2 id="%E6%80%BB%E7%BB%93-15" tabindex="-1">总结 <a class="header-anchor" href="#总结-15" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li><p><strong>可重复读的优点</strong>：</p><ul><li>通过 MVCC 快照读解决了脏读和不可重复读问题。</li><li>部分解决幻读问题，性能较高。</li></ul></li><li><p><strong>可重复读的缺点</strong>：</p><ul><li>幻读问题未完全解决，当前读操作可能导致幻读。</li></ul></li><li><p><strong>核心原理</strong>：</p><ul><li>依赖 MVCC 的快照读机制。</li><li>快照在事务的第一次 <code>SELECT</code> 时生成，后续查询基于该快照。</li></ul></li></ul><hr><h2 id="%E9%87%8D%E7%82%B9%E7%90%86%E8%A7%A3" tabindex="-1">重点理解 <a class="header-anchor" href="#重点理解" aria-label="Permalink to &quot;重点理解&quot;">​</a></h2><ol><li><p><strong>快照生成时机</strong>：</p><ul><li>已提交读：每次查询生成新的快照。</li><li>可重复读：事务的第一次查询生成快照。</li></ul></li><li><p><strong>当前读与快照读的区别</strong>：</p><ul><li>当前读：读取最新数据，可能导致幻读。</li><li>快照读：读取快照数据，避免了幻读。</li></ul></li><li><p><strong>事务内的可见性</strong>：</p><ul><li>当前事务可以看到自己修改的数据，即使这些数据未提交。</li></ul></li></ol><hr><p><img src="'+_+'" alt="image-20250515195730701"></p><h1 id="%E6%84%8F%E5%90%91%E5%85%B1%E4%BA%AB%E9%94%81%E5%92%8C%E6%84%8F%E5%90%91%E6%8E%92%E4%BB%96%E9%94%81" tabindex="-1">意向共享锁和意向排他锁 <a class="header-anchor" href="#意向共享锁和意向排他锁" aria-label="Permalink to &quot;意向共享锁和意向排他锁&quot;">​</a></h1><h2 id="%E4%B8%BB%E8%A6%81%E6%84%8F%E4%B9%89" tabindex="-1">主要意义 <a class="header-anchor" href="#主要意义" aria-label="Permalink to &quot;主要意义&quot;">​</a></h2><blockquote><h3 id="%E5%8F%AF%E4%BB%A5%20%E5%BF%AB%E9%80%9F%20%E5%88%A4%E6%96%AD%20%E8%83%BD%E5%90%A6%E8%8E%B7%E5%BE%97%20%E8%A1%A8%E9%94%81" tabindex="-1">可以 <strong>快速 判断</strong> <strong>能否获得</strong> <code>表锁</code> <a class="header-anchor" href="#可以 快速 判断 能否获得 表锁" aria-label="Permalink to &quot;可以 **快速 判断** **能否获得** `表锁`&quot;">​</a></h3><h3 id="%E8%80%8C%E4%B8%8D%E9%9C%80%E8%A6%81%20%E5%8F%96%E9%80%90%E8%A1%8C%20%E5%88%A4%E6%96%AD--%20%E5%9B%A0%E4%B8%BA%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%20%E8%BF%99%E4%B8%AA%E8%A1%A8%E9%87%8C%20%E6%9C%89%E6%B2%A1%E6%9C%89%20%E8%A1%8C%20%E6%98%AF%20X%E9%94%81%20%2C%20%E6%9C%89%E4%BA%86%2C%20%E5%B0%B1%E4%B8%8D%E8%83%BD%20%E6%95%B4%E8%A1%A8%20X%E4%BA%86" tabindex="-1">而<strong>不需要 取逐行</strong> 判断-- 因为你不知道 这个表里 有没有 行 是 X锁 , 有了, 就不能 整表 X了 <a class="header-anchor" href="#而不需要 取逐行 判断-- 因为你不知道 这个表里 有没有 行 是 X锁 %2C 有了%2C 就不能 整表 X了" aria-label="Permalink to &quot;而**不需要 取逐行** 判断-- 因为你不知道 这个表里 有没有 行 是 X锁 , 有了, 就不能 整表 X了&quot;">​</a></h3></blockquote><h2 id="%E6%84%8F%E5%90%91%E9%94%81%E7%9A%84%E5%AE%9A%E4%B9%89" tabindex="-1">意向锁的定义 <a class="header-anchor" href="#意向锁的定义" aria-label="Permalink to &quot;意向锁的定义&quot;">​</a></h2><ul><li><h3 id="%E6%84%8F%E5%90%91%E9%94%81%E6%98%AF%E8%A1%A8%E7%BA%A7%E5%88%AB%E7%9A%84%E9%94%81%EF%BC%8C%E7%94%A8%E4%BA%8E%E5%8D%8F%E8%B0%83%E8%A1%A8%E9%94%81%E5%92%8C%E8%A1%8C%E9%94%81%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB%E3%80%82" tabindex="-1"><strong>意向锁</strong>是<strong>表级别</strong>的锁，用于<strong>协调表锁和行锁之间</strong>的关系。 <a class="header-anchor" href="#意向锁是表级别的锁，用于协调表锁和行锁之间的关系。" aria-label="Permalink to &quot;**意向锁**是**表级别**的锁，用于**协调表锁和行锁之间**的关系。&quot;">​</a></h3></li><li><p><strong>意向共享锁（IS）</strong>：表示事务计划对某些行加共享锁（S锁）。</p><h3 id="%E4%BA%8B%E5%8A%A1%E8%AE%A1%E5%88%92%E7%BB%99%E8%AE%B0%E5%BD%95%E5%8A%A0%E8%A1%8C%E5%85%B1%E4%BA%AB%E9%94%81%EF%BC%8C%E4%BA%8B%E5%8A%A1%E5%9C%A8%E7%BB%99%E4%B8%80%E8%A1%8C%E8%AE%B0%E5%BD%95%E5%8A%A0%E5%85%B1%E4%BA%AB%E9%94%81%E5%89%8D%EF%BC%8C%E5%BF%85%E9%A1%BB%E5%85%88%E5%8F%96%E5%BE%97%E8%AF%A5%E8%A1%A8%E7%9A%84%20IS%20%E9%94%81%E3%80%82" tabindex="-1">事务计划给记录加行共享锁，事务在给一行记录加共享锁前，必须先取得该表的 IS 锁。 <a class="header-anchor" href="#事务计划给记录加行共享锁，事务在给一行记录加共享锁前，必须先取得该表的 IS 锁。" aria-label="Permalink to &quot;事务计划给记录加行共享锁，事务在给一行记录加共享锁前，必须先取得该表的 IS 锁。&quot;">​</a></h3></li><li><p><strong>意向排他锁（IX）</strong>：表示事务计划对某些行加排他锁（X锁）。</p><h3 id="%E4%BA%8B%E5%8A%A1%E8%AE%A1%E5%88%92%E7%BB%99%E8%AE%B0%E5%BD%95%E5%8A%A0%E8%A1%8C%E6%8E%92%E4%BB%96%E9%94%81%EF%BC%8C%E4%BA%8B%E5%8A%A1%E5%9C%A8%E7%BB%99%E4%B8%80%E8%A1%8C%E8%AE%B0%E5%BD%95%E5%8A%A0%E6%8E%92%E4%BB%96%E9%94%81%E5%89%8D%EF%BC%8C%E5%BF%85%E9%A1%BB%E5%85%88%E5%8F%96%E5%BE%97%E8%AF%A5%E8%A1%A8%E7%9A%84%20IX%20%E9%94%81%E3%80%82" tabindex="-1">事务计划给记录加行排他锁，事务在给一行记录加排他锁前，必须先取得该表的 IX 锁。 <a class="header-anchor" href="#事务计划给记录加行排他锁，事务在给一行记录加排他锁前，必须先取得该表的 IX 锁。" aria-label="Permalink to &quot;事务计划给记录加行排他锁，事务在给一行记录加排他锁前，必须先取得该表的 IX 锁。&quot;">​</a></h3></li></ul><hr><h2 id="%E6%84%8F%E5%90%91%E9%94%81%E7%9A%84%E4%BD%9C%E7%94%A8" tabindex="-1">意向锁的作用 <a class="header-anchor" href="#意向锁的作用" aria-label="Permalink to &quot;意向锁的作用&quot;">​</a></h2><p>意向锁的主要目的是<strong>提高获取表锁的效率</strong>，<strong>避免在获取表锁时需要扫描表中所有行的锁状态</strong>。它通过以下方式实现：</p><ul><li>当事务需要获取表的共享锁（S锁）或排他锁（X锁）时，可以通过检查表上的意向锁（IS或IX）快速判断是否有冲突。</li><li>避免逐行检查表中每一行的锁状态，从而提升性能。</li></ul><hr><h2 id="%E6%84%8F%E5%90%91%E9%94%81%E7%9A%84%E7%89%B9%E7%82%B9" tabindex="-1">意向锁的特点 <a class="header-anchor" href="#意向锁的特点" aria-label="Permalink to &quot;意向锁的特点&quot;">​</a></h2><ul><li><h3 id="%E8%87%AA%E5%8A%A8%E5%8A%A0%E9%94%81%EF%BC%9A%E6%84%8F%E5%90%91%E9%94%81%E6%98%AF%E7%94%B1InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E8%87%AA%E5%8A%A8%E5%8A%A0%E4%B8%8A%E7%9A%84%EF%BC%8C%E7%94%A8%E6%88%B7%E6%97%A0%E6%B3%95%E6%89%8B%E5%8A%A8%E5%8A%A0%E6%84%8F%E5%90%91%E9%94%81%E3%80%82" tabindex="-1"><strong>自动加锁</strong>：意向锁是由<code>InnoDB存储引擎自动加上</code>的，<code>用户无法手动加意向锁</code>。 <a class="header-anchor" href="#自动加锁：意向锁是由InnoDB存储引擎自动加上的，用户无法手动加意向锁。" aria-label="Permalink to &quot;**自动加锁**：意向锁是由`InnoDB存储引擎自动加上`的，`用户无法手动加意向锁`。&quot;">​</a></h3></li><li><h3 id="%E5%85%BC%E5%AE%B9%E6%80%A7%EF%BC%9A%E6%84%8F%E5%90%91%E9%94%81%E4%B9%8B%E9%97%B4%EF%BC%88IS%E4%B8%8EIS%E3%80%81IX%E4%B8%8EIX%E3%80%81IS%E4%B8%8EIX%EF%BC%89%E6%98%AF%E5%85%BC%E5%AE%B9%E7%9A%84%EF%BC%8C%E4%B8%8D%E4%BC%9A%E4%BA%A7%E7%94%9F%E5%86%B2%E7%AA%81%E3%80%82" tabindex="-1"><strong>兼容性</strong>：意向锁之间（IS与IS、IX与IX、IS与IX）是<strong>兼容的</strong>，不会产生冲突。 <a class="header-anchor" href="#兼容性：意向锁之间（IS与IS、IX与IX、IS与IX）是兼容的，不会产生冲突。" aria-label="Permalink to &quot;**兼容性**：意向锁之间（IS与IS、IX与IX、IS与IX）是**兼容的**，不会产生冲突。&quot;">​</a></h3></li><li><h3 id="%E5%86%B2%E7%AA%81%E6%A3%80%E6%B5%8B%EF%BC%9A%E6%84%8F%E5%90%91%E9%94%81%E4%B8%8E%E8%A1%A8%E9%94%81%EF%BC%88S%E9%94%81%E3%80%81X%E9%94%81%EF%BC%89%E4%B9%8B%E9%97%B4%E4%BC%9A%E4%BA%A7%E7%94%9F%E5%86%B2%E7%AA%81%EF%BC%8C%E7%94%A8%E4%BA%8E%E5%BF%AB%E9%80%9F%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%8F%96%E8%A1%A8%E9%94%81%E3%80%82" tabindex="-1"><strong>冲突检测</strong>：<code>意向锁与表锁</code>（S锁、X锁）之间<code>会产生冲突</code>，用于快速判断是否可以获取表锁。 <a class="header-anchor" href="#冲突检测：意向锁与表锁（S锁、X锁）之间会产生冲突，用于快速判断是否可以获取表锁。" aria-label="Permalink to &quot;**冲突检测**：`意向锁与表锁`（S锁、X锁）之间`会产生冲突`，用于快速判断是否可以获取表锁。&quot;">​</a></h3><h3 id="%E4%B8%8D%E6%98%AF%20%E8%A1%8C%E9%94%81%2C%20%E6%98%AF%E8%A1%A8%E9%94%81" tabindex="-1">不是 行锁, 是表锁 <a class="header-anchor" href="#不是 行锁%2C 是表锁" aria-label="Permalink to &quot;不是 行锁, 是表锁&quot;">​</a></h3></li></ul><hr><h2 id="%E6%84%8F%E5%90%91%E9%94%81%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF" tabindex="-1">意向锁的使用场景 <a class="header-anchor" href="#意向锁的使用场景" aria-label="Permalink to &quot;意向锁的使用场景&quot;">​</a></h2><ul><li><strong>行锁与表锁的共存</strong>：当事务对表中的某些行加锁时，会自动在表上加意向锁，表明该表的某些行已被加锁。</li><li><strong>快速判断表锁的可用性</strong>：在获取表锁时，通过检查表上的意向锁，可以快速判断是否有其他事务对表中的行加了冲突锁。</li></ul><hr><h2 id="%E5%85%BC%E5%AE%B9%E6%80%A7%E7%9F%A9%E9%98%B5" tabindex="-1">兼容性矩阵 <a class="header-anchor" href="#兼容性矩阵" aria-label="Permalink to &quot;兼容性矩阵&quot;">​</a></h2><p>以下是意向锁与表锁的兼容性表（简化版）：</p><blockquote><p>注意, 意向锁 只有 IX, IS</p><p>表锁只有 X S</p><h3 id="%E6%B3%A8%E6%84%8F%20X%20%20%E4%BD%BF%E5%BE%97%20%E5%85%B6%20%20%E4%B8%8D%E5%8F%AF%E8%AF%BB%2C%E4%B8%8D%E5%8F%AF%E5%86%99!!%20%20%E5%9B%A0%E6%AD%A4%20IS%20%E4%B8%8EX%20%E5%86%B2%E7%AA%81" tabindex="-1">注意 X 使得 其 不可读,不可写!! 因此 IS 与X 冲突 <a class="header-anchor" href="#注意 X  使得 其  不可读%2C不可写!!  因此 IS 与X 冲突" aria-label="Permalink to &quot;注意 X  使得 其  不可读,不可写!!  因此 IS 与X 冲突&quot;">​</a></h3><p>不要 不会看表</p></blockquote><table tabindex="0"><thead><tr><th>表锁/意向锁</th><th>IS</th><th>IX</th><th>S</th><th>X</th></tr></thead><tbody><tr><td><strong>IS</strong></td><td>✔️</td><td>✔️</td><td>✔️</td><td>❌</td></tr><tr><td><strong>IX</strong></td><td>✔️</td><td>✔️</td><td>❌</td><td>❌</td></tr><tr><td><strong>S</strong></td><td>✔️</td><td>❌</td><td>✔️</td><td>❌</td></tr><tr><td><strong>X</strong></td><td>❌</td><td>❌</td><td>❌</td><td>❌</td></tr></tbody></table><hr><h2 id="%E6%80%BB%E7%BB%93-16" tabindex="-1">总结 <a class="header-anchor" href="#总结-16" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li><p><strong>意向锁的核心意义</strong>：通过在表级别加锁，避免在获取表锁时逐行扫描，提高效率。</p></li><li><p><strong>意向锁的本质</strong>：它是表级锁，用于辅助行锁和表锁的协调。</p></li><li><h3 id="%E8%AE%B0%E5%BF%86%E8%A6%81%E7%82%B9%EF%BC%9A" tabindex="-1"><strong>记忆要点</strong>： <a class="header-anchor" href="#记忆要点：" aria-label="Permalink to &quot;**记忆要点**：&quot;">​</a></h3><ol><li>意向锁是针对表锁的，不是针对行锁的。</li><li>意向锁的目的是为了更快速地获取表锁。</li><li>意向锁是由存储引擎自动加的，用户无需手动操作。</li></ol></li></ul><h1 id="%E6%89%8B%E5%8A%A8%E5%8A%A0%E8%A1%A8%E9%94%81-%E8%A1%A5%E5%85%85" tabindex="-1">手动加表锁-补充 <a class="header-anchor" href="#手动加表锁-补充" aria-label="Permalink to &quot;手动加表锁-补充&quot;">​</a></h1><blockquote><h2 id="%E4%B8%80%E3%80%81MyISAM%20%E5%BC%95%E6%93%8E%E6%94%AF%E6%8C%81%E6%98%BE%E5%BC%8F%E8%A1%A8%E9%94%81" tabindex="-1">一、MyISAM 引擎支持显式表锁 <a class="header-anchor" href="#一、MyISAM 引擎支持显式表锁" aria-label="Permalink to &quot;一、MyISAM 引擎支持显式表锁&quot;">​</a></h2><p>MyISAM 不支持行锁，只支持表锁，<strong>可以手动加锁</strong>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>LOCK TABLES 表名 READ;   -- 读锁</span></span>\n<span class="line"><span>LOCK TABLES 表名 WRITE;  -- 写锁</span></span></code></pre></div><p>使用后记得解锁：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>UNLOCK TABLES;</span></span></code></pre></div><p>示例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>LOCK TABLES users WRITE;</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>-- 执行对 users 表的写操作</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>UNLOCK TABLES;</span></span></code></pre></div><hr><h2 id="%E4%BA%8C%E3%80%81InnoDB%20%E5%BC%95%E6%93%8E%E9%BB%98%E8%AE%A4%E4%BD%BF%E7%94%A8%E8%A1%8C%E7%BA%A7%E9%94%81%EF%BC%8C%E4%BD%86%E4%B9%9F%E6%94%AF%E6%8C%81%E8%A1%A8%E9%94%81%EF%BC%88%E9%80%9A%E8%BF%87%20LOCK%20TABLES%EF%BC%89" tabindex="-1">二、InnoDB 引擎默认使用行级锁，但也支持表锁（通过 <code>LOCK TABLES</code>） <a class="header-anchor" href="#二、InnoDB 引擎默认使用行级锁，但也支持表锁（通过 LOCK TABLES）" aria-label="Permalink to &quot;二、InnoDB 引擎默认使用行级锁，但也支持表锁（通过 `LOCK TABLES`）&quot;">​</a></h2><p>InnoDB 引擎默认支持<strong>行级锁</strong>，可以在事务中隐式加锁（例如 <code>SELECT ... FOR UPDATE</code>），但它也支持显式加表锁，方式与 MyISAM 相同：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>LOCK TABLES 表名 READ;</span></span>\n<span class="line"><span>LOCK TABLES 表名 WRITE;</span></span></code></pre></div><p>注意事项：</p><ul><li>如果你使用了 <code>LOCK TABLES</code>，即使是 InnoDB 也只会使用表锁，不再使用行锁。</li><li>使用表锁后，InnoDB 也会<strong>自动提交当前事务</strong>（⚠️）。</li></ul><hr><h2 id="%E4%B8%89%E3%80%81%E5%9C%A8%20InnoDB%20%E4%B8%AD%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8%E8%A1%8C%E9%94%81%E7%9A%84%E6%96%B9%E5%BC%8F%E5%8A%A0%E9%94%81%EF%BC%88%E6%9B%B4%E7%BB%86%E7%B2%92%E5%BA%A6%EF%BC%89" tabindex="-1">三、在 InnoDB 中建议使用行锁的方式加锁（更细粒度） <a class="header-anchor" href="#三、在 InnoDB 中建议使用行锁的方式加锁（更细粒度）" aria-label="Permalink to &quot;三、在 InnoDB 中建议使用行锁的方式加锁（更细粒度）&quot;">​</a></h2><p>行锁使用语句：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>START TRANSACTION;</span></span>\n<span class="line"><span>SELECT * FROM 表名 WHERE id=1 FOR UPDATE;  -- 加写锁</span></span>\n<span class="line"><span>-- 或</span></span>\n<span class="line"><span>SELECT * FROM 表名 WHERE id=1 LOCK IN SHARE MODE;  -- 加读锁</span></span></code></pre></div><h2 id="%E6%80%BB%E7%BB%93%EF%BC%9AMySQL%20%E6%89%8B%E5%8A%A8%E5%8A%A0%E9%94%81%E7%9A%84%E6%96%B9%E5%BC%8F" tabindex="-1">总结：MySQL 手动加锁的方式 <a class="header-anchor" href="#总结：MySQL 手动加锁的方式" aria-label="Permalink to &quot;总结：MySQL 手动加锁的方式&quot;">​</a></h2><table tabindex="0"><thead><tr><th>类型</th><th>加锁方式</th><th>说明</th></tr></thead><tbody><tr><td>表锁（MyISAM/InnoDB）</td><td><code>LOCK TABLES ... READ/WRITE</code></td><td>全表加锁，适合读多写少、简单应用</td></tr><tr><td>行锁（InnoDB）</td><td><code>SELECT ... FOR UPDATE</code> 等</td><td>更细粒度控制，推荐用于事务</td></tr></tbody></table></blockquote><p><img src="'+U+'" alt="image-20250515215645959"></p><h1 id="%E6%AD%BB%E9%94%81" tabindex="-1">死锁 <a class="header-anchor" href="#死锁" aria-label="Permalink to &quot;死锁&quot;">​</a></h1><h2 id="%E7%9C%8B%E4%B8%80%E4%B8%8B%20%E8%80%81%E5%B8%88%20%E5%8D%9A%E6%96%87--%E6%AD%BB%E9%94%81%E5%88%86%E6%9E%90" tabindex="-1">看一下 老师 博文--死锁分析 <a class="header-anchor" href="#看一下 老师 博文--死锁分析" aria-label="Permalink to &quot;看一下 老师 博文--死锁分析&quot;">​</a></h2><p>gdb 调试 死锁</p><p>好的，这是一段关于数据库锁机制和死锁问题的详细讲解，主要涉及MySQL的表锁和行锁，以及如何避免和处理死锁问题。以下是内容的简要总结和关键点提炼：</p><hr><h2 id="%E4%B8%8D%E5%90%8C%E5%BC%95%E6%93%8E%E7%9A%84%E6%AD%BB%E9%94%81" tabindex="-1">不同引擎的死锁 <a class="header-anchor" href="#不同引擎的死锁" aria-label="Permalink to &quot;不同引擎的死锁&quot;">​</a></h2><ul><li><p>MyISAM存储引擎 <strong>只有表锁</strong></p><ul><li>因为锁定的是整个表，<strong>不会发生死锁</strong>。</li></ul></li><li><h3 id="InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%20%E6%94%AF%E6%8C%81%20%E8%A1%8C%E9%94%81" tabindex="-1">InnoDB存储引擎 支持 行锁 <a class="header-anchor" href="#InnoDB存储引擎 支持 行锁" aria-label="Permalink to &quot;InnoDB存储引擎 支持 行锁&quot;">​</a></h3><ul><li><h3 id="%E6%94%AF%E6%8C%81%E6%9B%B4%E9%AB%98%E7%9A%84%E5%B9%B6%E5%8F%91%EF%BC%8C%E4%BD%86%E5%8F%AF%E8%83%BD%E5%8F%91%E7%94%9F%E6%AD%BB%E9%94%81%E3%80%82" tabindex="-1">支持更高的并发，<strong>但可能发生死锁</strong>。 <a class="header-anchor" href="#支持更高的并发，但可能发生死锁。" aria-label="Permalink to &quot;支持更高的并发，**但可能发生死锁**。&quot;">​</a></h3></li></ul></li></ul><hr><h2 id="%E6%AD%BB%E9%94%81%E7%9A%84%E5%8F%91%E7%94%9F%E6%9D%A1%E4%BB%B6" tabindex="-1">死锁的发生条件 <a class="header-anchor" href="#死锁的发生条件" aria-label="Permalink to &quot;死锁的发生条件&quot;">​</a></h2><ul><li><h3 id="%E6%AD%BB%E9%94%81%E9%80%9A%E5%B8%B8%E5%8F%91%E7%94%9F%E5%9C%A8%E5%A4%9A%E4%B8%AA%E4%BA%8B%E5%8A%A1%E5%B0%9D%E8%AF%95%E4%BB%A5%E4%B8%8D%E5%90%8C%E9%A1%BA%E5%BA%8F%E8%8E%B7%E5%8F%96%E7%9B%B8%E5%90%8C%E8%B5%84%E6%BA%90%E7%9A%84%E9%94%81%E6%97%B6%E3%80%82" tabindex="-1">死锁通常发生在<strong>多个事务</strong>尝试<strong>以不同顺序</strong>获取相同资源的锁时。 <a class="header-anchor" href="#死锁通常发生在多个事务尝试以不同顺序获取相同资源的锁时。" aria-label="Permalink to &quot;死锁通常发生在**多个事务**尝试**以不同顺序**获取相同资源的锁时。&quot;">​</a></h3></li><li>典型场景： <ul><li>事务1先获取资源A的锁，再尝试获取资源B的锁。</li><li>事务2先获取资源B的锁，再尝试获取资源A的锁。</li><li>两个事务互相等待对方释放锁，导致死锁。</li></ul></li></ul><hr><h2 id="MySQL%E5%AF%B9%E6%AD%BB%E9%94%81%E7%9A%84%E5%A4%84%E7%90%86" tabindex="-1">MySQL对死锁的处理 <a class="header-anchor" href="#MySQL对死锁的处理" aria-label="Permalink to &quot;MySQL对死锁的处理&quot;">​</a></h2><ul><li><p>InnoDB存储引擎：</p><ul><li>自动检测死锁。</li><li><h3 id="%E5%9B%9E%E6%BB%9A%E5%85%B6%E4%B8%AD%E4%B8%80%E4%B8%AA%E4%BA%8B%E5%8A%A1%E4%BB%A5%E8%A7%A3%E9%99%A4%E6%AD%BB%E9%94%81%E3%80%82%20--%20%E8%BF%99%E6%98%AF%20%E8%87%AA%E5%8A%A8%E5%9B%9E%E6%BB%9A" tabindex="-1"><strong>回滚</strong>其中一个事务以解除死锁。 -- 这是 自动回滚 <a class="header-anchor" href="#回滚其中一个事务以解除死锁。 -- 这是 自动回滚" aria-label="Permalink to &quot;**回滚**其中一个事务以解除死锁。 -- 这是 自动回滚&quot;">​</a></h3></li><li>提示<code>Deadlock found when trying to get lock</code>错误信息。</li><li>将需要 重新 开启一个事务</li></ul></li><li><p><strong>MyISAM存储引擎</strong>：</p><ul><li><h3 id="%E4%B8%8D%E6%94%AF%E6%8C%81%E4%BA%8B%E5%8A%A1%EF%BC%8C%E5%9B%A0%E6%AD%A4%E4%B8%8D%E4%BC%9A%E5%8F%91%E7%94%9F%E6%AD%BB%E9%94%81%E3%80%82" tabindex="-1">不支持事务，因此不会发生死锁。 <a class="header-anchor" href="#不支持事务，因此不会发生死锁。" aria-label="Permalink to &quot;不支持事务，因此不会发生死锁。&quot;">​</a></h3></li></ul></li></ul><hr><h2 id="%E9%81%BF%E5%85%8D%E6%AD%BB%E9%94%81%E7%9A%84%E5%BB%BA%E8%AE%AE-%E4%B8%8D%E7%94%A8%E5%85%A8%E8%83%8C" tabindex="-1">避免死锁的建议-不用全背 <a class="header-anchor" href="#避免死锁的建议-不用全背" aria-label="Permalink to &quot;避免死锁的建议-不用全背&quot;">​</a></h2><p><img src="'+Q+'" alt="image-20250515215045460"></p><ul><li><strong>统一资源锁的获取顺序</strong>： <ul><li>所有事务按照相同的顺序获取资源锁。</li></ul></li><li><strong>减少事务的大小</strong>： <ul><li>小事务减少锁冲突的概率。</li></ul></li><li><strong>设计合理的索引</strong>： <ul><li>使用索引访问数据，使加锁更精准，减少锁冲突。</li></ul></li><li><strong>尽量使用较低的隔离级别</strong>： <ul><li>根据业务需求选择适当的隔离级别（如已提交读或可重复读）。</li></ul></li><li><strong>避免显示加锁</strong>： <ul><li>非必要情况下，不使用<code>FOR UPDATE</code>或<code>LOCK IN SHARE MODE</code>手动加锁。</li></ul></li></ul><hr><h2 id="%E9%97%B4%E9%9A%99%E9%94%81%EF%BC%88Gap%20Lock%EF%BC%89" tabindex="-1">间隙锁（Gap Lock） <a class="header-anchor" href="#间隙锁（Gap Lock）" aria-label="Permalink to &quot;间隙锁（Gap Lock）&quot;">​</a></h2><ul><li><strong>优化</strong>： <ul><li>尽量使用等值查询，减少间隙锁的影响。</li></ul></li></ul><hr><h2 id="%E5%AE%9E%E8%B7%B5%E4%B8%8E%E9%9D%A2%E8%AF%95%E5%BB%BA%E8%AE%AE" tabindex="-1">实践与面试建议 <a class="header-anchor" href="#实践与面试建议" aria-label="Permalink to &quot;实践与面试建议&quot;">​</a></h2><ul><li>理解理论的同时，结合实际场景进行实践。</li><li>在面试中，结合具体案例（如死锁的调试和解决）进行说明，更具说服力。</li></ul><h1 id="redo%20log-%E7%BB%93%E5%90%88pdf%E5%9B%BE" tabindex="-1">redo log-结合pdf图 <a class="header-anchor" href="#redo log-结合pdf图" aria-label="Permalink to &quot;redo log-结合pdf图&quot;">​</a></h1><p><img src="'+w+'" alt="image-20250515232648783"></p><p><img src="'+H+'" alt="image-20250515233402222"></p><h2 id="redo%20log%20%E7%9A%84%E6%A0%B8%E5%BF%83%E4%BD%9C%E7%94%A8" tabindex="-1"><code>redo log</code> 的核心作用 <a class="header-anchor" href="#redo log 的核心作用" aria-label="Permalink to &quot;`redo log` 的核心作用&quot;">​</a></h2><blockquote><ol><li><p><strong>保证事务的持久性（Durability）</strong>：</p><ul><li>当事务提交（<code>commit</code>）成功后，即使发生掉电、服务崩溃等异常，<code>redo log</code> 也能确保数据恢复到事务提交后的状态。</li><li>这是事务 ACID 特性中 <strong>持久性</strong> 的体现。</li></ul></li><li><p><strong>记录事务的修改</strong>：</p><ul><li><code>redo log</code> 记录的是事务对数据页的修改内容（物理日志），而<strong>不是具体的 SQL 操作</strong>。</li><li><h3 id="%E4%BA%8B%E5%8A%A1%E4%BB%8E%20begin%20%E5%BC%80%E5%A7%8B%E6%97%B6%EF%BC%8Credo%20log%20%E5%B0%B1%E5%BC%80%E5%A7%8B%E8%AE%B0%E5%BD%95%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E7%AD%89%E5%88%B0%20commit%20%E6%97%B6%E6%89%8D%E8%AE%B0%E5%BD%95%E3%80%82" tabindex="-1">事务从 <code>begin</code> 开始时，<code>redo log</code> 就开始记录，而不是等到 <code>commit</code> 时才记录。 <a class="header-anchor" href="#事务从 begin 开始时，redo log 就开始记录，而不是等到 commit 时才记录。" aria-label="Permalink to &quot;事务从 `begin` 开始时，`redo log` 就开始记录，而不是等到 `commit` 时才记录。&quot;">​</a></h3></li></ul></li></ol><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p></p><h3 id="%E5%BF%85%E9%A1%BB%E6%98%8E%E7%99%BD%20redo%20log%E7%9A%84%20%E5%85%B7%E4%BD%93%20%E4%BD%9C%E7%94%A8%20%20---%20%E4%BF%9D%E8%AF%81%E6%8C%81%E4%B9%85%E6%80%A7" tabindex="-1">必须明白 <strong>redo log的 具体 作用</strong> --- 保证持久性 <a class="header-anchor" href="#必须明白 redo log的 具体 作用  --- 保证持久性" aria-label="Permalink to &quot;必须明白 **redo log的 具体 作用**  --- 保证持久性&quot;">​</a></h3><h3 id="%E4%BB%80%E4%B9%88%E6%98%AF%20%E6%8C%81%E4%B9%85%E6%80%A7%3A%20%E5%8F%AA%E8%A6%81%E4%BA%8B%E5%8A%A1%20%E8%A2%ABcommit%2C%20%E4%B8%8D%E7%AE%A1%E6%98%AF%E6%96%AD%E7%94%B5%E8%BF%98%E6%98%AF%E5%B4%A9%E6%BA%83%2C%20%E9%87%8D%E5%90%AF%E5%90%8E%2C%20%E4%BB%8D%E8%83%BD%20%E6%81%A2%E5%A4%8D%20commit%E7%9A%84%20%E6%95%B0%E6%8D%AE%2C%20%E4%BF%9D%E8%AF%81%20%E6%95%B0%E6%8D%AE%20%E6%8C%81%E4%B9%85%E6%80%A7" tabindex="-1">什么是 持久性: 只要事务 被commit, 不管是断电还是崩溃, 重启后, 仍能 恢复 commit的 数据, 保证 数据 持久性 <a class="header-anchor" href="#什么是 持久性%3A 只要事务 被commit%2C 不管是断电还是崩溃%2C 重启后%2C 仍能 恢复 commit的 数据%2C 保证 数据 持久性" aria-label="Permalink to &quot;什么是 持久性: 只要事务 被commit, 不管是断电还是崩溃, 重启后, 仍能 恢复 commit的 数据, 保证 数据 持久性&quot;">​</a></h3></div></blockquote><hr><h2 id="redo%20log%20%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6" tabindex="-1"><code>redo log</code> 的工作机制 <a class="header-anchor" href="#redo log 的工作机制" aria-label="Permalink to &quot;`redo log` 的工作机制&quot;">​</a></h2><blockquote><ol><li><p><strong>写入流程</strong>：</p><ul><li>数据修改时，首先记录到 <code>redo log buffer</code>（内存中的日志缓冲区）。</li><li>当事务提交时，<code>redo log buffer</code> 的内容会被刷新到磁盘上的 <code>redo log</code> 文件中。</li><li>事务提交成功的标志是 <code>redo log</code> 写入磁盘并标记为 <code>commit</code> 状态。</li></ul></li><li><p><strong>与数据写入的关系</strong>：</p><ul><li>数据的修改首先发生在 <code>buffer pool</code>（内存中的数据缓存区）中，而<strong>不是直接写入磁盘</strong>。</li><li><code>redo log</code> 的写入优先于数据的写入，事务提交时<strong>只需确保 <code>redo log</code> 写入成功</strong>，而<strong>数据的写入可以延后</strong>。</li></ul></li><li><p><strong>异常恢复</strong>：</p><ul><li>如果在事务提交后发生异常（如掉电），<code>MySQL</code> 会通过 <code>redo log</code> 恢复数据到事务提交后的状态。</li><li>如果在事务回滚过程中发生异常，也可以通过 <code>redo log</code> 和 <code>undo log</code> 恢复到事务开始前的状态。</li></ul></li><li><h3 id="%E6%B3%A8%E6%84%8F%3A%20undo%20log%20%E4%B9%9F%E6%98%AF%20%E8%AE%B0%E5%BD%95%E5%9C%A8%20redo%20log%20%E4%B8%AD" tabindex="-1">注意: <code>undo log</code> 也是 记录在 <code>redo log</code> 中 <a class="header-anchor" href="#注意%3A undo log 也是 记录在 redo log 中" aria-label="Permalink to &quot;注意: `undo log` 也是 记录在 `redo log` 中&quot;">​</a></h3></li></ol></blockquote><hr><h2 id="undo%20log%E5%9C%A8redo%20log%20%E4%B8%AD" tabindex="-1"><code>undo log</code>在<code>redo log</code> 中 <a class="header-anchor" href="#undo log在redo log 中" aria-label="Permalink to &quot;`undo log`在`redo log` 中&quot;">​</a></h2><blockquote><p><code>undo log</code> 的确也会被记录在 <code>redo log</code> 中。这是因为：</p><ol><li><p><strong><code>undo log</code> 的持久性</strong>：</p><ul><li><code>undo log</code> 是用来支持事务回滚的，它记录了数据修改前的状态（逻辑日志）。</li><li><h3 id="%E4%B8%BA%E4%BA%86%E4%BF%9D%E8%AF%81%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%8E%9F%E5%AD%90%E6%80%A7%EF%BC%88Atomicity%EF%BC%89%EF%BC%8Cundo%20log%20%E6%9C%AC%E8%BA%AB%E4%B9%9F%E9%9C%80%E8%A6%81%E5%85%B7%E5%A4%87%E6%8C%81%E4%B9%85%E6%80%A7%E3%80%82" tabindex="-1">为了保证事务的原子性（Atomicity），<code>undo log</code> 本身也需要具备持久性。 <a class="header-anchor" href="#为了保证事务的原子性（Atomicity），undo log 本身也需要具备持久性。" aria-label="Permalink to &quot;为了保证事务的原子性（Atomicity），`undo log` 本身也需要具备持久性。&quot;">​</a></h3></li><li>因此，<code>undo log</code> 的内容会被记录到 <code>redo log</code> 中，以确保在系统崩溃后，<code>undo log</code> 也能被恢复。</li></ul></li><li><h3 id="%E5%9B%9E%E6%BB%9A%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%EF%BC%9A" tabindex="-1"><strong>回滚过程中的异常处理</strong>： <a class="header-anchor" href="#回滚过程中的异常处理：" aria-label="Permalink to &quot;**回滚过程中的异常处理**：&quot;">​</a></h3><ul><li>如果在<strong>事务回滚过程中发生异常（如掉电）</strong>，<code>redo log</code> 中的 <code>undo log</code> 记录可以用来继续完成未完成的回滚操作。</li><li>这进一步保证了事务的原子性（<strong>要么完全成功，要么完全失败</strong>）。</li></ul><blockquote><p>当回滚操作中途失败时，MySQL 通过以下机制确保回滚能够继续完成：</p><ol><li><code>undo log</code> 的链式结构，记录回滚的顺序。</li><li><code>redo log</code> 中的 <code>undo log</code> 记录，用于恢复 <code>undo log</code>。</li><li>回滚操作的幂等性，确保重复执行不会影响一致性。</li><li>崩溃恢复机制，自动完成未完成的回滚。</li><li><code>undo log</code> 的状态标记，明确回滚的进度。</li></ol></blockquote></li><li><p><strong>写入顺序</strong>：</p><ul><li>当事务执行时，<code>undo log</code> 会先记录到内存中（<code>undo log buffer</code>）。</li><li>随后，<code>redo log</code> 会记录 <code>undo log</code> 的内容，以确保其持久化。</li></ul></li></ol><hr><h3 id="%E6%80%BB%E7%BB%93-17" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结-17" aria-label="Permalink to &quot;**总结**&quot;">​</a></h3><p><code>undo log</code> 是事务回滚的关键，而 <code>redo log</code> 是事务持久性的保障。通过将 <code>undo log</code> 的内容记录到 <code>redo log</code> 中，MySQL 能够在崩溃恢复时同时保证事务的原子性和持久性。这种设计使得 MySQL 的事务机制更加健壮和可靠。</p></blockquote><h2 id="redo%20log%20%E7%9A%84%E7%89%B9%E7%82%B9" tabindex="-1"><code>redo log</code> 的特点 <a class="header-anchor" href="#redo log 的特点" aria-label="Permalink to &quot;`redo log` 的特点&quot;">​</a></h2><blockquote><ol><li><p><strong>物理日志</strong>：</p><ul><li>记录的是<strong>数据页</strong>的修改内容，而不是具体的 SQL 操作。</li><li>与 <code>undo log</code>（逻辑日志）不同，<code>undo log</code> 记录的是 SQL 操作对数据的影响。</li></ul></li><li><p><strong>性能优化</strong>：</p><ul><li>通过 <code>redo log buffer</code> 缓存日志，<strong>减少直接写磁盘的 I/O 操作</strong>，提高性能。</li><li>数据的写入由<strong>后台线程</strong>在合适的时机完成，而<strong>不是与事务提交同步</strong>。</li></ul></li></ol></blockquote><hr><h2 id="%E7%9B%B8%E5%85%B3%E5%A4%A7%E5%B0%8F" tabindex="-1">相关大小 <a class="header-anchor" href="#相关大小" aria-label="Permalink to &quot;相关大小&quot;">​</a></h2><ol><li><p><strong><code>innodb_log_buffer_size</code></strong>：</p><ul><li><p><code>redo log buffer</code> 的大小，默认值为 16MB。</p><p><code>show engine InnoDB status\\G</code></p><p><code>show variables like &#39;innodb_buffer_pool%;&#39;</code> --- 这个 不就是 前面 插入200w 速度慢 改了吗</p></li><li><p>如果事务较大，可以适当增大该值以减少磁盘 I/O。</p></li></ul></li><li><p><strong><code>innodb_buffer_pool_size</code></strong>：</p><ul><li>数据缓存区（<code>buffer pool</code>）的大小，默认值较大（如 134MB）。</li><li>用于缓存数据页和索引页，减少磁盘 I/O。</li></ul></li></ol><hr><h2 id="%E6%97%A5%E5%BF%97%E8%B7%AF%E5%BE%84" tabindex="-1">日志路径 <a class="header-anchor" href="#日志路径" aria-label="Permalink to &quot;日志路径&quot;">​</a></h2><blockquote><h3 id="1.%20redo%20log" tabindex="-1"><strong>1. <code>redo log</code></strong> <a class="header-anchor" href="#1. redo log" aria-label="Permalink to &quot;**1. `redo log`**&quot;">​</a></h3><ul><li><p><strong>文件位置</strong>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#innodb_redo</span></span></code></pre></div><ul><li>这是 MySQL 8.0 中 <code>redo log</code> 的存储文件。</li><li>从 MySQL 8.0 开始，<code>redo log</code> 默认存储在一个名为 <code>#innodb_redo</code> 的目录中，而不是像早期版本那样使用 <code>ib_logfile0</code> 和 <code>ib_logfile1</code>。</li></ul></li></ul><hr><h3 id="2.%20undo%20log" tabindex="-1"><strong>2. <code>undo log</code></strong> <a class="header-anchor" href="#2. undo log" aria-label="Permalink to &quot;**2. `undo log`**&quot;">​</a></h3><ul><li><strong>文件位置</strong>：<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>undo_001</span></span>\n<span class="line"><span>undo_002</span></span></code></pre></div><ul><li>这是 <code>undo log</code> 的独立表空间文件。</li><li>从 MySQL 8.0 开始，<code>undo log</code> 默认存储在独立的表空间中，而不是共享表空间（如 <code>ibdata1</code>）。</li></ul></li></ul><hr><h3 id="3.%20%E5%85%B6%E4%BB%96%E7%9B%B8%E5%85%B3%E6%96%87%E4%BB%B6" tabindex="-1"><strong>3. 其他相关文件</strong> <a class="header-anchor" href="#3. 其他相关文件" aria-label="Permalink to &quot;**3. 其他相关文件**&quot;">​</a></h3><ul><li><p><strong><code>ibdata1</code></strong>：</p><ul><li>这是 InnoDB 的系统表空间文件，存储了一些元数据和历史数据。</li><li>在 MySQL 8.0 中，<code>undo log</code> 已经从 <code>ibdata1</code> 中分离出来。</li></ul></li><li><p><strong><code>ibtmp1</code></strong>：</p><ul><li>临时表空间文件，用于存储临时表和临时数据。</li></ul></li><li><p><strong><code>binlog.*</code></strong>：</p><ul><li>二进制日志文件（<code>binlog</code>），用于记录所有对数据库的更改（如 <code>INSERT</code>、<code>UPDATE</code> 等），主要用于主从复制和数据恢复。</li></ul></li></ul><hr><h3 id="%E6%80%BB%E7%BB%93-18" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结-18" aria-label="Permalink to &quot;**总结**&quot;">​</a></h3><ul><li><strong><code>redo log</code> 文件</strong>：<code>#innodb_redo</code></li><li><strong><code>undo log</code> 文件</strong>：<code>undo_001</code> 和 <code>undo_002</code></li><li><strong>其他相关文件</strong>： <ul><li><code>ibdata1</code>：系统表空间文件</li><li><code>ibtmp1</code>：临时表空间文件</li><li><code>binlog.*</code>：二进制日志文件</li></ul></li></ul><p>这些文件通常位于 MySQL 的数据目录中，可以通过以下命令查看数据目录路径：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SHOW</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> VARIABLES</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> LIKE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;datadir&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></blockquote><h2 id="%E6%80%BB%E7%BB%93-19" tabindex="-1">总结 <a class="header-anchor" href="#总结-19" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li><strong><code>redo log</code> 的核心功能</strong>：保证事务的持久性。</li><li><h3 id="%E4%BA%8B%E5%8A%A1%E6%8F%90%E4%BA%A4%E7%9A%84%E5%85%B3%E9%94%AE%EF%BC%9A%E7%A1%AE%E4%BF%9D%20redo%20log%20%E5%86%99%E5%85%A5%E7%A3%81%E7%9B%98%E6%88%90%E5%8A%9F%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E7%AB%8B%E5%8D%B3%E5%B0%86%E6%95%B0%E6%8D%AE%E5%86%99%E5%85%A5%E7%A3%81%E7%9B%98%E3%80%82" tabindex="-1"><strong>事务提交的关键</strong>：确保 <code>redo log</code> 写入磁盘成功，而不是立即将数据写入磁盘。 <a class="header-anchor" href="#事务提交的关键：确保 redo log 写入磁盘成功，而不是立即将数据写入磁盘。" aria-label="Permalink to &quot;**事务提交的关键**：确保 `redo log` 写入磁盘成功，而不是立即将数据写入磁盘。&quot;">​</a></h3></li><li><strong>异常恢复</strong>：通过 <code>redo log</code> 恢复事务提交后的数据状态。</li></ul><h2 id="redo%20log%E6%95%B0%E6%8D%AE%E6%98%AF%E4%BB%80%E4%B9%88%E5%BD%A2%E5%BC%8F%E5%91%A2%3F" tabindex="-1">redo log数据是什么形式呢? <a class="header-anchor" href="#redo log数据是什么形式呢%3F" aria-label="Permalink to &quot;redo log数据是什么形式呢?&quot;">​</a></h2><p>自行了解, 可以看源码</p><h1 id="25-05-15" tabindex="-1">25-05-15 <a class="header-anchor" href="#25-05-15" aria-label="Permalink to &quot;25-05-15&quot;">​</a></h1><h1 id="mysql%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98" tabindex="-1">mysql优化问题 <a class="header-anchor" href="#mysql优化问题" aria-label="Permalink to &quot;mysql优化问题&quot;">​</a></h1><h2 id="SQL%E8%AF%AD%E5%8F%A5%E5%92%8C%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BC%98%E5%8C%96" tabindex="-1">SQL语句和索引的优化 <a class="header-anchor" href="#SQL语句和索引的优化" aria-label="Permalink to &quot;SQL语句和索引的优化&quot;">​</a></h2><ul><li><strong>慢查询日志</strong>： <ul><li>开启慢查询日志（<code>slow query log</code>），设置合理的慢查询时间。</li><li>分析慢查询日志，定位性能瓶颈。</li></ul></li><li><strong>执行计划分析</strong>： <ul><li>使用 <code>EXPLAIN</code> 分析 SQL 执行计划，优化查询。</li></ul></li><li><strong>常见优化措施</strong>： <ul><li>使用<strong>分页减少</strong>数据量。</li><li>确保索引的正确使用（如<strong>多列索引需用到第一列</strong>）。</li><li>优化多表查询，<strong>避免子查询</strong>,会有中间表，使用连接（如左连接、右连接）。</li><li><strong>避免产生中间表</strong>，合理设计索引。</li></ul></li></ul><hr><h2 id="%E5%BA%94%E7%94%A8%E5%B1%82%E7%9A%84%E4%BC%98%E5%8C%96" tabindex="-1">应用层的优化 <a class="header-anchor" href="#应用层的优化" aria-label="Permalink to &quot;应用层的优化&quot;">​</a></h2><ul><li><p><strong>连接池</strong>： -- 老师教了</p><ul><li>引入<strong>数据库连接池</strong>，减少频繁建立和断开连接的开销。</li><li>配置连接池参数（如最大连接数、初始连接数、超时时间）。</li></ul></li><li><p><strong>缓存</strong>：</p><ul><li><p>使用 <strong>Redis 等缓存中间件</strong>存储<strong>热点数据</strong>，<strong>减少对 MySQL 的直接访问</strong>。</p></li><li><p>缓存访问流程：</p><ol><li>先查询缓存（如 Redis）。</li><li>如果缓存命中，直接返回结果。</li><li>如果缓存未命中，查询 MySQL，将结果写入缓存，再返回给用户。</li></ol></li><li><h3 id="%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%9A%20%20%E7%BC%93%E5%AD%98%20%E4%BC%9A%E5%BC%95%E5%87%BA%20%E8%BF%99%E4%BA%9B%E9%97%AE%E9%A2%98" tabindex="-1"><strong>注意事项</strong>： 缓存 会引出 这些问题 <a class="header-anchor" href="#注意事项：  缓存 会引出 这些问题" aria-label="Permalink to &quot;**注意事项**：  缓存 会引出 这些问题&quot;">​</a></h3><blockquote><h3 id="%E4%B8%8D%E6%87%82..." tabindex="-1">不懂... <a class="header-anchor" href="#不懂..." aria-label="Permalink to &quot;不懂...&quot;">​</a></h3><ul><li>解决缓存一致性问题。</li><li>防止缓存穿透、缓存雪崩等问题。</li></ul></blockquote></li><li><h3 id="Redis%20%E7%9A%84%E5%85%B6%E4%BB%96%E5%8A%9F%E8%83%BD%EF%BC%9A" tabindex="-1">Redis 的其他功能： <a class="header-anchor" href="#Redis 的其他功能：" aria-label="Permalink to &quot;Redis 的其他功能：&quot;">​</a></h3><ul><li>发布订阅。</li><li>事务处理。</li><li>内建数据结构（如哈希、跳跃表、布隆过滤器）。</li></ul></li></ul></li></ul><hr><h2 id="MySQL%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%82%E6%95%B0%E7%9A%84%E4%BC%98%E5%8C%96" tabindex="-1">MySQL服务器参数的优化 <a class="header-anchor" href="#MySQL服务器参数的优化" aria-label="Permalink to &quot;MySQL服务器参数的优化&quot;">​</a></h2><ul><li><strong>常见参数调整</strong>： <ul><li><strong>自适应哈希索引</strong>： <ul><li>使用 <code>SHOW ENGINE INNODB STATUS</code> 查看自适应哈希索引的使用情况。</li><li>如果使用率低，可关闭自适应哈希索引。</li></ul></li><li><strong>重做日志缓冲区</strong>： <ul><li>调整 <code>innodb_log_buffer_size</code>，减少磁盘 I/O。</li></ul></li><li><strong>缓冲池大小</strong>： <ul><li>调整 <code>innodb_buffer_pool_size</code>，提高内存利用率。</li></ul></li></ul></li><li><strong>根据硬件配置优化</strong>： <ul><li>根据服务器性能（如内存、CPU）合理调整参数，提升并发处理能力。</li></ul></li></ul><hr><h2 id="%E6%80%BB%E7%BB%93-20" tabindex="-1">总结 <a class="header-anchor" href="#总结-20" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>优化不仅限于 MySQL 本身，还包括 SQL 语句、索引设计、应用层优化和服务器参数调整。</li><li>面试中回答优化问题时，可结合实际项目经验，重点阐述熟悉的优化点。</li><li>对于 Redis 等中间件，需了解其常见问题及解决方案，以便深入讨论。</li><li></li></ul><h1 id="mysql%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98%E8%A1%A5%E5%85%85" tabindex="-1">mysql优化问题补充 <a class="header-anchor" href="#mysql优化问题补充" aria-label="Permalink to &quot;mysql优化问题补充&quot;">​</a></h1><h2 id="MySQL%20Server%20%E4%BC%98%E5%8C%96%E5%8F%82%E6%95%B0%E6%80%BB%E7%BB%93" tabindex="-1">MySQL Server 优化参数总结 <a class="header-anchor" href="#MySQL Server 优化参数总结" aria-label="Permalink to &quot;MySQL Server 优化参数总结&quot;">​</a></h2><p><img src="'+G+'" alt="image-20250516085209275"></p><p>在 MySQL Server 的优化中，主要通过调整配置文件（通常是 <code>/etc/my.cnf</code>）中的参数来提升性能。以下是一些常见的优化参数及其作用：</p><blockquote><h4 id="1.%20%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%EF%BC%88Query%20Cache%EF%BC%89" tabindex="-1">1. <strong>查询缓存（Query Cache）</strong> <a class="header-anchor" href="#1. 查询缓存（Query Cache）" aria-label="Permalink to &quot;1. **查询缓存（Query Cache）**&quot;">​</a></h4><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show variables </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;%query_cache%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%E5%9C%A8%20MySQL%208.0%20%E4%B8%AD%E5%B7%B2%E8%A2%AB%E7%A7%BB%E9%99%A4" tabindex="-1">查询缓存<strong>在 MySQL 8.0 中已被移除</strong> <a class="header-anchor" href="#查询缓存在 MySQL 8.0 中已被移除" aria-label="Permalink to &quot;查询缓存**在 MySQL 8.0 中已被移除**&quot;">​</a></h3><ul><li><p><strong>作用</strong>：</p><ul><li>缓存 <code>SELECT</code> 查询的结果，减少重复查询的开销。</li></ul></li><li><h3 id="%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9A" tabindex="-1"><strong>适用场景</strong>： <a class="header-anchor" href="#适用场景：" aria-label="Permalink to &quot;**适用场景**：&quot;">​</a></h3><ul><li>适合查询频繁但更新较少的表。</li></ul></li><li><h3 id="%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%9A" tabindex="-1"><strong>注意事项</strong>： <a class="header-anchor" href="#注意事项：" aria-label="Permalink to &quot;**注意事项**：&quot;">​</a></h3><ul><li>更新操作（<code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>）会清空查询缓存。</li><li>查询缓存过多的添加和删除可能影响性能。</li></ul><h3 id="%E5%9F%BA%E4%BA%8E%E8%BF%99%E4%BA%9B%E7%BC%BA%E7%82%B9%2C%208.0%20%E7%89%88%E6%9C%AC%20%E7%A7%BB%E9%99%A4%E4%BA%86%20%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98" tabindex="-1">基于这些缺点, 8.0 版本 移除了 查询缓存 <a class="header-anchor" href="#基于这些缺点%2C 8.0 版本 移除了 查询缓存" aria-label="Permalink to &quot;基于这些缺点, 8.0 版本 移除了 查询缓存&quot;">​</a></h3></li><li><p><strong>相关参数</strong>：</p><ul><li><code>query_cache_size</code>：查询缓存的大小。</li><li><code>query_cache_type</code>：是否开启查询缓存。</li></ul></li><li><p><strong>优化建议</strong>：</p><ul><li>如果查询多、更新少，可以开启查询缓存并适当增大缓存大小。</li><li>对于更新频繁的场景，不建议使用查询缓存。</li></ul></li></ul><hr><h4 id="2.%20%E7%B4%A2%E5%BC%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BC%93%E5%AD%98" tabindex="-1">2. <strong>索引和数据缓存</strong> <a class="header-anchor" href="#2. 索引和数据缓存" aria-label="Permalink to &quot;2. **索引和数据缓存**&quot;">​</a></h4><ul><li><strong>参数</strong>： <ul><li><code>innodb_buffer_pool_size</code>：InnoDB 缓冲池大小，用于缓存索引和数据。</li><li><strong>作用</strong>： <ul><li>减少磁盘 I/O，提高查询性能。</li></ul></li><li><strong>优化建议</strong>： <ul><li>根据服务器内存大小合理设置，通常设置为物理内存的 50%-80%。</li></ul></li></ul></li></ul><hr><h4 id="3.%20%E7%BA%BF%E7%A8%8B%E7%BC%93%E5%AD%98%EF%BC%88Thread%20Cache%EF%BC%89" tabindex="-1">3. <strong>线程缓存（Thread Cache）</strong> <a class="header-anchor" href="#3. 线程缓存（Thread Cache）" aria-label="Permalink to &quot;3. **线程缓存（Thread Cache）**&quot;">​</a></h4><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> show variables </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;%thread_cache%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li><strong>作用</strong>： <ul><li>缓存线程，减少频繁创建和销毁线程的开销。</li></ul></li><li><strong>相关参数</strong>： <ul><li><code>thread_cache_size</code>：线程缓存的数量。</li></ul></li><li><strong>优化建议</strong>： <ul><li>根据服务器性能（如 CPU 核心数）调整线程缓存大小，提高并发处理能力。</li></ul></li></ul><hr><h4 id="4.%20%E5%B9%B6%E5%8F%91%E8%BF%9E%E6%8E%A5%E5%92%8C%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4" tabindex="-1">4. <strong>并发连接和超时时间</strong> <a class="header-anchor" href="#4. 并发连接和超时时间" aria-label="Permalink to &quot;4. **并发连接和超时时间**&quot;">​</a></h4><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> show variables </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;%connect%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li><p><strong>参数</strong>：</p><ul><li><p><code>max_connections</code>：最大并发连接数。 默认 151 压测 时, 容易出现瓶颈, 需要修改</p><p>配置文件 添加 <code>max_connections=2000;</code></p></li><li><p><code>wait_timeout</code>：连接的超时时间（单位：秒）。</p><p>配置文件 添加 <code>wait_timeout=60;</code></p></li></ul></li><li><p><strong>作用</strong>：</p><ul><li>控制 MySQL Server 的最大连接数和空闲连接的超时时间。</li></ul></li><li><p><strong>优化建议</strong>：</p><ul><li>根据业务需求和服务器性能调整 <code>max_connections</code>。</li><li>设置合理的 <code>wait_timeout</code>，避免长时间空闲连接占用资源。</li></ul></li></ul><hr><h4 id="5.%20%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%97%A5%E5%BF%97%EF%BC%88Binary%20Log%EF%BC%89" tabindex="-1">5. <strong>二进制日志（Binary Log）</strong> <a class="header-anchor" href="#5. 二进制日志（Binary Log）" aria-label="Permalink to &quot;5. **二进制日志（Binary Log）**&quot;">​</a></h4><ul><li><strong>参数</strong>： <ul><li><code>log_bin</code>：是否开启二进制日志。</li></ul></li><li><strong>作用</strong>： <ul><li>用于数据恢复和主从复制。</li></ul></li><li><strong>优化建议</strong>： <ul><li>在需要主从复制或数据恢复的场景下开启。</li></ul></li></ul><hr><h4 id="6.%20%E5%85%B6%E4%BB%96%E4%BC%98%E5%8C%96%E5%8F%82%E6%95%B0" tabindex="-1">6. <strong>其他优化参数</strong> <a class="header-anchor" href="#6. 其他优化参数" aria-label="Permalink to &quot;6. **其他优化参数**&quot;">​</a></h4><ul><li><strong>自适应哈希索引</strong>： <ul><li>参数：<code>innodb_adaptive_hash_index</code>。</li><li>作用：提高查询性能。</li><li>优化建议：如果使用率低，可以关闭以减少性能开销。</li></ul></li><li><strong>重做日志缓冲区</strong>： <ul><li>参数：<code>innodb_log_buffer_size</code>。</li><li>作用：减少磁盘 I/O。</li><li>优化建议：根据写入频率调整缓冲区大小。</li></ul></li></ul></blockquote><hr><h2 id="%E6%80%BB%E7%BB%93-21" tabindex="-1">总结 <a class="header-anchor" href="#总结-21" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li><strong>优化思路</strong>： <ul><li>根据业务场景和服务器性能调整参数。</li><li>查询多、更新少时，可开启查询缓存。</li><li>合理设置线程缓存、并发连接数和超时时间。</li><li>充分利用内存，调整缓冲池大小。</li></ul></li><li><strong>学习建议</strong>： <ul><li>阅读 MySQL 官方文档，了解更多参数。</li><li>多实践，通过压测验证优化效果。</li></ul></li></ul><h1 id="mysql%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F" tabindex="-1">mysql日志系统 <a class="header-anchor" href="#mysql日志系统" aria-label="Permalink to &quot;mysql日志系统&quot;">​</a></h1><p><img src="'+Y+`" alt="image-20250516101217182"></p><h2 id="%E4%BA%8B%E5%8A%A1%E6%97%A5%E5%BF%97" tabindex="-1">事务日志 <a class="header-anchor" href="#事务日志" aria-label="Permalink to &quot;事务日志&quot;">​</a></h2><blockquote><h3 id="%E4%BA%A7%E7%94%9F%E4%BA%8E%20%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%B1%82" tabindex="-1">产生于 存储引擎层 <a class="header-anchor" href="#产生于 存储引擎层" aria-label="Permalink to &quot;产生于 存储引擎层&quot;">​</a></h3></blockquote><ul><li><strong>Redo Log（重做日志）</strong>： <ul><li>用于恢复已提交事务的数据。</li><li>由 InnoDB 存储引擎生成。</li></ul></li><li><strong>Undo Log（回滚日志）</strong>： <ul><li>用于事务回滚，保证事务的原子性。</li><li>由 InnoDB 存储引擎生成。</li></ul></li></ul><h2 id="MySQL%20Server%20%E5%B1%82%E6%97%A5%E5%BF%97" tabindex="-1">MySQL Server 层日志 <a class="header-anchor" href="#MySQL Server 层日志" aria-label="Permalink to &quot;MySQL Server 层日志&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show variables </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;log_%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>MySQL Server 层的日志与存储引擎无关，适用于所有存储引擎。主要包括以下四种：</p><blockquote><h5 id="%EF%BC%881%EF%BC%89%E9%94%99%E8%AF%AF%E6%97%A5%E5%BF%97%EF%BC%88Error%20Log%EF%BC%89" tabindex="-1">（1）<strong>错误日志（Error Log）</strong> <a class="header-anchor" href="#（1）错误日志（Error Log）" aria-label="Permalink to &quot;（1）**错误日志（Error Log）**&quot;">​</a></h5><ul><li><p><strong>作用</strong>：</p><ul><li>记录 MySQL Server 启动、运行和停止过程中发生的错误和警告。</li><li>用于排查服务启动失败或运行异常的问题。</li></ul></li><li><p><strong>存储位置</strong>：</p><ul><li>默认路径：<code>/var/log/mysql/error.log</code>。 8.0</li><li>可通过 <code>log_error</code> 参数自定义路径。</li></ul></li><li><p><strong>配置示例</strong>：</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[mysqld]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">log_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=/var/log/mysql/error.log</span></span></code></pre></div></li></ul><hr><h5 id="%EF%BC%882%EF%BC%89%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97%EF%BC%88General%20Query%20Log%EF%BC%89" tabindex="-1">（2）<strong>查询日志（General Query Log）</strong> <a class="header-anchor" href="#（2）查询日志（General Query Log）" aria-label="Permalink to &quot;（2）**查询日志（General Query Log）**&quot;">​</a></h5><ul><li><strong>作用</strong>： <ul><li>记录所有客户端发送的 SQL 语句（包括增删改查）。</li></ul></li><li><strong>注意事项</strong>： <ul><li>查询日志会记录大量信息，开启后可能影响性能。</li><li>通常仅在调试时开启。</li></ul></li><li><strong>配置示例</strong>：<div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[mysqld]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">general_log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=ON</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">general_log_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=/var/lib/mysql/&lt;主机&gt;.log</span></span></code></pre></div></li></ul><hr><h5 id="%EF%BC%883%EF%BC%89%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97%EF%BC%88Slow%20Query%20Log%EF%BC%89" tabindex="-1">（3）<strong>慢查询日志（Slow Query Log）</strong> <a class="header-anchor" href="#（3）慢查询日志（Slow Query Log）" aria-label="Permalink to &quot;（3）**慢查询日志（Slow Query Log）**&quot;">​</a></h5><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show variables </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;%slow_query%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li><strong>作用</strong>： <ul><li>记录执行时间超过指定阈值的 SQL 语句。</li><li>用于分析和优化慢查询。</li></ul></li><li><strong>相关参数</strong>： <ul><li><code>slow_query_log</code>：是否开启慢查询日志。</li><li><code>long_query_time</code>：慢查询的时间阈值（单位：秒）。</li></ul></li><li><strong>配置示例</strong>：<div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[mysqld]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">slow_query_log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=ON</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">slow_query_log_file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">= /var/lib/mysql/&lt;主机名&gt;-slow.log    默认</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">long_query_time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=2</span></span></code></pre></div></li><li><strong>分析工具</strong>： <ul><li>使用 <code>EXPLAIN</code> 分析慢查询语句的执行计划。</li></ul></li></ul><hr><h3 id="%EF%BC%884%EF%BC%89%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%97%A5%E5%BF%97%EF%BC%88Binary%20Log%EF%BC%89!!!" tabindex="-1">（4）<strong>二进制日志（Binary Log）</strong>!!! <a class="header-anchor" href="#（4）二进制日志（Binary Log）!!!" aria-label="Permalink to &quot;（4）**二进制日志（Binary Log）**!!!&quot;">​</a></h3><ul><li><p><strong>作用</strong>：</p><ul><li><p>记录所有对数据库进行更改的操作（如 <code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>）。</p></li><li><h3 id="%E4%B8%8D%E8%AE%B0%E5%BD%95%E6%9F%A5%E8%AF%A2%E6%93%8D%E4%BD%9C%EF%BC%88%E5%A6%82%20SELECT%EF%BC%89%E3%80%82" tabindex="-1">不记录查询操作（如 <code>SELECT</code>）。 <a class="header-anchor" href="#不记录查询操作（如 SELECT）。" aria-label="Permalink to &quot;不记录查询操作（如 \`SELECT\`）。&quot;">​</a></h3><p>和 查询日志 互补</p></li></ul></li><li><p><strong>主要用途</strong>：</p><ol><li><strong>数据恢复</strong>：通过重放二进制日志恢复数据。</li><li><strong>主从复制</strong>：主库将二进制日志同步到从库，实现数据同步。</li></ol></li><li><p><strong>相关参数</strong>：</p><ul><li><p><code>log_bin</code>：是否开启二进制日志。</p></li><li><h3 id="server_id%EF%BC%9AMySQL%20Server%20%E7%9A%84%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86%EF%BC%88%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E6%97%B6%E5%BF%85%E9%A1%BB%E9%85%8D%E7%BD%AE%EF%BC%89%E3%80%82" tabindex="-1"><code>server_id</code>：MySQL Server 的唯一标识（主从复制时必须配置）。 <a class="header-anchor" href="#server_id：MySQL Server 的唯一标识（主从复制时必须配置）。" aria-label="Permalink to &quot;\`server_id\`：MySQL Server 的唯一标识（主从复制时必须配置）。&quot;">​</a></h3><p>否则 开启不了 mysqld</p></li><li><p><code>expire_logs_days</code>：设置二进制日志的过期时间。</p></li></ul></li><li><p><strong>配置示例</strong>：</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[mysqld]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">log_bin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=/var/log/mysql_bin.log</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">expire_logs_days</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=7</span></span></code></pre></div></li><li><p><strong>注意事项</strong>：</p><ul><li><h3 id="%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E5%8F%AF%E8%83%BD%E5%8D%A0%E7%94%A8%E5%A4%A7%E9%87%8F%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%EF%BC%8C%E9%9C%80%E8%AE%BE%E7%BD%AE%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4%E6%B8%85%E7%90%86%E6%97%A7%E6%97%A5%E5%BF%97%E3%80%82" tabindex="-1">二进制日志文件可能<strong>占用大量磁盘空间</strong>，需设置过期时间清理旧日志。 <a class="header-anchor" href="#二进制日志文件可能占用大量磁盘空间，需设置过期时间清理旧日志。" aria-label="Permalink to &quot;二进制日志文件可能**占用大量磁盘空间**，需设置过期时间清理旧日志。&quot;">​</a></h3></li></ul></li></ul></blockquote><hr><h2 id="%E6%97%A5%E5%BF%97%E7%9A%84%E9%87%8D%E8%A6%81%E6%80%A7" tabindex="-1">日志的重要性 <a class="header-anchor" href="#日志的重要性" aria-label="Permalink to &quot;日志的重要性&quot;">​</a></h2><ul><li><strong>排查问题</strong>： <ul><li>错误日志是排查服务启动或运行异常的关键工具。</li></ul></li><li><strong>性能优化</strong>： <ul><li>慢查询日志帮助定位性能瓶颈。</li></ul></li><li><strong>数据安全</strong>： <ul><li>二进制日志用于数据恢复和主从复制，保障数据一致性。</li></ul></li></ul><hr><h2 id="%E6%97%A5%E5%BF%97%E7%9A%84%E6%8C%81%E4%B9%85%E5%8C%96%E9%85%8D%E7%BD%AE" tabindex="-1">日志的持久化配置 <a class="header-anchor" href="#日志的持久化配置" aria-label="Permalink to &quot;日志的持久化配置&quot;">​</a></h2><p><img src="`+W+'" alt="image-20250516090613918"></p><ul><li>在配置文件中添加日志相关参数。</li><li>修改配置后需重启 MySQL 服务以生效：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> service</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysqld</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span></span></code></pre></div></li></ul><h1 id="binlog" tabindex="-1">binlog <a class="header-anchor" href="#binlog" aria-label="Permalink to &quot;binlog&quot;">​</a></h1><h2 id="mysql%E8%87%AA%E5%B8%A6%E5%B7%A5%E5%85%B7--%E4%BA%86%E8%A7%A3%E5%8D%B3%E5%8F%AF%2C%E5%A4%AA%E5%A4%9A" tabindex="-1">mysql自带工具--了解即可,太多 <a class="header-anchor" href="#mysql自带工具--了解即可%2C太多" aria-label="Permalink to &quot;mysql自带工具--了解即可,太多&quot;">​</a></h2><blockquote><h3 id="1.%20mysql" tabindex="-1">1. <strong><code>mysql</code></strong> <a class="header-anchor" href="#1. mysql" aria-label="Permalink to &quot;1. **`mysql`**&quot;">​</a></h3><ul><li><strong>功能</strong>： <ul><li>MySQL 的命令行客户端，用于连接和操作 MySQL 数据库。</li></ul></li><li><strong>常用命令</strong>：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span></span></code></pre></div><ul><li>连接 MySQL 数据库。</li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SHOW DATABASES;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">USE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> database_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> table_name;</span></span></code></pre></div></li></ul><hr><h3 id="2.%20mysqldump" tabindex="-1">2. <strong><code>mysqldump</code></strong> <a class="header-anchor" href="#2. mysqldump" aria-label="Permalink to &quot;2. **`mysqldump`**&quot;">​</a></h3><ul><li><strong>功能</strong>： <ul><li>用于备份 MySQL 数据库或表。</li></ul></li><li><strong>常用命令</strong>： <ul><li>备份整个数据库：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysqldump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> database_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> backup.sql</span></span></code></pre></div></li><li>备份多个数据库：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysqldump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --databases</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> backup.sql</span></span></code></pre></div></li><li>备份所有数据库：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysqldump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all-databases</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> backup.sql</span></span></code></pre></div></li><li>恢复数据：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> database_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> backup.sql</span></span></code></pre></div></li></ul></li></ul><hr><h3 id="3.%20mysqlbinlog" tabindex="-1">3. <strong><code>mysqlbinlog</code></strong> <a class="header-anchor" href="#3. mysqlbinlog" aria-label="Permalink to &quot;3. **`mysqlbinlog`**&quot;">​</a></h3><ul><li><strong>功能</strong>： <ul><li>用于查看和操作二进制日志（Binary Log）。</li></ul></li><li><strong>常用命令</strong>： <ul><li>查看二进制日志内容：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysqlbinlog</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/binlog.000001</span></span></code></pre></div></li><li>恢复数据：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysqlbinlog</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/binlog.000001</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span></span></code></pre></div></li></ul></li></ul><hr><h3 id="4.%20mysqladmin" tabindex="-1">4. <strong><code>mysqladmin</code></strong> <a class="header-anchor" href="#4. mysqladmin" aria-label="Permalink to &quot;4. **`mysqladmin`**&quot;">​</a></h3><ul><li><strong>功能</strong>： <ul><li>用于管理 MySQL 服务器（如启动、关闭、监控等）。</li></ul></li><li><strong>常用命令</strong>： <ul><li>检查服务器状态：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysqladmin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span></span></code></pre></div></li><li>重启 MySQL 服务：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysqladmin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shutdown</span></span></code></pre></div></li></ul></li></ul><hr><h3 id="5.%20mysqlcheck" tabindex="-1">5. <strong><code>mysqlcheck</code></strong> <a class="header-anchor" href="#5. mysqlcheck" aria-label="Permalink to &quot;5. **`mysqlcheck`**&quot;">​</a></h3><ul><li><strong>功能</strong>： <ul><li>用于检查、修复和优化 MySQL 数据库表。</li></ul></li><li><strong>常用命令</strong>： <ul><li>检查表：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysqlcheck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> database_name</span></span></code></pre></div></li><li>修复表：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysqlcheck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --repair</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> database_name</span></span></code></pre></div></li><li>优化表：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysqlcheck</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --optimize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> database_name</span></span></code></pre></div></li></ul></li></ul><hr><h3 id="6.%20mysqld_safe" tabindex="-1">6. <strong><code>mysqld_safe</code></strong> <a class="header-anchor" href="#6. mysqld_safe" aria-label="Permalink to &quot;6. **`mysqld_safe`**&quot;">​</a></h3><ul><li><strong>功能</strong>： <ul><li>用于安全启动 MySQL 服务，通常用于调试或修复问题。</li></ul></li><li><strong>常用命令</strong>：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysqld_safe</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --user=mysql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span></span></code></pre></div></li></ul><hr><h3 id="7.%20mysqlimport" tabindex="-1">7. <strong><code>mysqlimport</code></strong> <a class="header-anchor" href="#7. mysqlimport" aria-label="Permalink to &quot;7. **`mysqlimport`**&quot;">​</a></h3><ul><li><strong>功能</strong>： <ul><li>用于从文本文件中导入数据到 MySQL 表。</li></ul></li><li><strong>常用命令</strong>：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysqlimport</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --local</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> database_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> table_name.txt</span></span></code></pre></div></li></ul><hr><h3 id="8.%20mysqlslap" tabindex="-1">8. <strong><code>mysqlslap</code></strong> <a class="header-anchor" href="#8. mysqlslap" aria-label="Permalink to &quot;8. **`mysqlslap`**&quot;">​</a></h3><ul><li><strong>功能</strong>： <ul><li>用于压力测试 MySQL 数据库。</li></ul></li><li><strong>常用命令</strong>：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysqlslap</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --concurrency=50</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --iterations=10</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --query=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;SELECT * FROM table_name&quot;</span></span></code></pre></div></li></ul><hr><h3 id="9.%20myisamchk" tabindex="-1">9. <strong><code>myisamchk</code></strong> <a class="header-anchor" href="#9. myisamchk" aria-label="Permalink to &quot;9. **`myisamchk`**&quot;">​</a></h3><ul><li><strong>功能</strong>： <ul><li>用于检查和修复 MyISAM 存储引擎的表。</li></ul></li><li><strong>常用命令</strong>： <ul><li>检查表：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">myisamchk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/table_name.MYI</span></span></code></pre></div></li><li>修复表：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">myisamchk</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --recover</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/table_name.MYI</span></span></code></pre></div></li></ul></li></ul><hr><h3 id="10.%20perror" tabindex="-1">10. <strong><code>perror</code></strong> <a class="header-anchor" href="#10. perror" aria-label="Permalink to &quot;10. **`perror`**&quot;">​</a></h3><ul><li><strong>功能</strong>： <ul><li>用于查看 MySQL 错误代码的含义。</li></ul></li><li><strong>常用命令</strong>：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">perror</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1045</span></span></code></pre></div></li></ul><hr><h3 id="11.%20innochecksum" tabindex="-1">11. <strong><code>innochecksum</code></strong> <a class="header-anchor" href="#11. innochecksum" aria-label="Permalink to &quot;11. **`innochecksum`**&quot;">​</a></h3><ul><li><strong>功能</strong>： <ul><li>用于检查 InnoDB 表空间文件的校验和。</li></ul></li><li><strong>常用命令</strong>：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">innochecksum</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/ibdata1</span></span></code></pre></div></li></ul><hr><h3 id="12.%20pt-query-digest%EF%BC%88Percona%20%E5%B7%A5%E5%85%B7%EF%BC%89" tabindex="-1">12. <strong><code>pt-query-digest</code></strong>（Percona 工具） <a class="header-anchor" href="#12. pt-query-digest（Percona 工具）" aria-label="Permalink to &quot;12. **`pt-query-digest`**（Percona 工具）&quot;">​</a></h3><ul><li><strong>功能</strong>： <ul><li>分析慢查询日志，优化 SQL 性能。</li></ul></li><li><strong>常用命令</strong>：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pt-query-digest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/slow_query.log</span></span></code></pre></div></li></ul><hr><h3 id="%E6%80%BB%E7%BB%93-22" tabindex="-1">总结 <a class="header-anchor" href="#总结-22" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>MySQL 自带的工具涵盖了数据库管理、备份恢复、日志分析、性能优化等多个方面。熟练使用这些工具可以大大提高数据库运维和管理的效率。</p></blockquote><h2 id="%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%97%A5%E5%BF%97%E7%9A%84%E4%BD%9C%E7%94%A8" tabindex="-1">二进制日志的作用 <a class="header-anchor" href="#二进制日志的作用" aria-label="Permalink to &quot;二进制日志的作用&quot;">​</a></h2><ul><li><p><strong>数据恢复</strong>：</p><ul><li>当数据库发生误操作（如删除数据或表）时，可以通过二进制日志恢复数据。</li><li>恢复的过程是通过重放日志中的操作来还原数据。</li></ul></li><li><p><strong>主从复制</strong>：</p><ul><li>主库将二进制日志同步到从库，从库通过重放日志实现数据同步。</li><li>二进制日志是主从复制的核心。</li></ul></li><li><p>默认路径 : <code>/var/log/mysql/binlog</code></p></li><li><h3 id="%E6%9F%A5%E7%9C%8B%20MySQL%20%E4%B8%BB%E5%BA%93%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E5%88%97%E8%A1%A8%E5%8F%8A%E5%85%B6%E5%A4%A7%E5%B0%8F" tabindex="-1">查看 MySQL 主库的二进制日志文件列表及其大小 <a class="header-anchor" href="#查看 MySQL 主库的二进制日志文件列表及其大小" aria-label="Permalink to &quot;查看 MySQL 主库的二进制日志文件列表及其大小&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">master</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logs;</span></span></code></pre></div></li></ul><h2 id="%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%97%A5%E5%BF%97%E7%9A%84%E9%85%8D%E7%BD%AE" tabindex="-1">二进制日志的配置 <a class="header-anchor" href="#二进制日志的配置" aria-label="Permalink to &quot;二进制日志的配置&quot;">​</a></h2><ul><li><p><strong>配置文件</strong>：<s><code>/etc/my.cnf</code></s></p></li><li><p><strong>常用参数</strong>：</p><div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">[mysqld]</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">log_bin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=/var/log/mysql_bin.log</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=1</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">expire_logs_days</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=7</span></span></code></pre></div><ul><li><code>log_bin</code>：开启二进制日志并指定日志文件路径。</li><li><code>server_id</code>：MySQL Server 的唯一标识（主从复制时必须配置）。</li><li><code>expire_logs_days</code>：设置日志的过期时间（单位：天）。</li></ul></li></ul><h2 id="%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%97%A5%E5%BF%97%E7%9A%84%E7%89%B9%E7%82%B9" tabindex="-1">二进制日志的特点 <a class="header-anchor" href="#二进制日志的特点" aria-label="Permalink to &quot;二进制日志的特点&quot;">​</a></h2><ul><li><strong>记录内容</strong>： <ul><li>记录所有对数据库的更改操作（如 <code>INSERT</code>、<code>UPDATE</code>、<code>DELETE</code>）。</li><li>不记录查询操作（如 <code>SELECT</code>）。</li></ul></li><li><strong>存储形式</strong>： <ul><li>二进制日志以编码形式存储，不能直接查看，需要使用工具解码。</li></ul></li><li><strong>日志文件</strong>： <ul><li><s>日志文件以 <code>.bin</code> 为后缀，存储在 MySQL 的数据目录中</s>。</li></ul></li></ul><h2 id="%E5%AE%9E%E8%B7%B5%E7%A4%BA%E4%BE%8B" tabindex="-1">实践示例 <a class="header-anchor" href="#实践示例" aria-label="Permalink to &quot;实践示例&quot;">​</a></h2><blockquote><p>1.刷新日志</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flush logs;</span></span></code></pre></div><p>2.user 为例,添加几个</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">master</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logs;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">insert into</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,age,sex) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;aaa&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">27</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;man&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">master</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logs;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">master</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 查看当前 二进制日志</span></span></code></pre></div><p>3.使用工具</p><p>不在mysql里, 进入 binlog目录</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysqlbinlog</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-defaults</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --database=test</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --base64-output=DECODE-ROWS</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --start-datetime=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2025-05-16 00:00:00&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --stop-datetime=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2025-05-16 12:00:00&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> binlog.000041</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> more</span></span></code></pre></div><p><img src="'+X+`" alt="image-20250516094742970"></p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysqlbinlog </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--no-defaults --database=test --base64-output=DECODE-ROWS -v --start-datetime=&#39;2025-05-16 00:00:00&#39; --stop-datetime=&quot;2025-05-16 12:00:00&quot; --start-position=371 --stop-position=471 binlog.000041 | more</span></span></code></pre></div></blockquote><h2 id="%E6%93%8D%E4%BD%9C%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%97%A5%E5%BF%97%E7%9A%84%E5%B7%A5%E5%85%B7" tabindex="-1">操作二进制日志的工具 <a class="header-anchor" href="#操作二进制日志的工具" aria-label="Permalink to &quot;操作二进制日志的工具&quot;">​</a></h2><ul><li><p><strong>工具名称</strong>：<code>mysqlbinlog</code></p></li><li><p><strong>作用</strong>：</p><ul><li>解码二进制日志，查看日志内容。</li><li>用于数据恢复或分析日志。</li></ul></li><li><p><strong>选项</strong></p><ul><li><p>通常用于忽略默认配置文件。 <strong><code>--no-defaults</code></strong></p></li><li><table tabindex="0"><thead><tr><th><code>--start-datetime</code></th><th>指定开始时间（格式：<code>YYYY-MM-DD HH:MM:SS</code>）。</th></tr></thead><tbody><tr><td><code>--stop-datetime</code></td><td>指定结束时间（格式：<code>YYYY-MM-DD HH:MM:SS</code>）。</td></tr><tr><td><code>--start-position</code></td><td>指定开始位置（日志文件中的字节位置）。 at ...</td></tr><tr><td><code>--stop-position</code></td><td>指定结束位置（日志文件中的字节位置）。</td></tr><tr><td><code>--database=database_name</code></td><td>仅显示指定数据库的更改。</td></tr><tr><td><code>--verbose</code> -v</td><td>显示详细信息，包括事件的注释和元数据。</td></tr><tr><td><code>--base64-output=DECODE-ROWS</code></td><td>解码基于行的事件，显示为可读的 SQL 语句。</td></tr><tr><td><code>--result-file=file_name</code></td><td>将输出保存到指定文件中。</td></tr></tbody></table></li></ul></li><li><p><strong>常用命令</strong>： -- 了解</p><ul><li><p>查看日志内容：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysqlbinlog</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/binlog.000001</span></span></code></pre></div></li><li><p>查看指定时间段的日志：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysqlbinlog</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --start-datetime=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2025-05-16 10:00:00&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --stop-datetime=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2025-05-16 12:00:00&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/binlog.000001</span></span></code></pre></div></li><li><p>查看指定位置的日志：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysqlbinlog</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --start-position=123</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --stop-position=456</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/binlog.000001</span></span></code></pre></div></li></ul></li></ul><h2 id="binlog%E5%A4%AA%E5%A4%9A" tabindex="-1">binlog太多 <a class="header-anchor" href="#binlog太多" aria-label="Permalink to &quot;binlog太多&quot;">​</a></h2><blockquote><h3 id="%E6%B8%85%E7%90%86%E6%97%A7%E7%9A%84%20binlog%20%E6%96%87%E4%BB%B6" tabindex="-1"><strong>清理旧的 binlog 文件</strong> <a class="header-anchor" href="#清理旧的 binlog 文件" aria-label="Permalink to &quot;**清理旧的 binlog 文件**&quot;">​</a></h3><h4 id="%EF%BC%881%EF%BC%89%E6%8C%89%E6%96%87%E4%BB%B6%E5%90%8D%E6%B8%85%E7%90%86" tabindex="-1">（1）<strong>按文件名清理</strong> <a class="header-anchor" href="#（1）按文件名清理" aria-label="Permalink to &quot;（1）**按文件名清理**&quot;">​</a></h4><p>清理到指定的 binlog 文件（不包括该文件）：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PURGE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BINARY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LOGS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;binlog.000020&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li>这将删除 <code>binlog.000001</code> 到 <code>binlog.000019</code> 的文件。</li></ul><h4 id="%EF%BC%882%EF%BC%89%E6%8C%89%E6%97%B6%E9%97%B4%E6%B8%85%E7%90%86" tabindex="-1">（2）<strong>按时间清理</strong> <a class="header-anchor" href="#（2）按时间清理" aria-label="Permalink to &quot;（2）**按时间清理**&quot;">​</a></h4><p>清理指定日期之前的 binlog 文件：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PURGE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BINARY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LOGS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BEFORE</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;2025-05-01 00:00:00&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><ul><li>这将删除指定日期之前的所有 binlog 文件。</li></ul></blockquote><h2 id="binlog%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4" tabindex="-1">binlog过期时间 <a class="header-anchor" href="#binlog过期时间" aria-label="Permalink to &quot;binlog过期时间&quot;">​</a></h2><p>配置文件修改</p><ul><li>对于 MySQL 8.0.3 以下版本，使用 <code>expire_logs_days = 5</code>。</li><li>对于 MySQL 8.0.3 及以上版本，使用 <code>binlog_expire_logs_seconds = 432000</code>。</li></ul><h2 id="%E6%95%B0%E6%8D%AE%E6%81%A2%E5%A4%8D" tabindex="-1">数据恢复 <a class="header-anchor" href="#数据恢复" aria-label="Permalink to &quot;数据恢复&quot;">​</a></h2><blockquote><ul><li><strong>恢复步骤</strong>： <ol><li>确定需要恢复的日志文件和范围（时间或位置）。</li><li>使用 <code>mysqlbinlog</code> 提取日志内容。</li><li>将日志内容通过管道或脚本重放到 MySQL 中。</li></ol></li><li><strong>注意事项</strong>： <ul><li>恢复前建议使用 <code>FLUSH LOGS</code> 刷新日志，避免混淆恢复过程中的新日志。</li><li>恢复时需明确起始和结束位置，避免重复操作。</li></ul></li></ul><h2 id="%E7%A4%BA%E4%BE%8B-6" tabindex="-1">示例 <a class="header-anchor" href="#示例-6" aria-label="Permalink to &quot;示例&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> database</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mytest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mytest;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> table</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myuser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">insert into</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myuser(id,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;aaa&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bbb&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ccc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myuser;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">drop</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> database</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mytest;</span></span></code></pre></div><h2 id="%E6%81%A2%E5%A4%8D" tabindex="-1">恢复 <a class="header-anchor" href="#恢复" aria-label="Permalink to &quot;恢复&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mysqlbinlog </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--no-defaults --base64-output=DECODE-ROWS -v --start-datetime=&#39;2025-05-16 00:00:00&#39; --stop-datetime=&quot;2025-05-16 12:00:00&quot;  binlog.0000.. | more</span></span></code></pre></div><p><img src="`+V+'" alt="image-20250516113624122"></p><p><img src="'+K+'" alt="image-20250516113642551"></p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysqlbinlog </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--start-position=234 --stop-position=947 binlog... | mysql -u root -p</span></span></code></pre></div><h3 id="%E5%86%8D%E6%AC%A1%E5%9B%9E%E7%9C%8B%2C%20%20%E5%8D%B3%E6%81%A2%E5%A4%8D" tabindex="-1">再次回看, 即恢复 <a class="header-anchor" href="#再次回看%2C  即恢复" aria-label="Permalink to &quot;再次回看,  即恢复&quot;">​</a></h3></blockquote><h2 id="%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D%E7%9A%84%E7%BB%93%E5%90%88" tabindex="-1">数据备份与恢复的结合 <a class="header-anchor" href="#数据备份与恢复的结合" aria-label="Permalink to &quot;数据备份与恢复的结合&quot;">​</a></h2><blockquote><p>双重 保险</p><p>binlog 有效时期内的, 使用 binlog恢复</p><p>否则使用 mysql 备份恢复</p></blockquote><ul><li><p><strong>备份策略</strong>：</p><ul><li><p>定期对数据库进行全量备份（如每天或每周）。</p><h3 id="--%20%20%E6%A0%B9%E6%8D%AE%20binlog%20%E7%9A%84%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4%2C%20%E8%BF%9B%E8%A1%8C%E5%A4%87%E4%BB%BD" tabindex="-1">-- 根据 binlog 的过期时间, 进行备份 <a class="header-anchor" href="#--  根据 binlog 的过期时间%2C 进行备份" aria-label="Permalink to &quot;--  根据 binlog 的过期时间, 进行备份&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql source ...</span></span></code></pre></div></li><li><p>配合二进制日志实现增量恢复。</p></li></ul></li><li><p><strong>恢复流程</strong>：</p><ol><li>从备份文件恢复全量数据。</li><li>使用二进制日志恢复备份后到数据丢失之间的增量数据。</li></ol></li></ul><hr><h2 id="%E6%80%BB%E7%BB%93-23" tabindex="-1">总结 <a class="header-anchor" href="#总结-23" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li><strong>二进制日志</strong>是 <strong>MySQL 数据恢复和主从复制</strong>的核心工具。</li><li>通过 <code>mysqlbinlog</code> 工具可以解码日志内容并进行数据恢复。</li><li>数据恢复需要结合全量备份和二进制日志，确保数据完整性。</li><li>实践操作是掌握二进制日志的关键，建议多动手实验。</li></ul><p><img src="'+J+`" alt="image-20250516114422807"></p><h1 id="mysqldump%E5%A4%87%E4%BB%BD" tabindex="-1">mysqldump备份 <a class="header-anchor" href="#mysqldump备份" aria-label="Permalink to &quot;mysqldump备份&quot;">​</a></h1><h2 id="dump%E5%A4%87%E4%BB%BD%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4" tabindex="-1">dump备份常用命令 <a class="header-anchor" href="#dump备份常用命令" aria-label="Permalink to &quot;dump备份常用命令&quot;">​</a></h2><blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysqldump</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Usage: mysqldump [OPTIONS] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">database</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [tables]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">OR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     mysqldump [OPTIONS] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--databases [OPTIONS] DB1 [DB2 DB3...]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">OR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     mysqldump [OPTIONS] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--all-databases [OPTIONS]</span></span></code></pre></div><h5 id="%E5%A4%87%E4%BB%BD%E5%91%BD%E4%BB%A4" tabindex="-1"><strong>备份命令</strong> <a class="header-anchor" href="#备份命令" aria-label="Permalink to &quot;**备份命令**&quot;">​</a></h5><ul><li><p><strong>备份单个表</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysqldump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> database_name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> table_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/backup.sql</span></span></code></pre></div><h3 id="%E7%A4%BA%E4%BE%8B%EF%BC%9A-1" tabindex="-1">示例： <a class="header-anchor" href="#示例：-1" aria-label="Permalink to &quot;示例：&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysqldump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mytest</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/user.sql</span></span></code></pre></div></li><li><p><strong>备份单个数据库</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysqldump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> database_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/backup.sql</span></span></code></pre></div></li><li><p><strong>备份多个数据库</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysqldump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --databases</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/backup.sql</span></span></code></pre></div></li><li><p><strong>备份所有数据库</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysqldump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --all-databases</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/backup.sql</span></span></code></pre></div></li></ul><h2 id="vim%20%E5%8F%AF%E6%9F%A5%E7%9C%8B" tabindex="-1">vim 可查看 <a class="header-anchor" href="#vim 可查看" aria-label="Permalink to &quot;vim 可查看&quot;">​</a></h2></blockquote><h2 id="%E6%81%A2%E5%A4%8D%E5%91%BD%E4%BB%A4" tabindex="-1">恢复命令 <a class="header-anchor" href="#恢复命令" aria-label="Permalink to &quot;恢复命令&quot;">​</a></h2><blockquote><ul><li>使用 <code>source</code> 命令恢复：<div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---mysqld</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">source </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/path/to/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">backup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li><li>或直接在 Linux Shell 中恢复：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> database_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/backup.sql</span></span></code></pre></div></li></ul><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p></p><p>要注意, 如果时单张表, 需要选中 数据库 再source</p></div></blockquote><h2 id="%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE%E4%B8%BA%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6--%E4%B8%8D%E4%BD%BF%E7%94%A8mysqldump" tabindex="-1">导出数据为文本文件--不使用mysqldump <a class="header-anchor" href="#导出数据为文本文件--不使用mysqldump" aria-label="Permalink to &quot;导出数据为文本文件--不使用mysqldump&quot;">​</a></h2><p>使用 <code>mysql</code> 命令直接导出表数据到文本文件。</p><blockquote><h5 id="%E5%AF%BC%E5%87%BA%E5%91%BD%E4%BB%A4" tabindex="-1"><strong>导出命令</strong> <a class="header-anchor" href="#导出命令" aria-label="Permalink to &quot;**导出命令**&quot;">​</a></h5><ul><li><h3 id="%E5%AF%BC%E5%87%BA%E8%A1%A8%E7%9A%84%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE%EF%BC%9A" tabindex="-1">导出表的所有数据： <a class="header-anchor" href="#导出表的所有数据：" aria-label="Permalink to &quot;导出表的所有数据：&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> database_name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;SELECT * FROM table_name&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/output.txt</span></span></code></pre></div><p>示例：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mytest</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;SELECT * FROM myuser&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/myuser.txt</span></span></code></pre></div></li><li><h3 id="%E5%AF%BC%E5%87%BA%E7%AC%A6%E5%90%88%E6%9D%A1%E4%BB%B6%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%9A" tabindex="-1">导出符合条件的数据： <a class="header-anchor" href="#导出符合条件的数据：" aria-label="Permalink to &quot;导出符合条件的数据：&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> database_name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;SELECT * FROM table_name WHERE age &gt; 18&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/output.txt</span></span></code></pre></div></li></ul><h5 id="%E5%AF%BC%E5%87%BA%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%95%B0%E6%8D%AE" tabindex="-1"><strong>导出格式化数据</strong> <a class="header-anchor" href="#导出格式化数据" aria-label="Permalink to &quot;**导出格式化数据**&quot;">​</a></h5><ul><li>使用制表符（Tab）分隔字段： <code> --batch --silent</code><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> database_name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;SELECT * FROM table_name&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --batch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --silent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/output.txt</span></span></code></pre></div></li></ul></blockquote><h2 id="%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB-%E8%A1%A5%E5%85%85" tabindex="-1">数据迁移-补充 <a class="header-anchor" href="#数据迁移-补充" aria-label="Permalink to &quot;数据迁移-补充&quot;">​</a></h2><p>通过 <code>mysqldump</code> 导出的 SQL 脚本文件可以用于数据迁移。</p><blockquote><h5 id="%E6%AD%A5%E9%AA%A4" tabindex="-1"><strong>步骤</strong> <a class="header-anchor" href="#步骤" aria-label="Permalink to &quot;**步骤**&quot;">​</a></h5><ol><li><p><strong>在源数据库中导出数据</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysqldump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> database_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/backup.sql</span></span></code></pre></div></li><li><p><strong>在目标数据库中导入数据</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mysql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> root</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> database_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/backup.sql</span></span></code></pre></div></li></ol></blockquote><h2 id="%E6%80%BB%E7%BB%93-24" tabindex="-1">总结 <a class="header-anchor" href="#总结-24" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li><p><strong><code>mysqldump</code></strong> 是<strong>备份和迁移数据</strong>的主要工具，支持单表、单库、多库和全库的备份。</p><h3 id="%E5%A4%87%E4%BB%BD%E5%92%8C%E8%BF%81%E7%A7%BB%20%E9%83%BD%E6%98%AF%E7%94%A8%20.sql%2C%20%E5%85%B6%E5%AE%9E%20%E5%91%BD%E4%BB%A4%E9%83%BD%E4%B8%80%E6%A0%B7" tabindex="-1">备份和迁移 都是用 .sql, 其实 命令都一样 <a class="header-anchor" href="#备份和迁移 都是用 .sql%2C 其实 命令都一样" aria-label="Permalink to &quot;备份和迁移 都是用 .sql, 其实 命令都一样&quot;">​</a></h3></li><li><p><strong><code>mysql</code></strong> 命令可以直接<strong>导出表数据到文本文件</strong>，便于数据分析或处理。</p></li><li><p>通过 <code>source</code> 或直接在 Shell 中执行 SQL 脚本，可以快速恢复或迁移数据。</p></li><li><p>建议多实践这些命令，熟悉其用法，因为它们在实际开发和运维中使用频率非常高。</p></li></ul><h1 id="%E4%B8%80%E6%AC%A1sql%E7%9A%84%E5%AE%8C%E6%95%B4%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B" tabindex="-1">一次sql的完整处理流程 <a class="header-anchor" href="#一次sql的完整处理流程" aria-label="Permalink to &quot;一次sql的完整处理流程&quot;">​</a></h1><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><p>尽量 那个简单图, 能自己画,自己讲出来</p></div><p>当客户端发送一条 SQL 请求到 MySQL Server 时，SQL 会经过以下模块进行处理：</p><p><img src="`+z+'" alt="image-20250516121518231"></p><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><p>存储引擎那里 有点 oop 的感觉</p></div><h2 id="%E6%A8%A1%E5%9D%97" tabindex="-1">模块 <a class="header-anchor" href="#模块" aria-label="Permalink to &quot;模块&quot;">​</a></h2><blockquote><h4 id="1.%20%E8%BF%9E%E6%8E%A5%E5%99%A8%EF%BC%88Connector%EF%BC%89" tabindex="-1">1. <strong>连接器（Connector）</strong> <a class="header-anchor" href="#1. 连接器（Connector）" aria-label="Permalink to &quot;1. **连接器（Connector）**&quot;">​</a></h4><ul><li><strong>功能</strong>： <ul><li>负责客户端与 MySQL Server 的连接管理。</li><li>验证客户端的合法性（账号、密码、权限等）。</li><li>控制最大连接数（<code>max_connections</code>）和超时断开（<code>wait_timeout</code>）。</li></ul></li><li><strong>特点</strong>： <ul><li>如果查询缓存命中，直接返回结果，无需进入后续模块。</li></ul></li></ul><hr><h4 id="2.%20%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%EF%BC%88Query%20Cache%EF%BC%89" tabindex="-1">2. <strong>查询缓存（Query Cache）</strong> <a class="header-anchor" href="#2. 查询缓存（Query Cache）" aria-label="Permalink to &quot;2. **查询缓存（Query Cache）**&quot;">​</a></h4><ul><li><strong>功能</strong>： <ul><li>缓存最近的查询结果。</li><li>如果查询命中缓存，直接返回结果，跳过解析、优化和执行。</li></ul></li><li><strong>注意</strong>： <ul><li>如果在两次相同查询之间有更新操作，查询缓存会被清空。</li><li><strong>MySQL 8.0 已移除查询缓存。</strong></li></ul></li></ul><hr><h4 id="3.%20%E8%A7%A3%E6%9E%90%E5%99%A8%EF%BC%88Parser%EF%BC%89" tabindex="-1">3. <strong>解析器（Parser）</strong> <a class="header-anchor" href="#3. 解析器（Parser）" aria-label="Permalink to &quot;3. **解析器（Parser）**&quot;">​</a></h4><ul><li><strong>功能</strong>： <ul><li>对 SQL 语句进行语法解析，生成语法树。</li><li>验证 SQL 语句的合法性。</li></ul></li><li><strong>作用</strong>： <ul><li>确保 SQL 语句符合 MySQL 的语法规则。</li></ul></li></ul><hr><h4 id="4.%20%E4%BC%98%E5%8C%96%E5%99%A8%EF%BC%88Optimizer%EF%BC%89" tabindex="-1">4. <strong>优化器（Optimizer）</strong> <a class="header-anchor" href="#4. 优化器（Optimizer）" aria-label="Permalink to &quot;4. **优化器（Optimizer）**&quot;">​</a></h4><ul><li><strong>功能</strong>： <ul><li>根据解析器生成的语法树，生成执行计划。</li><li>确定 SQL 的执行顺序（如表的连接顺序）。</li><li>选择最优的索引。</li></ul></li><li><strong>工具</strong>： <ul><li>可以使用 <code>EXPLAIN</code> 查看优化器生成的执行计划。</li></ul></li></ul><hr><h4 id="5.%20%E6%89%A7%E8%A1%8C%E5%99%A8%EF%BC%88Executor%EF%BC%89" tabindex="-1">5. <strong>执行器（Executor）</strong> <a class="header-anchor" href="#5. 执行器（Executor）" aria-label="Permalink to &quot;5. **执行器（Executor）**&quot;">​</a></h4><ul><li><strong>功能</strong>： <ul><li>根据优化器生成的执行计划，调用存储引擎的 API 执行具体的操作。</li><li>负责与存储引擎交互，完成数据的读写操作。</li></ul></li><li><strong>特点</strong>： <ul><li>执行器是 MySQL Server 与存储引擎之间的桥梁。</li></ul></li></ul><hr><h4 id="6.%20%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%EF%BC%88Storage%20Engine%EF%BC%89" tabindex="-1">6. <strong>存储引擎（Storage Engine）</strong> <a class="header-anchor" href="#6. 存储引擎（Storage Engine）" aria-label="Permalink to &quot;6. **存储引擎（Storage Engine）**&quot;">​</a></h4><ul><li><strong>功能</strong>： <ul><li>负责数据的实际存储和读取。</li><li>提供统一的 API 接口供执行器调用。</li></ul></li><li><strong>常见存储引擎</strong>： <ul><li><strong>InnoDB</strong>： <ul><li>支持事务（<code>redo log</code> 和 <code>undo log</code>）。</li><li>使用 <code>ibd</code> 文件存储表数据和索引。</li></ul></li><li><strong>MyISAM</strong>： <ul><li>不支持事务。</li><li>使用 <code>MYD</code> 和 <code>MYI</code> 文件存储表数据和索引。</li></ul></li></ul></li><li><strong>特点</strong>： <ul><li>插件式设计，可以更换存储引擎。</li></ul></li></ul><hr><h4 id="7.%20%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97" tabindex="-1">7. <strong>日志模块</strong> <a class="header-anchor" href="#7. 日志模块" aria-label="Permalink to &quot;7. **日志模块**&quot;">​</a></h4><ul><li><strong>功能</strong>： <ul><li>记录 MySQL 的运行状态和操作日志。</li></ul></li><li><strong>常见日志</strong>： <ul><li><strong>错误日志（Error Log）</strong>：记录 MySQL 的错误信息。</li><li><strong>查询日志（General Log）</strong>：记录所有的 SQL 请求。</li><li><strong>慢查询日志（Slow Query Log）</strong>：记录执行时间超过阈值的 SQL。</li><li><strong>二进制日志（Binary Log）</strong>：记录所有数据更改操作，用于数据恢复和主从复制。</li></ul></li></ul></blockquote><hr><h2 id="%E6%95%B0%E6%8D%AE%E6%B5%81%E6%80%BB%E7%BB%93" tabindex="-1">数据流总结 <a class="header-anchor" href="#数据流总结" aria-label="Permalink to &quot;数据流总结&quot;">​</a></h2><ol><li><strong>客户端发送 SQL 请求</strong>： <ul><li>连接器验证连接。</li></ul></li><li><strong>查询缓存</strong>： <ul><li>如果命中缓存，直接返回结果。</li></ul></li><li><strong>解析器</strong>： <ul><li>解析 SQL，生成语法树。</li></ul></li><li><strong>优化器</strong>： <ul><li>生成执行计划，选择最优索引。</li></ul></li><li><strong>执行器</strong>： <ul><li>调用存储引擎的 API，执行具体操作。</li></ul></li><li><strong>存储引擎</strong>： <ul><li>负责数据的实际存储和读取。</li></ul></li><li><strong>返回结果</strong>： <ul><li>查询结果返回给客户端。</li></ul></li></ol><hr><h2 id="%E5%9B%BE%E7%A4%BA%E6%A8%A1%E5%9D%97%E5%88%92%E5%88%86" tabindex="-1">图示模块划分 <a class="header-anchor" href="#图示模块划分" aria-label="Permalink to &quot;图示模块划分&quot;">​</a></h2><ol><li><strong>MySQL Server 层</strong>： <ul><li>包括连接器、查询缓存、解析器、优化器、执行器。</li><li>负责 SQL 的解析、优化和执行。</li></ul></li><li><strong>存储引擎层</strong>： <ul><li>提供数据存储和读取功能。</li><li><strong>插件式设计</strong>，支持多种存储引擎（如 InnoDB、MyISAM）。</li><li>oop思想</li></ul></li></ol><p><img src="'+j+'" alt="image-20250516122049651"></p><h2 id="%E5%85%B3%E9%94%AE%E7%82%B9%E6%80%BB%E7%BB%93" tabindex="-1">关键点总结 <a class="header-anchor" href="#关键点总结" aria-label="Permalink to &quot;关键点总结&quot;">​</a></h2><ul><li><strong>连接器</strong>：管理连接和权限。</li><li><strong>查询缓存</strong>：加速重复查询（MySQL 8.0 已移除）。</li><li><strong>解析器</strong>：验证 SQL 语法。</li><li><strong>优化器</strong>：生成执行计划，选择最优索引。</li><li><strong>执行器</strong>：调用存储引擎完成操作。</li><li><strong>存储引擎</strong>：负责数据的实际存储和读取。</li></ul><p>通过以上流程，MySQL 实现了从客户端发送 SQL 到返回结果的完整处理过程。</p><h1 id="mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6" tabindex="-1">mysql主从复制 <a class="header-anchor" href="#mysql主从复制" aria-label="Permalink to &quot;mysql主从复制&quot;">​</a></h1><h2 id="%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%B0%8F%E5%A4%A7%E5%85%A8--%E4%BA%86%E8%A7%A3" tabindex="-1">中间件小大全--了解 <a class="header-anchor" href="#中间件小大全--了解" aria-label="Permalink to &quot;中间件小大全--了解&quot;">​</a></h2><blockquote><p>以下是 MySQL 和服务器常用的中间件分类及其用途：</p><hr><h3 id="MySQL%20%E5%B8%B8%E7%94%A8%E4%B8%AD%E9%97%B4%E4%BB%B6" tabindex="-1"><strong>MySQL 常用中间件</strong> <a class="header-anchor" href="#MySQL 常用中间件" aria-label="Permalink to &quot;**MySQL 常用中间件**&quot;">​</a></h3><ol><li><p><strong>读写分离和负载均衡中间件</strong>：</p><ul><li><strong>MyCat</strong>： <ul><li>基于 Java 开发的数据库中间件，支持读写分离、分库分表。</li></ul></li><li><strong>ProxySQL</strong>： <ul><li>高性能的 MySQL 代理，支持读写分离、查询缓存、负载均衡。</li></ul></li><li><strong>MaxScale</strong>： <ul><li>MariaDB 官方推出的中间件，支持读写分离、查询路由和高可用。</li></ul></li></ul></li><li><p><strong>分库分表中间件</strong>：</p><ul><li><strong>ShardingSphere</strong>： <ul><li>Apache 开源的分布式数据库中间件，支持分库分表、读写分离、分布式事务。</li></ul></li><li><strong>TDDL（Taobao Distributed Data Layer）</strong>： <ul><li>淘宝开源的分布式数据库中间件，支持分库分表和动态数据源管理。</li></ul></li></ul></li><li><p><strong>高可用中间件</strong>：</p><ul><li><strong>MHA（Master High Availability）</strong>： <ul><li>用于 MySQL 主从复制环境的高可用解决方案，支持主库故障自动切换。</li></ul></li><li><strong>MMM（Master-Master Replication Manager）</strong>： <ul><li>管理 MySQL 主主复制的高可用工具。</li></ul></li><li><strong>Orchestrator</strong>： <ul><li>用于管理和监控 MySQL 主从拓扑结构，支持自动故障切换。</li></ul></li></ul></li><li><p><strong>分布式事务中间件</strong>：</p><ul><li><strong>Seata</strong>： <ul><li>阿里巴巴开源的分布式事务解决方案，支持 AT、TCC、SAGA 等模式。</li></ul></li><li><strong>DTM</strong>： <ul><li>支持多种语言的分布式事务管理器，适用于微服务架构。</li></ul></li></ul></li></ol><hr><h3 id="%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B8%B8%E7%94%A8%E4%B8%AD%E9%97%B4%E4%BB%B6" tabindex="-1"><strong>服务器常用中间件</strong> <a class="header-anchor" href="#服务器常用中间件" aria-label="Permalink to &quot;**服务器常用中间件**&quot;">​</a></h3><ol><li><p><strong>消息队列中间件</strong>：</p><ul><li><strong>RabbitMQ</strong>： <ul><li>基于 AMQP 协议的消息队列，支持可靠消息传递。</li></ul></li><li><strong>Kafka</strong>： <ul><li>高吞吐量的分布式消息队列，适合日志处理和实时数据流。</li></ul></li><li><strong>RocketMQ</strong>： <ul><li>阿里巴巴开源的分布式消息中间件，支持事务消息和延时消息。</li></ul></li></ul></li><li><p><strong>缓存中间件</strong>：</p><ul><li><strong>Redis</strong>： <ul><li>高性能的内存数据库，支持缓存、分布式锁、消息队列等功能。</li></ul></li><li><strong>Memcached</strong>： <ul><li>简单高效的分布式内存缓存系统。</li></ul></li></ul></li><li><p><strong>服务治理中间件</strong>：</p><ul><li><strong>Zookeeper</strong>： <ul><li>分布式协调服务，常用于服务注册与发现。</li></ul></li><li><strong>Consul</strong>： <ul><li>支持服务注册与发现、健康检查和分布式配置。</li></ul></li><li><strong>Nacos</strong>： <ul><li>阿里巴巴开源的服务治理平台，支持服务注册、配置管理和动态 DNS。</li></ul></li></ul></li><li><p><strong>负载均衡中间件</strong>：</p><ul><li><strong>Nginx</strong>： <ul><li>高性能的反向代理服务器，支持负载均衡和静态资源缓存。</li></ul></li><li><strong>HAProxy</strong>： <ul><li>专业的负载均衡器和代理服务器，支持高并发场景。</li></ul></li></ul></li><li><p><strong>日志和监控中间件</strong>：</p><ul><li><strong>ELK（Elasticsearch + Logstash + Kibana）</strong>： <ul><li>日志收集、存储和可视化分析工具链。</li></ul></li><li><strong>Prometheus</strong>： <ul><li>开源的监控系统，支持多维度数据模型和告警功能。</li></ul></li><li><strong>Grafana</strong>： <ul><li>数据可视化工具，常与 Prometheus 搭配使用。</li></ul></li></ul></li></ol></blockquote><h2 id="%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E7%9A%84%E4%BD%9C%E7%94%A8%EF%BC%9A" tabindex="-1">主从复制的作用： <a class="header-anchor" href="#主从复制的作用：" aria-label="Permalink to &quot;主从复制的作用：&quot;">​</a></h2><ul><li><p><strong>数据备份</strong>：主从复制可以<strong>实现数据的实时备份</strong>，甚至支持<strong>热备份</strong>。</p><p>实现实时备份，支持热备份，提升数据安全性。</p><blockquote><p><strong>热备份</strong>是指在系统运行过程中，不需要停止服务或中断业务的情况下，对数据进行备份的一种技术。它允许系统在备份的同时继续处理用户请求和操作，因此特别适合对高可用性要求较高的系统。</p></blockquote></li><li><p><strong>容灾</strong>：当主库发生故障时，可以通过中间件（如 MyCat）切换到从库，保证服务的高可用性。</p><p>主库故障时，通过中间件切换到从库，保证服务的高可用性。</p></li><li><p><strong>读写分离</strong>：通过主从复制<strong>实现读写分离</strong>，提升数据库的并发能力。</p><h3 id="%E4%B8%BB%E5%BA%93%E8%B4%9F%E8%B4%A3%E5%86%99%E6%93%8D%E4%BD%9C%EF%BC%8C%E4%BB%8E%E5%BA%93%E8%B4%9F%E8%B4%A3%E8%AF%BB%E6%93%8D%E4%BD%9C%EF%BC%8C%E5%88%86%E6%91%8A%E5%8E%8B%E5%8A%9B" tabindex="-1">主库负责写操作，从库负责读操作，分摊压力 <a class="header-anchor" href="#主库负责写操作，从库负责读操作，分摊压力" aria-label="Permalink to &quot;主库负责写操作，从库负责读操作，分摊压力&quot;">​</a></h3><blockquote><p>一般 读多, 写少</p><p>因此, 主库负责写, 从库负责查询, 并 进行 主库修改的 备份,binlog</p><ul><li>在实际应用中，读操作通常远多于写操作（如电商平台的浏览与购买行为）。</li><li>通过读写分离，主库专注于写操作，从库专注于读操作，<strong>可以挂载多个从库</strong>以支持高并发的读请求。</li></ul></blockquote></li></ul><p><img src="'+$+'" alt="image-20250516151336822"></p><h2 id="%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E7%9A%84%E6%B5%81%E7%A8%8B%EF%BC%9A" tabindex="-1">主从复制的流程： <a class="header-anchor" href="#主从复制的流程：" aria-label="Permalink to &quot;主从复制的流程：&quot;">​</a></h2><ul><li><h3 id="---%20binlog%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%97%A5%E5%BF%97%E5%92%8C%E4%B8%89%E4%B8%AA%E7%BA%BF%E7%A8%8B(master%E7%9A%84%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%E5%92%8Cslave%E7%9A%84%E4%B8%A4%E4%B8%AA%E7%BA%BF%E7%A8%8B)" tabindex="-1">--- binlog二进制日志和三个线程(master的一个线程和slave的两个线程) <a class="header-anchor" href="#--- binlog二进制日志和三个线程(master的一个线程和slave的两个线程)" aria-label="Permalink to &quot;--- binlog二进制日志和三个线程(master的一个线程和slave的两个线程)&quot;">​</a></h3></li></ul><p><img src="'+Z+`" alt="image-20250516152149806"></p><ul><li><p>主库（Master）记录所有数据变更操作到二进制日志（bin log）。</p></li><li><p>从库（Slave）通过 <strong>IO 线程</strong>读取主库的 bin log，并写入中继日志（relay log）。</p><blockquote><h3 id="%E4%B8%AD%E7%BB%A7%E6%97%A5%E5%BF%97" tabindex="-1">中继日志 <a class="header-anchor" href="#中继日志" aria-label="Permalink to &quot;中继日志&quot;">​</a></h3><p>防止 binlog 过多, 进行频繁的 写入, 但写入速度 又慢, <strong>跟不上 主库的更新</strong></p></blockquote></li><li><p><strong>从库的 SQL 线程</strong>从 relay log 中<strong>读取操作并在从库中重放</strong>(重做主库的步骤)，完成数据同步。</p></li></ul><h2 id="%E6%B6%89%E5%8F%8A%E7%9A%84%E6%97%A5%E5%BF%97%E5%92%8C%E7%BA%BF%E7%A8%8B%EF%BC%9A" tabindex="-1">涉及的日志和线程： <a class="header-anchor" href="#涉及的日志和线程：" aria-label="Permalink to &quot;涉及的日志和线程：&quot;">​</a></h2><ul><li><p><strong>日志</strong>：</p><ul><li>主库的二进制日志（bin log）。</li><li>从库的中继日志（relay log）。</li></ul></li><li><h3 id="%E7%BA%BF%E7%A8%8B%EF%BC%9A" tabindex="-1"><strong>线程</strong>： <a class="header-anchor" href="#线程：" aria-label="Permalink to &quot;**线程**：&quot;">​</a></h3><ul><li>主库的 bin log dump 线程：负责将 bin log 内容<strong>发送</strong>到从库。</li><li>从库的 IO 线程：接收主库的 bin log 内容并写入 relay log。</li><li>从库的 SQL 线程：从 relay log 中读取操作并在从库中执行。</li></ul></li></ul><h2 id="%E6%80%BB%E7%BB%93-25" tabindex="-1">总结 <a class="header-anchor" href="#总结-25" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>主从复制的核心是两个日志（bin log 和 relay log）和三个线程（bin log dump、IO、SQL）。</li><li>主从复制是实现读写分离的基础技术。</li><li>配置主从复制后，可以通过中间件（如 MyCat）实现容灾和读写分离。</li></ul><h2 id="%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%EF%BC%9A-1" tabindex="-1">注意事项： <a class="header-anchor" href="#注意事项：-1" aria-label="Permalink to &quot;注意事项：&quot;">​</a></h2><ul><li><p>主从复制是单向的（主到从），从库不能反向同步到主库。</p></li><li><h3 id="%E9%85%8D%E7%BD%AE%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%90%8E%EF%BC%8C%E5%8F%AA%E6%9C%89%E4%BB%8E%E9%85%8D%E7%BD%AE%E5%BC%80%E5%A7%8B%E7%9A%84%E8%8A%82%E7%82%B9%E5%BE%80%E5%90%8E%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%9A%E5%90%8C%E6%AD%A5%E3%80%82" tabindex="-1">配置主从复制后，只有从配置开始的节点往后的数据会同步。 <a class="header-anchor" href="#配置主从复制后，只有从配置开始的节点往后的数据会同步。" aria-label="Permalink to &quot;配置主从复制后，只有从配置开始的节点往后的数据会同步。&quot;">​</a></h3><h3 id="%E5%8E%9F%E6%9C%AC%E7%9A%84%20%E6%95%B0%E6%8D%AE%20%E9%83%BD%E4%B8%8D%E5%8F%97%E5%BD%B1%E5%93%8D!!" tabindex="-1">原本的 数据 都不受影响!! <a class="header-anchor" href="#原本的 数据 都不受影响!!" aria-label="Permalink to &quot;原本的 数据 都不受影响!!&quot;">​</a></h3></li></ul><h1 id="mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E5%AE%9E%E8%B7%B5" tabindex="-1">mysql主从复制实践 <a class="header-anchor" href="#mysql主从复制实践" aria-label="Permalink to &quot;mysql主从复制实践&quot;">​</a></h1><h2 id="%E7%8E%AF%E5%A2%83%EF%BC%9A" tabindex="-1">环境： <a class="header-anchor" href="#环境：" aria-label="Permalink to &quot;环境：&quot;">​</a></h2><ul><li><p>主库：wsl2 ubuntu22.04 -- <s><code>172.21.233.172</code></s> <code>172.21.224.1</code> 8.0</p><blockquote><p>注意, 从库 是通过第二个ip 连接主库的,也就是说, 主库 允许被 第二个 ip访问</p></blockquote></li><li><p>从库： windows -- <code>192.168.226.18</code> 8.0</p></li></ul><blockquote><p>wsl ping 不通主机</p><ol><li><strong>ICMP 协议限制</strong>： <ul><li><code>ping</code> 使用的是 ICMP 协议，而 WSL2 的虚拟网络适配器默认不支持直接通过 ICMP 协议访问主机。</li></ul></li><li><strong>网络隔离</strong>： <ul><li>WSL2 的网络是通过 NAT（网络地址转换）实现的，主机和 WSL2 实例之间的通信需要通过特定的端口转发，而不是直接通过 IP。</li></ul></li></ol><h4 id="%E5%90%AF%E7%94%A8%20ICMP%20%E5%8D%8F%E8%AE%AE%E6%94%AF%E6%8C%81%20%20%20--%20%20%E5%8D%B3%E5%8F%AF%20wsl%20ping%20%E4%B8%BB%E6%9C%BA" tabindex="-1"><strong>启用 ICMP 协议支持</strong> -- 即可 wsl ping 主机 <a class="header-anchor" href="#启用 ICMP 协议支持   --  即可 wsl ping 主机" aria-label="Permalink to &quot;**启用 ICMP 协议支持**   --  即可 wsl ping 主机&quot;">​</a></h4><p><strong>启用 Windows 防火墙中的 ICMP 回显请求</strong>：</p><ul><li>打开 <strong>控制面板</strong> &gt; <strong>系统和安全</strong> &gt; <strong>Windows 防火墙</strong> &gt; <strong>高级设置</strong>。</li><li>在左侧选择 <strong>入站规则</strong>，找到 <strong>文件和打印共享（回显请求 - ICMPv4-In）</strong>。</li><li>右键点击规则，选择 <strong>启用规则</strong>。</li></ul></blockquote><h2 id="%E4%B8%BB%E5%BA%93%E9%85%8D%E7%BD%AE" tabindex="-1">主库配置 <a class="header-anchor" href="#主库配置" aria-label="Permalink to &quot;主库配置&quot;">​</a></h2><blockquote><h3 id="1%20.%20%20%E5%85%88%E8%BF%9B%E8%A1%8C%20ubuntu%20%E5%BC%80%E6%94%BE3306%20%E7%AB%AF%E5%8F%A3" tabindex="-1">1 . 先进行 <strong>ubuntu 开放3306 端口</strong> <a class="header-anchor" href="#1 .  先进行 ubuntu 开放3306 端口" aria-label="Permalink to &quot;1 .  先进行 **ubuntu 开放3306 端口**&quot;">​</a></h3><p>​ 使得 主机 可以通过 下面这个命令 连接到 linux的 mysql</p><h3 id="%E5%85%88%E7%9C%8B%20%E8%BF%9C%E7%A8%8B%20ip%20%E8%AE%BF%E9%97%AE---%E5%9C%A8%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB" tabindex="-1">先看 远程 ip 访问---在读写分离 <a class="header-anchor" href="#先看 远程 ip 访问---在读写分离" aria-label="Permalink to &quot;先看 远程 ip 访问---在读写分离&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">172</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">21</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">233</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">172</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">u </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">root</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p</span></span></code></pre></div><h3 id="%E6%80%8E%E4%B9%88%E5%81%9A%3F" tabindex="-1">怎么做? <a class="header-anchor" href="#怎么做%3F" aria-label="Permalink to &quot;怎么做?&quot;">​</a></h3><ul><li><p>首先 其实可以 不用开 防火墙, 默认开放所有, 当然 这样不安全</p></li><li><p>ubuntu 使用 ufw 控制 防火墙, 默认不开启</p></li><li><p>为了安全, 就需要 开启防火墙, 并 开放端口号</p></li><li><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sudo ufw allow </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3306</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/tcp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   //</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 开放特定端口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sudo ufw </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        //</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">开启防火墙</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sudo ufw </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       //</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 查看当前规则</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">systemctl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ufw   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 查看状态</span></span></code></pre></div></li></ul><p>​</p></blockquote><blockquote><h3 id="2%20.%20%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%20%E7%94%A8%E4%BA%8E%20%E4%B8%BB%E4%BB%8E%E5%BA%93%20%E9%80%9A%E4%BF%A1%E7%9A%84%20%E8%B4%A6%E5%8F%B7" tabindex="-1">2 . 创建一个 用于 <strong>主从库 通信</strong>的 <strong>账号</strong> <a class="header-anchor" href="#2 . 创建一个 用于 主从库 通信的 账号" aria-label="Permalink to &quot;2 . 创建一个 用于 **主从库 通信**的 **账号**&quot;">​</a></h3><ul><li><p>可以直接使用root账户, 但是 这里新创建一个</p></li><li><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">create</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mslave</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&#39;@</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;172.21.224.1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> identified </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;xing@huai&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;    </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 密码要复杂, 不然通不过</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;mslave&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  任意ip    </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 若是虚拟机,net模式, 则是 vmware8 的 地址</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wsl 要使用 wsl hype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v 的ip</span></span></code></pre></div></li><li><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">开启主从复制权限 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  所有库的所有表</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">grant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> replication slave </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">on</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;mslave&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;172.21.224.1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">identified </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;xing@huai&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   在 MySQL </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 或更低版本中，您可以直接在 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GRANT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 语句中使用 IDENTIFIED </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BY</span></span></code></pre></div><p>replication: 复制</p><p>grant : 授予</p></li><li><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">flush privileges;</span></span></code></pre></div><p>privilege: 特权</p></li></ul></blockquote><blockquote><h3 id="3%20.%20%E8%BF%9B%E8%A1%8Cmysql%20%E9%85%8D%E7%BD%AE" tabindex="-1">3 . 进行mysql 配置 <a class="header-anchor" href="#3 . 进行mysql 配置" aria-label="Permalink to &quot;3 . 进行mysql 配置&quot;">​</a></h3><ul><li><p>开启 二进制 日志, 默认开启 --- 配置文件进行修改</p></li><li><p>获取二进制日志和位置</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">master</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;    </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 这是当前 的二进制</span></span></code></pre></div></li></ul></blockquote><h2 id="%E4%BB%8E%E5%BA%93%E9%85%8D%E7%BD%AE" tabindex="-1">从库配置 <a class="header-anchor" href="#从库配置" aria-label="Permalink to &quot;从库配置&quot;">​</a></h2><blockquote><h3 id="1%20.%20%E9%85%8D%E7%BD%AE%E5%85%A8%E5%B1%80%E5%94%AF%E4%B8%80%E7%9A%84server-id%EF%BC%88%E6%B6%89%E5%8F%8A%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%EF%BC%8C%E9%9C%80%E8%A6%81%E9%87%8D%E5%90%AFmysql80%E6%9C%8D%E5%8A%A1%EF%BC%89" tabindex="-1">1 . 配置全局唯一的server-id（涉及修改配置文件，需要重启mysql80服务） <a class="header-anchor" href="#1 . 配置全局唯一的server-id（涉及修改配置文件，需要重启mysql80服务）" aria-label="Permalink to &quot;1 . 配置全局唯一的server-id（涉及修改配置文件，需要重启mysql80服务）&quot;">​</a></h3><p>win 配置文件 路径 : <code>&quot;C:\\ProgramData\\MySQL\\MySQL Server 8.0\\my.ini&quot;</code></p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">server-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span></code></pre></div><p>重启服务</p><p>直接任务管理器, 服务里 找 mysql 重启</p></blockquote><blockquote><h3 id="2%20.%20%E5%88%9B%E5%BB%BA%E7%9A%84%E8%B4%A6%E6%88%B7%E8%AF%BB%E5%8F%96binlog%E5%90%8C%E6%AD%A5%E6%95%B0%E6%8D%AE" tabindex="-1">2 . 创建的账户读取binlog同步数据 <a class="header-anchor" href="#2 . 创建的账户读取binlog同步数据" aria-label="Permalink to &quot;2 . 创建的账户读取binlog同步数据&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CHANGE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MASTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MASTER_HOST</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;172.21.233.172&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MASTER_PORT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3306</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MASTER_USER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;mslave&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MASTER_PASSWORD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xing@huai&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MASTER_LOG_FILE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;binlog.000061&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MASTER_LOG_POS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1432</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GET_MASTER_PUBLIC_KEY</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 这个 是 突然需要的, 第一天是好的, 配了 mycat 后, 怎么改 都不行了</span></span></code></pre></div></blockquote><blockquote><h3 id="3%20.%20%E5%BC%80%E5%90%AF%E4%BB%8E%E5%BA%93" tabindex="-1">3 . 开启从库 <a class="header-anchor" href="#3 . 开启从库" aria-label="Permalink to &quot;3 . 开启从库&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> slave;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show slave </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\G</span></span></code></pre></div><div class="tip custom-block github-alert"><p class="custom-block-title">TIP</p><p></p><p><code>SHOW SLAVE STATUS\\G</code> 的重点字段：</p><ol><li><strong>Slave_IO_Running</strong> 和 <strong>Slave_SQL_Running</strong><ul><li>确认 I/O 和 SQL 线程是否正常运行（值应为 <code>Yes</code>）。</li></ul></li><li><strong>Seconds_Behind_Master</strong><ul><li>从库落后主库的时间（值为 <code>0</code> 表示同步完成）。</li></ul></li><li><strong>Last_IO_Error</strong> 和 <strong>Last_SQL_Error</strong><ul><li>检查 I/O 和 SQL 线程的最后错误信息（为空表示无错误）。</li></ul></li><li><strong>Master_Log_File</strong> 和 <strong>Read_Master_Log_Pos</strong><ul><li>当前主库的日志文件及从库读取的位置，用于确认同步进度。</li></ul></li><li><strong>Exec_Master_Log_Pos</strong><ul><li>从库已执行的主库日志位置，用于确认同步到哪里。</li></ul></li></ol></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show processlist;</span></span></code></pre></div></blockquote><h2 id="%E6%9F%A5%E7%9C%8B%E5%BD%93%E5%89%8Dmysql%E7%BA%BF%E7%A8%8B" tabindex="-1">查看当前mysql线程 <a class="header-anchor" href="#查看当前mysql线程" aria-label="Permalink to &quot;查看当前mysql线程&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show processlist;   </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 有 bin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dump线程</span></span></code></pre></div><p>验证主从复制：</p><ul><li>在主库创建数据库或表，从库会同步这些变更。</li><li>使用 <code>SHOW PROCESSLIST</code> 查看主库和从库的线程状态： <ul><li>主库有 bin log dump 线程。</li><li>从库有 IO 线程和 SQL 线程。</li></ul></li></ul><h1 id="%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-%E8%80%81%E5%B8%88" tabindex="-1">主从复制问题解决-老师 <a class="header-anchor" href="#主从复制问题解决-老师" aria-label="Permalink to &quot;主从复制问题解决-老师&quot;">​</a></h1><h2 id="%E4%B8%BB%E8%A6%81%E6%98%AF%20%E7%9C%8B%E6%97%A5%E5%BF%97!!" tabindex="-1">主要是 看日志!! <a class="header-anchor" href="#主要是 看日志!!" aria-label="Permalink to &quot;主要是 看日志!!&quot;">​</a></h2><p><img src="`+ss+'" alt="image-20250516222351161"></p><p><img src="'+is+`" alt="image-20250516222446178"></p><h1 id="%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3-%E8%87%AA%E5%B7%B1" tabindex="-1">主从复制问题解决-自己 <a class="header-anchor" href="#主从复制问题解决-自己" aria-label="Permalink to &quot;主从复制问题解决-自己&quot;">​</a></h1><h2 id="%E6%B3%A8%E6%84%8F-3" tabindex="-1">注意 <a class="header-anchor" href="#注意-3" aria-label="Permalink to &quot;注意&quot;">​</a></h2><p>在 从库 <code>start slave</code>之前, 必须先进行 是否能 远程 登录 测试, 否则 容易出现</p><p>下面的 mysql 保护日志, 会被加入黑名单</p><h2 id="wsl-ip%E9%97%AE%E9%A2%98" tabindex="-1">wsl-ip问题 <a class="header-anchor" href="#wsl-ip问题" aria-label="Permalink to &quot;wsl-ip问题&quot;">​</a></h2><blockquote><h3 id="wsl%20%E8%A6%81%E4%BD%BF%E7%94%A8%20wsl%20hyper-v%20%E7%9A%84ip" tabindex="-1">wsl 要使用 wsl hyper-v 的ip <a class="header-anchor" href="#wsl 要使用 wsl hyper-v 的ip" aria-label="Permalink to &quot;wsl 要使用 wsl hyper-v 的ip&quot;">​</a></h3><p>而不是 wsl里的ip</p></blockquote><h2 id="%E6%B8%85%E7%90%86%E5%A4%8D%E5%88%B6%E7%8A%B6%E6%80%81" tabindex="-1">清理复制状态 <a class="header-anchor" href="#清理复制状态" aria-label="Permalink to &quot;清理复制状态&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RESET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SLAVE ALL;</span></span></code></pre></div><h2 id="%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AE%E9%94%99%E8%AF%AF%2C%E5%88%A0%E9%99%A4%E6%88%96%E4%BF%AE%E6%94%B9" tabindex="-1">用户配置错误,删除或修改 <a class="header-anchor" href="#用户配置错误%2C删除或修改" aria-label="Permalink to &quot;用户配置错误,删除或修改&quot;">​</a></h2><blockquote><p>要删除之前创建的用户，可以使用以下 SQL 命令：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DROP</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> USER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;mslave&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;192.168.226.18&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="%E8%AF%B4%E6%98%8E%EF%BC%9A" tabindex="-1">说明： <a class="header-anchor" href="#说明：" aria-label="Permalink to &quot;说明：&quot;">​</a></h3><ol><li><p><strong><code>DROP USER</code></strong>：用于删除指定的 MySQL 用户。</p></li><li><p><strong><code>&#39;mslave&#39;@&#39;192.168.226.18&#39;</code></strong>：指定要删除的用户和其主机限制。</p></li><li><p>执行以下命令查看用户列表，确认用户是否已删除：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user, host </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mysql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;mslave&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li></ol></blockquote><blockquote><p>如果不想删除用户，而是修改用户的主机限制或密码，可以使用以下方法：</p><h3 id="%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E7%9A%84%E4%B8%BB%E6%9C%BA%E9%99%90%E5%88%B6" tabindex="-1"><strong>修改用户的主机限制</strong> <a class="header-anchor" href="#修改用户的主机限制" aria-label="Permalink to &quot;**修改用户的主机限制**&quot;">​</a></h3><p>将用户 <code>mslave</code> 的主机限制从 <code>192.168.226.18</code> 修改为 <code>%</code>（允许任意主机连接）：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UPDATE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mysql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> host </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;%&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;mslave&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> host </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;192.168.226.18&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FLUSH PRIVILEGES;</span></span></code></pre></div><p>如果需要修改为特定的 IP 地址（例如 <code>172.21.224.1</code>）：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UPDATE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mysql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> host </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;172.21.224.1&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;mslave&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> host </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;192.168.226.18&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FLUSH PRIVILEGES;</span></span></code></pre></div><hr><h3 id="%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E7%9A%84%E5%AF%86%E7%A0%81" tabindex="-1"><strong>修改用户的密码</strong> <a class="header-anchor" href="#修改用户的密码" aria-label="Permalink to &quot;**修改用户的密码**&quot;">​</a></h3><p>如果需要修改用户的密码，可以使用以下命令：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ALTER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> USER</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;mslave&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;192.168.226.18&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IDENTIFIED </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;new_password&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FLUSH PRIVILEGES;</span></span></code></pre></div><hr><h3 id="%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E7%9A%84%E6%9D%83%E9%99%90" tabindex="-1"><strong>修改用户的权限</strong> <a class="header-anchor" href="#修改用户的权限" aria-label="Permalink to &quot;**修改用户的权限**&quot;">​</a></h3><p>如果需要调整用户的权限，例如允许主从复制：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GRANT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> REPLICATION SLAVE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TO</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;mslave&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;192.168.226.18&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">FLUSH PRIVILEGES;</span></span></code></pre></div><hr><h3 id="4.%20%E9%AA%8C%E8%AF%81%E4%BF%AE%E6%94%B9%E7%BB%93%E6%9E%9C" tabindex="-1">4. <strong>验证修改结果</strong> <a class="header-anchor" href="#4. 验证修改结果" aria-label="Permalink to &quot;4. **验证修改结果**&quot;">​</a></h3><p>执行以下命令，确认用户的主机限制和权限是否已修改：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user, host </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mysql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;mslave&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SHOW GRANTS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FOR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;mslave&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;192.168.226.18&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><hr><p>通过以上方法，可以灵活地修改用户的主机限制、密码或权限，而无需删除用户重新创建。</p></blockquote><h2 id="%E6%97%A0%E6%B3%95%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6" tabindex="-1">无法远程连接-配置文件 <a class="header-anchor" href="#无法远程连接-配置文件" aria-label="Permalink to &quot;无法远程连接-配置文件&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bind</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 127</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysqlx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bind</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-address</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 127</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre></div><p>都改为 <code>0.0.0.0</code></p><h2 id="%E6%97%A0%E6%B3%95%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5-mysql%E5%86%85%E9%83%A8" tabindex="-1">无法远程连接-mysql内部 <a class="header-anchor" href="#无法远程连接-mysql内部" aria-label="Permalink to &quot;无法远程连接-mysql内部&quot;">​</a></h2><p>检查 用户的主机访问权限</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user, host </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mysql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;root&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user, host </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mysql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;mslave&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>root 是 localhost 只允许 本地连接</p><h2 id="win%E6%B5%8B%E8%AF%95%E8%BF%9C%E7%A8%8B%E7%AB%AF%E5%8F%A3%E6%98%AF%E5%90%A6%E5%BC%80%E6%94%BE" tabindex="-1">win测试远程端口是否开放 <a class="header-anchor" href="#win测试远程端口是否开放" aria-label="Permalink to &quot;win测试远程端口是否开放&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Test</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NetConnection </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ComputerName </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">172</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">21</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">233</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">172</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Port </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3306</span></span></code></pre></div><p>linux 是</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">telnet </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">172</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">21</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">233</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">172</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3306</span></span></code></pre></div><h2 id="mysql%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6" tabindex="-1">mysql保护机制 <a class="header-anchor" href="#mysql保护机制" aria-label="Permalink to &quot;mysql保护机制&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ERROR </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1129</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (HY000): Host </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;172.21.224.1&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> blocked because of many </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">connection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> errors; unblock </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">with</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;mysqladmin flush-hosts&#39;</span></span></code></pre></div><p><strong>由于发生了太多次连接错误</strong>（例如连接被拒绝、认证失败、网络断开等），被 MySQL <strong>自动加入黑名单</strong>，暂时禁止该主机继续连接数据库。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 在被连接端刷新</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysqladmin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">u </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">root</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p flush</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hosts</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">并重启</span></span></code></pre></div><h2 id="%E7%89%88%E6%9C%AC%E5%BF%85%E9%A1%BB%E4%B8%80%E8%87%B4" tabindex="-1">版本必须一致 <a class="header-anchor" href="#版本必须一致" aria-label="Permalink to &quot;版本必须一致&quot;">​</a></h2><p>否则 报 ssl 错误, 不同版本, 尤其是大版本, ssl 不一样</p><h1 id="%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E5%8E%9F%E7%90%86" tabindex="-1">读写分离原理 <a class="header-anchor" href="#读写分离原理" aria-label="Permalink to &quot;读写分离原理&quot;">​</a></h1><h2 id="%E9%9D%A2%E8%AF%95%E4%BC%9A%E9%97%AE%E6%9C%89%E6%B2%A1%E6%9C%89%E7%94%A8%E8%BF%87" tabindex="-1">面试会问有没有用过 <a class="header-anchor" href="#面试会问有没有用过" aria-label="Permalink to &quot;面试会问有没有用过&quot;">​</a></h2><p>主从复制, 读写分离 --- 根据老师讲的原理 及 操作 --- 进行回答即可</p><blockquote><h3 id="%E9%9D%A2%E8%AF%95%E4%B8%AD%E5%85%B3%E4%BA%8E%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%B8%8E%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E7%9A%84%E5%9B%9E%E7%AD%94%E6%8A%80%E5%B7%A7" tabindex="-1">面试中关于主从复制与读写分离的回答技巧 <a class="header-anchor" href="#面试中关于主从复制与读写分离的回答技巧" aria-label="Permalink to &quot;面试中关于主从复制与读写分离的回答技巧&quot;">​</a></h3><p>在面试中，关于 <strong>主从复制</strong> 和 <strong>读写分离</strong> 的问题，面试官可能会从以下几个方面提问。以下是一些常见问题及回答思路：</p><hr><h4 id="%E4%B8%80%E3%80%81%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98" tabindex="-1">一、主从复制相关问题 <a class="header-anchor" href="#一、主从复制相关问题" aria-label="Permalink to &quot;一、主从复制相关问题&quot;">​</a></h4><ol><li><p><strong>主从复制的原理是什么？</strong></p><ul><li><strong>回答要点</strong>： <ul><li>主从复制通过主库的 <strong>二进制日志（binlog）</strong> 实现。</li><li>主库有一个 <strong>binlog 线程</strong>，将操作记录写入二进制日志。</li><li>从库有两个线程： <ul><li><strong>I/O 线程</strong>：从主库读取 binlog 并写入从库的中继日志（relay log）。</li><li><strong>SQL 线程</strong>：从中继日志中读取并执行 SQL 语句，完成数据同步。</li></ul></li></ul></li></ul></li><li><p><strong>主从复制的配置步骤？</strong></p><ul><li><strong>回答要点</strong>： <ul><li>主库配置： <ol><li>开启二进制日志。</li><li>设置唯一的 <code>server_id</code>。</li><li>创建用于主从同步的用户并授权。</li></ol></li><li>从库配置： <ol><li>设置唯一的 <code>server_id</code>。</li><li>配置主库信息（<code>CHANGE MASTER TO</code>）。</li><li>启动从库线程（<code>START SLAVE</code>）。</li></ol></li><li>使用 <code>SHOW MASTER STATUS</code> 和 <code>SHOW SLAVE STATUS\\G</code> 检查状态。</li></ul></li></ul></li><li><p><strong>主从复制中可能遇到的问题及解决方法？</strong></p><ul><li><strong>回答要点</strong>： <ul><li><strong>网络问题</strong>：检查主从库之间的网络连通性（<code>ping</code> 和 <code>telnet</code> 测试）。</li><li><strong>权限问题</strong>：确保主库用户权限正确（<code>GRANT REPLICATION SLAVE</code>）。</li><li><strong>二进制日志位置错误</strong>：重新配置主库的 binlog 文件和位置。</li><li><strong>从库 SQL 错误</strong>：通过 <code>SET GLOBAL sql_slave_skip_counter=1</code> 跳过错误。</li></ul></li></ul></li></ol><hr><h4 id="%E4%BA%8C%E3%80%81%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98" tabindex="-1">二、读写分离相关问题 <a class="header-anchor" href="#二、读写分离相关问题" aria-label="Permalink to &quot;二、读写分离相关问题&quot;">​</a></h4><ol><li><p><strong>读写分离的原理是什么？</strong></p><ul><li><strong>回答要点</strong>： <ul><li>通过将写操作分配到主库，读操作分配到从库，提升数据库的并发处理能力。</li><li>读写分离需要依赖 <strong>数据库中间件</strong>（如 MyCat）。</li><li>中间件根据操作类型（读/写）自动分发请求到主库或从库。</li></ul></li></ul></li><li><p><strong>读写分离的实现步骤？</strong></p><ul><li><strong>回答要点</strong>： <ul><li>配置主从复制，确保主库和从库之间的数据同步。</li><li>引入数据库中间件（如 MyCat），配置主库和从库的信息。</li><li>在中间件中设置读写分离规则。</li><li>客户端连接中间件的 <strong>数据端口</strong>（如 MyCat 的 8066 端口）。</li></ul></li></ul></li><li><p><strong>如何证明你使用过 MyCat？</strong></p><ul><li><strong>回答要点</strong>： <ul><li>说明 MyCat 的两个端口： <ul><li><strong>数据端口（8066）</strong>：用于客户端访问数据库。</li><li><strong>管理端口（9066）</strong>：用于查看 MyCat 的运行状态和后端数据库的连接状态。</li></ul></li><li>说明 MyCat 支持的配置： <ul><li>一主一从、一主多从、多主多从。</li></ul></li><li>提到 MyCat 的高可用特性： <ul><li>主库挂掉时，可以自动切换到从库。</li><li>支持多主多从配置，增强容灾能力。</li></ul></li></ul></li></ul></li></ol><hr><h4 id="%E4%B8%89%E3%80%81%E9%9D%A2%E8%AF%95%E5%9B%9E%E7%AD%94%E4%B8%AD%E7%9A%84%E5%8A%A0%E5%88%86%E7%82%B9" tabindex="-1">三、面试回答中的加分点 <a class="header-anchor" href="#三、面试回答中的加分点" aria-label="Permalink to &quot;三、面试回答中的加分点&quot;">​</a></h4><ol><li><p><strong>结合实际项目经验</strong>：</p><ul><li><strong>示例</strong>： <ul><li>“在之前的项目中，我们使用 MySQL 主从复制实现了读写分离。通过引入 MyCat 中间件，解决了数据库性能瓶颈问题。MyCat 的 8066 数据端口让客户端无需感知主从库的存在，读写分离的逻辑完全由中间件处理。”</li></ul></li></ul></li><li><p><strong>提到常见问题及解决方法</strong>：</p><ul><li><strong>示例</strong>： <ul><li>“在配置主从复制时，曾遇到过 <code>ERROR 1045</code> 的权限问题。通过检查主库用户的权限配置，发现是从库的 IP 地址未被授权，最终通过 <code>GRANT REPLICATION SLAVE</code> 解决了问题。”</li></ul></li></ul></li><li><p><strong>展示对中间件的理解</strong>：</p><ul><li><strong>示例</strong>： <ul><li>“MyCat 类似于 Nginx 的反向代理功能，客户端只需连接 MyCat 的数据端口，MyCat 会根据读写操作自动分发请求到主库或从库。它还支持多主多从配置，提升了系统的高可用性。”</li></ul></li></ul></li><li><p><strong>提到性能优化和高可用性</strong>：</p><ul><li><strong>示例</strong>： <ul><li>“通过 MyCat 的多主多从配置，我们实现了数据库的高可用。当主库挂掉时，MyCat 可以自动切换到从库，确保服务的连续性。”</li></ul></li></ul></li></ol><hr><h4 id="%E5%9B%9B%E3%80%81%E6%80%BB%E7%BB%93" tabindex="-1">四、总结 <a class="header-anchor" href="#四、总结" aria-label="Permalink to &quot;四、总结&quot;">​</a></h4><p>在面试中，关于主从复制和读写分离的回答可以从以下几个方面展开：</p><ol><li><strong>原理</strong>：清晰描述主从复制和读写分离的工作机制。</li><li><strong>配置步骤</strong>：简明扼要地说明配置过程。</li><li><strong>实际经验</strong>：结合项目中的实际应用，展示解决问题的能力。</li><li><strong>中间件的使用</strong>：重点说明 MyCat 的作用、端口和配置特点。</li><li><strong>问题排查</strong>：提到常见问题及解决方法，展示你的问题分析和解决能力。</li></ol></blockquote><h2 id="%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E4%B8%8E%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E7%9A%84%E5%85%B3%E7%B3%BB" tabindex="-1">主从复制与读写分离的关系 <a class="header-anchor" href="#主从复制与读写分离的关系" aria-label="Permalink to &quot;主从复制与读写分离的关系&quot;">​</a></h2><blockquote><ol><li><p><strong>主从复制</strong>：</p><ul><li>主从复制是实现读写分离的基础。</li><li>主库（Master）负责写操作，从库（Slave）负责读操作。</li><li>主从之间通过二进制日志（binlog）和线程（I/O 线程和 SQL 线程）实现数据同步。</li></ul></li><li><p><strong>读写分离</strong>：</p><ul><li>通过将写操作分配到主库，读操作分配到从库，提升数据库的并发处理能力。</li><li>需要引入 <strong>数据库中间件</strong>（如 MyCat）来实现自动化的读写分离。</li></ul></li></ol></blockquote><h2 id="%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E7%9A%84%E5%AE%9E%E7%8E%B0" tabindex="-1">读写分离的实现 <a class="header-anchor" href="#读写分离的实现" aria-label="Permalink to &quot;读写分离的实现&quot;">​</a></h2><blockquote><ol><li><p><strong>传统实现方式</strong>：</p><ul><li>代码中手动指定主库和从库。</li><li>**缺点：**代码与数据库环境强耦合，维护复杂。</li></ul></li><li><h2 id="%E9%80%9A%E8%BF%87%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%AE%9E%E7%8E%B0%EF%BC%9A" tabindex="-1"><strong>通过数据库中间件实现</strong>： <a class="header-anchor" href="#通过数据库中间件实现：" aria-label="Permalink to &quot;**通过数据库中间件实现**：&quot;">​</a></h2><ul><li><h3 id="%E5%BC%95%E5%85%A5%E4%B8%AD%E9%97%B4%E4%BB%B6%EF%BC%88%E5%A6%82%20MyCat%EF%BC%89%E4%BD%9C%E4%B8%BA%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%82%20%20--%20%20%E6%AF%94%E8%BE%83%E5%83%8F%20nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1" tabindex="-1"><strong>引入中间件（如 MyCat）作为代理服务器</strong>。 -- 比较像 nginx负载均衡 <a class="header-anchor" href="#引入中间件（如 MyCat）作为代理服务器。  --  比较像 nginx负载均衡" aria-label="Permalink to &quot;**引入中间件（如 MyCat）作为代理服务器**。  --  比较像 nginx负载均衡&quot;">​</a></h3></li><li>客户端只需连接中间件，中间件根据操作类型（读/写）自动分发请求到主库或从库。</li><li>优点：代码无需修改，支持动态扩展和高可用。</li></ul></li></ol></blockquote><h2 id="MyCat%20%E4%B8%AD%E9%97%B4%E4%BB%B6" tabindex="-1">MyCat 中间件 <a class="header-anchor" href="#MyCat 中间件" aria-label="Permalink to &quot;MyCat 中间件&quot;">​</a></h2><blockquote><ol><li><p><strong>MyCat 的作用</strong>：</p><ul><li><p>实现读写分离。</p></li><li><h3 id="%E6%94%AF%E6%8C%81%E5%A4%9A%E7%A7%8D%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE%EF%BC%88%E5%A6%82%E4%B8%80%E4%B8%BB%E4%B8%80%E4%BB%8E%E3%80%81%E4%B8%80%E4%B8%BB%E5%A4%9A%E4%BB%8E%E3%80%81%E5%A4%9A%E4%B8%BB%E5%A4%9A%E4%BB%8E%EF%BC%89%E3%80%82" tabindex="-1">支持多种主从配置（如<strong>一主一从、一主多从、多主多从</strong>）。 <a class="header-anchor" href="#支持多种主从配置（如一主一从、一主多从、多主多从）。" aria-label="Permalink to &quot;支持多种主从配置（如**一主一从、一主多从、多主多从**）。&quot;">​</a></h3></li><li><p>但是 有个问题, 主库挂了, 就要换到从库, 从与从之间 没有主从复制, 比较复杂</p><h3 id="%E6%8E%A8%E8%8D%90%E7%9C%8B%E6%BA%90%E7%A0%81---%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB" tabindex="-1">推荐看源码---读写分离 <a class="header-anchor" href="#推荐看源码---读写分离" aria-label="Permalink to &quot;推荐看源码---读写分离&quot;">​</a></h3></li><li><p>提供高可用和容灾能力。</p></li></ul></li><li><p><strong>MyCat 的优势</strong>：</p><ul><li>遵循 MySQL 通信协议，客户端无需感知中间件的存在。</li><li><h3 id="%E6%94%AF%E6%8C%81%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2%E4%B8%BB%E4%BB%8E%E5%BA%93%EF%BC%8C%E6%8F%90%E5%8D%87%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E3%80%82" tabindex="-1"><strong>支持动态切换主从库</strong>，提升系统的<strong>高可用性</strong>。 <a class="header-anchor" href="#支持动态切换主从库，提升系统的高可用性。" aria-label="Permalink to &quot;**支持动态切换主从库**，提升系统的**高可用性**。&quot;">​</a></h3></li><li><h3 id="%E6%94%AF%E6%8C%81%E5%A4%9A%E4%B8%BB%E5%A4%9A%E4%BB%8E%E9%85%8D%E7%BD%AE%EF%BC%8C%E5%A2%9E%E5%BC%BA%E5%AE%B9%E7%81%BE%E8%83%BD%E5%8A%9B%E3%80%82" tabindex="-1"><strong>支持多主多从配置</strong>，增强容灾能力。 <a class="header-anchor" href="#支持多主多从配置，增强容灾能力。" aria-label="Permalink to &quot;**支持多主多从配置**，增强容灾能力。&quot;">​</a></h3></li></ul></li><li><h3 id="MyCat%20%E7%9A%84%E7%AB%AF%E5%8F%A3%EF%BC%9A%20---%20%E8%AF%81%E6%98%8E%E4%BD%A0%E7%94%A8%E8%BF%87" tabindex="-1"><strong>MyCat 的端口</strong>： --- 证明你用过 <a class="header-anchor" href="#MyCat 的端口： --- 证明你用过" aria-label="Permalink to &quot;**MyCat 的端口**： --- 证明你用过&quot;">​</a></h3><ul><li><h4 id="%E6%95%B0%E6%8D%AE%E7%AB%AF%E5%8F%A3%EF%BC%888066%EF%BC%89%EF%BC%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%80%9A%E8%BF%87%E8%AF%A5%E7%AB%AF%E5%8F%A3%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E3%80%82" tabindex="-1"><strong>数据端口（8066）</strong>：客户端通过该端口访问数据库。 <a class="header-anchor" href="#数据端口（8066）：客户端通过该端口访问数据库。" aria-label="Permalink to &quot;**数据端口（8066）**：客户端通过该端口访问数据库。&quot;">​</a></h4></li><li><h4 id="%E7%AE%A1%E7%90%86%E7%AB%AF%E5%8F%A3%EF%BC%889066%EF%BC%89%EF%BC%9A%E7%94%A8%E4%BA%8E%E6%9F%A5%E7%9C%8B%20MyCat%20%E7%9A%84%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81%E5%92%8C%E5%90%8E%E7%AB%AF%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%BF%9E%E6%8E%A5%E7%8A%B6%E6%80%81%E3%80%82" tabindex="-1"><strong>管理端口（9066）</strong>：用于查看 MyCat 的运行状态和后端数据库的连接状态。 <a class="header-anchor" href="#管理端口（9066）：用于查看 MyCat 的运行状态和后端数据库的连接状态。" aria-label="Permalink to &quot;**管理端口（9066）**：用于查看 MyCat 的运行状态和后端数据库的连接状态。&quot;">​</a></h4></li></ul></li></ol></blockquote><h2 id="%E9%9D%A2%E8%AF%95%E4%B8%AD%E7%9A%84%E5%85%B3%E9%94%AE%E7%82%B9" tabindex="-1">面试中的关键点 <a class="header-anchor" href="#面试中的关键点" aria-label="Permalink to &quot;面试中的关键点&quot;">​</a></h2><p><strong>MyCat 的特点</strong>：</p><ul><li>支持的端口（8066 和 9066）。</li><li>支持的主从配置（如一主多从、多主多从）。</li><li>高可用和容灾能力。</li></ul><hr><h2 id="%E6%80%BB%E7%BB%93-26" tabindex="-1">总结 <a class="header-anchor" href="#总结-26" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li><strong>主从复制</strong> 是实现读写分离的基础，确保主库和从库之间的数据一致性。</li><li><strong>读写分离</strong> 通过引入中间件（如 MyCat）实现，提升了系统的并发能力和高可用性。</li><li><strong>MyCat</strong> 是一种强大的数据库中间件，支持多种主从配置和高可用特性。</li><li>面试中，除了掌握理论，还需要结合实践，能够清晰地描述配置步骤和原理。</li></ul><p><img src="`+as+`" alt="image-20250517091140870"></p><h1 id="%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E5%AE%9E%E8%B7%B5(%E4%B8%80)" tabindex="-1">读写分离实践(一) <a class="header-anchor" href="#读写分离实践(一)" aria-label="Permalink to &quot;读写分离实践(一)&quot;">​</a></h1><h2 id="%E5%8A%A8%E6%80%81ip" tabindex="-1">动态ip <a class="header-anchor" href="#动态ip" aria-label="Permalink to &quot;动态ip&quot;">​</a></h2><blockquote><p>容易出现 下次 出现问题, 因为</p><h3 id="%E5%8A%A8%E6%80%81%20ip%20%E6%9C%89%E6%97%B6%E9%97%B4%E9%99%90%E5%88%B6%2C%20%E4%BC%9A%E8%BF%87%E6%9C%9F%2C%20%E4%BC%9A%E5%8F%98%E5%8C%96" tabindex="-1">动态 ip 有时间限制, 会过期, 会变化 <a class="header-anchor" href="#动态 ip 有时间限制%2C 会过期%2C 会变化" aria-label="Permalink to &quot;动态 ip 有时间限制, 会过期, 会变化&quot;">​</a></h3></blockquote><h2 id="%E7%8E%AF%E5%A2%83-%E5%AF%B9%E6%AF%94%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6" tabindex="-1">环境-对比主从复制 <a class="header-anchor" href="#环境-对比主从复制" aria-label="Permalink to &quot;环境-对比主从复制&quot;">​</a></h2><ul><li><p>主库：wsl2 ubuntu22.04 -- <code>172.21.233.172</code> <s><code>172.21.224.1</code></s> 8.0</p><blockquote><h3 id="%E5%8C%BA%E5%88%AB" tabindex="-1">区别 <a class="header-anchor" href="#区别" aria-label="Permalink to &quot;区别&quot;">​</a></h3><p>mycat 访问 主库 是通过 主库的 ip, 而不是中转ip</p><p>因为 这个实践把 mycat 安装在 主库的服务器上</p></blockquote></li><li><p>从库： windows -- <code>192.168.226.18</code> 8.0</p></li></ul><h2 id="jdk%E7%8E%AF%E5%A2%83" tabindex="-1">jdk环境 <a class="header-anchor" href="#jdk环境" aria-label="Permalink to &quot;jdk环境&quot;">​</a></h2><p>由于 mycat 是java开发, 因此需要 jdk环境</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">java </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--version</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 通用</span></span></code></pre></div><h2 id="%E8%AE%BE%E7%BD%AEip%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5" tabindex="-1">设置ip远程连接 <a class="header-anchor" href="#设置ip远程连接" aria-label="Permalink to &quot;设置ip远程连接&quot;">​</a></h2><p>这里 直接使用 root 可以被 所有 ip 远程连接</p><blockquote><p>// 不使用root, 试一下别的, 用了 root 总是 不太对</p></blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user, host </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mysql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">user</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;root&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>更改 连接信息</p><blockquote><p>创建账户</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> USER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&#39;@</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IDENTIFIED </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;123456&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> USER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&#39;@</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IDENTIFIED </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BY</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;123456&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>授予权限 -- 8.0 不能包含密码</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">grant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> all privileges </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">on</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;root&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;%&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  with</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> grant</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> option</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">grant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> all privileges </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">on</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;user&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;%&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  with</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> grant</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> option</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></blockquote><h2 id="%E5%AE%89%E8%A3%85mycat%E4%B8%AD%E9%97%B4%E4%BB%B6" tabindex="-1">安装mycat中间件 <a class="header-anchor" href="#安装mycat中间件" aria-label="Permalink to &quot;安装mycat中间件&quot;">​</a></h2><blockquote><p>mycat有 1 和 2 两个版本, 先用 1 把</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">wget  ....</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">解压</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mycat 目录</span></span></code></pre></div><h3 id="%E9%87%8D%E7%82%B9%E6%98%AF%20%20conf(%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6)%20%E5%92%8C%20log(%E6%97%A5%E5%BF%97)%20" tabindex="-1">重点是 <code>conf(配置文件)</code> 和 <code>log(日志) </code> <a class="header-anchor" href="#重点是  conf(配置文件) 和 log(日志) " aria-label="Permalink to &quot;重点是  \`conf(配置文件)\` 和 \`log(日志) \`&quot;">​</a></h3><h3 id="%E4%B8%BA%E4%BA%86%20%E6%96%B9%E4%BE%BF%E5%90%AF%E5%8A%A8%2C%20%E5%BB%BA%E7%AB%8B%E4%B8%80%E4%B8%AA%20%E8%BD%AF%E9%93%BE%E6%8E%A5" tabindex="-1">为了 方便启动, 建立一个 软链接 <a class="header-anchor" href="#为了 方便启动%2C 建立一个 软链接" aria-label="Permalink to &quot;为了 方便启动, 建立一个 软链接&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ln </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">s ...mycat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mycat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">usr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mycat</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mycat</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">会有提示, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Usage: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">usr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mycat { console | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">dump</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div></blockquote><h2 id="%E6%9F%A5%E7%9C%8Bmycat%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6" tabindex="-1">查看mycat配置文件 <a class="header-anchor" href="#查看mycat配置文件" aria-label="Permalink to &quot;查看mycat配置文件&quot;">​</a></h2><blockquote><h3 id="server.xml" tabindex="-1"><code>server.xml</code> <a class="header-anchor" href="#server.xml" aria-label="Permalink to &quot;\`server.xml\`&quot;">​</a></h3><ol><li><p><strong>作用</strong>：</p><ul><li>配置 MyCat 的登录账号信息。</li><li>设置客户端连接 MyCat 的<strong>用户名、密码，以及 IP 白名单和黑名单</strong>。--- 功能很多, 很强大</li></ul></li><li><p><strong>主要内容</strong>：</p><ul><li><p><strong>用户配置</strong>：定义登录 MyCat 的用户名和密码，例如：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">user</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">property</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;123456&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p><strong>IP 限制</strong>：通过 <code>whitehost</code> 和 <code>blackhost</code> 属性限制客户端连接来源。</p></li></ul></li><li><p><strong>注意事项</strong>：</p><ul><li><h3 id="%E7%A1%AE%E4%BF%9D%20XML%20%E6%A0%BC%E5%BC%8F%E6%AD%A3%E7%A1%AE%EF%BC%88%E5%A6%82%E5%B0%96%E6%8B%AC%E5%8F%B7%E5%92%8C%E6%B3%A8%E9%87%8A%E7%AC%A6%E5%8F%B7%EF%BC%89%E3%80%82" tabindex="-1">确保 XML 格式正确（如尖括号和注释符号）。 <a class="header-anchor" href="#确保 XML 格式正确（如尖括号和注释符号）。" aria-label="Permalink to &quot;确保 XML 格式正确（如尖括号和注释符号）。&quot;">​</a></h3></li><li>如果配置错误，MyCat 服务可能无法启动，可通过日志排查问题。</li></ul></li><li><p><strong>位置</strong>：</p><ul><li>配置文件位于 MyCat 的 <code>conf</code> 目录下。</li></ul></li></ol></blockquote><h1 id="25-05-17" tabindex="-1">25-05-17 <a class="header-anchor" href="#25-05-17" aria-label="Permalink to &quot;25-05-17&quot;">​</a></h1><h1 id="%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E5%AE%9E%E8%B7%B5(%E4%BA%8C)" tabindex="-1">读写分离实践(二) <a class="header-anchor" href="#读写分离实践(二)" aria-label="Permalink to &quot;读写分离实践(二)&quot;">​</a></h1><h2 id="mycat%E9%85%8D%E7%BD%AE-server.xml" tabindex="-1">mycat配置-server.xml <a class="header-anchor" href="#mycat配置-server.xml" aria-label="Permalink to &quot;mycat配置-server.xml&quot;">​</a></h2><p>需要在 配置文件中修改</p><blockquote><p><strong><code>server.xml</code></strong>：</p><ul><li><strong>作用</strong>：配置 MyCat 的登录账号信息和逻辑库。</li><li>主要内容 <ul><li>登录 MyCat 的用户名和密码。</li><li>配置逻辑库名称（如 <code>userdb</code>）。</li><li>支持 IP 白名单和黑名单，限制客户端连接来源。</li></ul></li></ul></blockquote><blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vim mycat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">conf</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">xml</span></span></code></pre></div><h3 id="%E9%85%8D%E7%BD%AE%20%E7%99%BB%E5%BD%95%20mycat%20%E8%B4%A6%E6%88%B7%E5%AF%86%E7%A0%81" tabindex="-1">配置 登录 mycat 账户密码 <a class="header-anchor" href="#配置 登录 mycat 账户密码" aria-label="Permalink to &quot;配置 登录 mycat 账户密码&quot;">​</a></h3><h3 id="%E9%85%8D%E7%BD%AE%20%E9%80%BB%E8%BE%91%E5%BA%93" tabindex="-1">配置 逻辑库 <a class="header-anchor" href="#配置 逻辑库" aria-label="Permalink to &quot;配置 逻辑库&quot;">​</a></h3><ul><li>由于客户端通过 <code>mycat</code> 连接 <code>mysql</code> , <code>mycat</code> 直接操作的 就是 <code>逻辑库</code>, 一个<code>不存在</code>的库, 这个库 会 <code>映射</code>到 <code>mysql</code>上</li><li>逻辑库是 MyCat 中的一个概念，指的是客户端操作的虚拟数据库。逻辑库并不直接对应物理数据库，而是通过 MyCat 的配置将其映射到后端的一个或多个物理数据库。</li><li>多个,用 逗号 隔开</li></ul><p><img src="`+ls+'" alt="image-20250517090323804"></p></blockquote><h2 id="%E9%94%99%E8%AF%AF-1" tabindex="-1">错误 <a class="header-anchor" href="#错误-1" aria-label="Permalink to &quot;错误&quot;">​</a></h2><p>注意, 尽管 从库 未开起 slave, 开启后 也会 进行 主库 这段时间的 操作</p><h2 id="schema.xml%E7%90%86%E8%A7%A3" tabindex="-1"><code>schema.xml</code>理解 <a class="header-anchor" href="#schema.xml理解" aria-label="Permalink to &quot;`schema.xml`理解&quot;">​</a></h2><blockquote><ul><li><strong>作用</strong>：配置<code>读写分离</code>、<code>分库分表</code>和<code>数据节点</code>。</li><li>主要内容 <ul><li><strong>逻辑库和逻辑表</strong>：客户端操作的虚拟库表，最终映射到物理库表。</li><li><strong>数据节点（data node）</strong>：定义逻辑库表与物理库表的映射关系。</li><li><strong>物理数据库（data host）</strong>：配置主库（master）和从库（slave）的 IP、端口、账号和密码。</li></ul></li></ul></blockquote><blockquote><h3 id="%E5%AD%97%E6%AE%B5%E8%A7%A3%E9%87%8A" tabindex="-1">字段解释 <a class="header-anchor" href="#字段解释" aria-label="Permalink to &quot;字段解释&quot;">​</a></h3><p><code>schema name</code>: 逻辑库</p><p><code>dataNode name</code>:存储节点 --- 这个的 database 必须是 实际的 要映射的 库</p><p><code>dataHost name</code>:数据库主机</p><p><code>maxcon, mincon</code> --- 最大最小连接量 --- 其内部 自带了 连接池 功能</p><p><code>blance</code>: 一般为 3</p><ul><li>控制读写分离的策略： <ul><li><code>0</code>：不开启读写分离。</li><li><code>1</code>：主库和从库都参与读操作。</li><li><code>3</code>：主库只负责写操作，从库负责读操作（推荐）。</li></ul></li></ul><p><strong>容灾切换</strong>：</p><ul><li><code>switchType</code> 参数 <ul><li><code>1</code>：基于心跳检测（mycat发送<code>SELECT USER()</code>,接收成功, 就没挂）。</li><li><code>2</code>：基于主从同步状态（<code>SHOW SLAVE STATUS</code>）。</li></ul></li><li>当主库挂掉时，MyCat 会自动切换到从库或备用主库。</li></ul><p><code>writetype</code>: 0 挂没挂怎么知道</p><h3 id="%E5%BF%83%E8%B7%B3!!" tabindex="-1">心跳!! <a class="header-anchor" href="#心跳!!" aria-label="Permalink to &quot;心跳!!&quot;">​</a></h3><p><img src="'+ts+'" alt="image-20250517112619284"></p><h3 id="%E8%BF%99%E9%87%8C%20%E8%A6%81%20%E4%BF%AE%E6%94%B9%20blance" tabindex="-1">这里 要 <code>修改</code> <code>blance</code> <a class="header-anchor" href="#这里 要 修改 blance" aria-label="Permalink to &quot;这里 要 `修改` `blance`&quot;">​</a></h3></blockquote><p><img src="'+ns+'" alt="image-20250517104505325"></p><blockquote><p>这里 writehost 其实代表 主库</p><p>里面 可以 加一个 readhost 是 从库</p><h3 id="%E8%BF%99%E9%87%8C%E8%AE%BE%E7%BD%AE%20%E4%B8%BB%E4%BB%8E%E5%BA%93%20ip%E5%92%8C%E8%B4%A6%E6%88%B7%20%20--%20%20%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB!!" tabindex="-1">这里设置 主从库 ip和账户 -- <strong>读写分离</strong>!! <a class="header-anchor" href="#这里设置 主从库 ip和账户  --  读写分离!!" aria-label="Permalink to &quot;这里设置 主从库 ip和账户  --  **读写分离**!!&quot;">​</a></h3><p>datahost 里面 配置 一主一从, 一主多从,多住多从</p><p>即 配置</p><h3 id="1%20write%201read" tabindex="-1">1 write 1read <a class="header-anchor" href="#1 write 1read" aria-label="Permalink to &quot;1 write 1read&quot;">​</a></h3><h3 id="1%20write%20%E5%A4%9A%20read" tabindex="-1">1 write 多 read <a class="header-anchor" href="#1 write 多 read" aria-label="Permalink to &quot;1 write 多 read&quot;">​</a></h3><h3 id="%E5%A4%9A%20write%20%E5%A4%9A%20read" tabindex="-1">多 write 多 read <a class="header-anchor" href="#多 write 多 read" aria-label="Permalink to &quot;多 write 多 read&quot;">​</a></h3><p><img src="'+hs+'" alt="image-20250517110415775"></p><p><code>配置一下, 这个 主从</code></p><h3 id="%E7%9C%8B%E4%B8%80%E4%B8%8B%E8%80%81%E5%B8%88%E7%9A%84" tabindex="-1">看一下老师的 <a class="header-anchor" href="#看一下老师的" aria-label="Permalink to &quot;看一下老师的&quot;">​</a></h3><p>正常 两主(写)一从(读)</p><p>备份的 主库(写) 是 从库(读)</p><p><img src="'+es+`" alt="image-20250517111202209"></p><h3 id="%E4%B8%BB%E6%8C%82%E6%8E%89%2C%20%E5%86%85%E9%83%A8%E7%9A%84%E4%BB%8E%20%E4%B9%9F%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%2C%20%E5%BF%85%E9%A1%BB%20%E6%8D%A2%E4%B8%BB" tabindex="-1">主挂掉, 内部的从 也无法使用, 必须 换主 <a class="header-anchor" href="#主挂掉%2C 内部的从 也无法使用%2C 必须 换主" aria-label="Permalink to &quot;主挂掉, 内部的从 也无法使用, 必须 换主&quot;">​</a></h3></blockquote><h2 id="schema.xml%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE-%E6%9C%89%E9%94%99%E8%AF%AF" tabindex="-1"><code>schema.xml</code>修改配置-有错误 <a class="header-anchor" href="#schema.xml修改配置-有错误" aria-label="Permalink to &quot;\`schema.xml\`修改配置-有错误&quot;">​</a></h2><p>![](./1-数据库笔记.assets/屏幕截图 2025-05-17 114118.png)</p><h2 id="%E5%BC%80%E5%90%AFmycat" tabindex="-1">开启mycat <a class="header-anchor" href="#开启mycat" aria-label="Permalink to &quot;开启mycat&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mycat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">start</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">netstat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tanp | grep </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">66</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">有错误, 看日志</span></span></code></pre></div><h2 id="%E9%94%99%E8%AF%AF-1-1" tabindex="-1">错误-1 <a class="header-anchor" href="#错误-1-1" aria-label="Permalink to &quot;错误-1&quot;">​</a></h2><p><code>mycat.log</code> <code>wrapper.log</code></p><p>没有 logs 文件夹, 创建一个 就好了</p><h2 id="%E9%94%99%E8%AF%AF-2--%E7%89%B9%E5%88%AB%E6%B3%A8%E6%84%8F-%E8%80%81%E5%B8%88%E6%B2%A1%E8%AF%B4" tabindex="-1">错误-2--特别注意-老师没说 <a class="header-anchor" href="#错误-2--特别注意-老师没说" aria-label="Permalink to &quot;错误-2--特别注意-老师没说&quot;">​</a></h2><blockquote><p>显示 ip:port 无效</p><p>看一下 <code>dbDriver=&quot;jdbc&quot;</code></p><p>这个 如果是这个 就需要完整的 <code>jdbc:mysql://...</code></p><h3 id="%E6%94%B9%E6%88%90%20native!!!!!" tabindex="-1">改成 <code>native</code>!!!!! <a class="header-anchor" href="#改成 native!!!!!" aria-label="Permalink to &quot;改成 \`native\`!!!!!&quot;">​</a></h3></blockquote><h2 id="%E9%94%99%E8%AF%AF3-%E6%A8%A1%E6%9D%BF%E9%97%AE%E9%A2%98" tabindex="-1">错误3-模板问题 <a class="header-anchor" href="#错误3-模板问题" aria-label="Permalink to &quot;错误3-模板问题&quot;">​</a></h2><blockquote><p>模板给的 <code>randomDataNode</code> 是配置 分表分片的</p><p>我们不搞这个, 要改为 和下面 节点标签一样的 <code>dataNode</code></p><h3 id="%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99!!!" tabindex="-1"><strong>区分大小写!!!</strong> <a class="header-anchor" href="#区分大小写!!!" aria-label="Permalink to &quot;**区分大小写!!!**&quot;">​</a></h3></blockquote><h2 id="%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE-%E6%AD%A3%E7%A1%AE" tabindex="-1">修改配置-正确 <a class="header-anchor" href="#修改配置-正确" aria-label="Permalink to &quot;修改配置-正确&quot;">​</a></h2><p>![](./1-数据库笔记.assets/屏幕截图 2025-05-17 135609.png)</p><h2 id="%E8%87%B3%E6%AD%A4%2C%20mycat%E6%AD%A3%E7%A1%AE%E8%BF%90%E8%A1%8C" tabindex="-1">至此, mycat正确运行 <a class="header-anchor" href="#至此%2C mycat正确运行" aria-label="Permalink to &quot;至此, mycat正确运行&quot;">​</a></h2><h2 id="%E6%9C%89%E5%85%B4%E8%B6%A3%E5%8F%AF%E4%BB%A5%E7%A0%94%E7%A9%B6%E7%A0%94%E7%A9%B6%E5%88%AB%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6" tabindex="-1">有兴趣可以研究研究别的中间件 <a class="header-anchor" href="#有兴趣可以研究研究别的中间件" aria-label="Permalink to &quot;有兴趣可以研究研究别的中间件&quot;">​</a></h2><p>vitess 配置读写分离</p><p>proxysql 配置读写分离</p><h1 id="%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E5%AE%9E%E8%B7%B5(%E4%B8%89)" tabindex="-1">读写分离实践(三) <a class="header-anchor" href="#读写分离实践(三)" aria-label="Permalink to &quot;读写分离实践(三)&quot;">​</a></h1><h2 id="%E6%80%8E%E4%B9%88%E7%94%A8mycat" tabindex="-1">怎么用mycat <a class="header-anchor" href="#怎么用mycat" aria-label="Permalink to &quot;怎么用mycat&quot;">​</a></h2><ul><li><h4 id="%E6%95%B0%E6%8D%AE%E7%AB%AF%E5%8F%A3%EF%BC%888066%EF%BC%89%EF%BC%9A%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%80%9A%E8%BF%87%E8%AF%A5%E7%AB%AF%E5%8F%A3%E8%AE%BF%E9%97%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E3%80%82-1" tabindex="-1"><strong>数据端口（8066）</strong>：客户端通过该端口访问数据库。 <a class="header-anchor" href="#数据端口（8066）：客户端通过该端口访问数据库。-1" aria-label="Permalink to &quot;**数据端口（8066）**：客户端通过该端口访问数据库。&quot;">​</a></h4></li><li><h4 id="%E7%AE%A1%E7%90%86%E7%AB%AF%E5%8F%A3%EF%BC%889066%EF%BC%89%EF%BC%9A%E7%94%A8%E4%BA%8E%E6%9F%A5%E7%9C%8B%20MyCat%20%E7%9A%84%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81%E5%92%8C%E5%90%8E%E7%AB%AF%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E8%BF%9E%E6%8E%A5%E7%8A%B6%E6%80%81%E3%80%82-1" tabindex="-1"><strong>管理端口（9066）</strong>：用于查看 MyCat 的运行状态和后端数据库的连接状态。 <a class="header-anchor" href="#管理端口（9066）：用于查看 MyCat 的运行状态和后端数据库的连接状态。-1" aria-label="Permalink to &quot;**管理端口（9066）**：用于查看 MyCat 的运行状态和后端数据库的连接状态。&quot;">​</a></h4></li></ul><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">172</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">21</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">233</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">172</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">P </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9066</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">u </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">root</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p123456</span></span></code></pre></div><div class="important custom-block github-alert"><p class="custom-block-title">IMPORTANT</p><p></p><h3 id="%E8%BF%99%E4%B8%8D%E6%98%AF%E5%9C%A8%E7%99%BB%E9%99%86%20%E4%B8%BB%E6%9C%BA%20mysql" tabindex="-1">这不是在登陆 主机 mysql <a class="header-anchor" href="#这不是在登陆 主机 mysql" aria-label="Permalink to &quot;这不是在登陆 主机 mysql&quot;">​</a></h3><h3 id="%E8%80%8C%E6%98%AF%E7%99%BB%E5%BD%95%20mycat!!!%20%E4%B8%94%E6%98%AF%20%E7%AE%A1%E7%90%86%E7%AB%AF%E5%8F%A3" tabindex="-1">而是登录 mycat!!! 且是 管理端口 <a class="header-anchor" href="#而是登录 mycat!!! 且是 管理端口" aria-label="Permalink to &quot;而是登录 mycat!!! 且是 管理端口&quot;">​</a></h3><p>账户是 server.xml 配置的</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">29</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mycat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">release</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20200422133810</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyCat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (monitor)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">monitor </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">--- 监控</span></span></code></pre></div></div><h2 id="%E7%AE%A1%E7%90%86%E7%AB%AF%E6%93%8D%E4%BD%9C" tabindex="-1">管理端操作 <a class="header-anchor" href="#管理端操作" aria-label="Permalink to &quot;管理端操作&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show @@help;</span></span></code></pre></div><p><img src="`+Es+`" alt="image-20250517141020083"></p><blockquote><p>其余自己看看</p></blockquote><h2 id="%E6%95%B0%E6%8D%AE%E7%AB%AF%E5%8F%A3" tabindex="-1">数据端口 <a class="header-anchor" href="#数据端口" aria-label="Permalink to &quot;数据端口&quot;">​</a></h2><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mysql </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">172</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">21</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">233</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">172</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">P </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8066</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">u user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p123456</span></span></code></pre></div><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">29</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mycat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">release</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20200422133810</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyCat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (OpenCloudDB)</span></span></code></pre></div><p>与 mysql 操作 一样, 不过 目前只有一个 逻辑库 可用</p><h2 id="%E9%94%99%E8%AF%AF-1-2" tabindex="-1">错误-1 <a class="header-anchor" href="#错误-1-2" aria-label="Permalink to &quot;错误-1&quot;">​</a></h2><blockquote><p>win 那边 可能没配置 远程连接mysql</p></blockquote><p>修改配置文件</p><p>win 的 &quot;C:\\ProgramData\\MySQL\\MySQL Server 8.0\\my.ini&quot;</p><p>添加就行</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 设置端口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">port</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3306</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 允许远程连接</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bind</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-address=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span></code></pre></div><p>问题类似<a href="##无法远程连接-配置文件">无法远程连接-配置文件</a></p><p>mysql 远程连接测试一下</p><h2 id="%E9%94%99%E8%AF%AF-2-%E9%AB%98%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98" tabindex="-1">错误-2-高版本问题 <a class="header-anchor" href="#错误-2-高版本问题" aria-label="Permalink to &quot;错误-2-高版本问题&quot;">​</a></h2><p>学看这个错误</p><blockquote><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">errmsg: Client does </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> support </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">authentication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> protocol requested </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> server</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 仔细找</span></span></code></pre></div></blockquote><blockquote><h3 id="mysql%20%E7%89%88%E6%9C%AC%E5%A4%AA%E9%AB%98" tabindex="-1">mysql 版本太高 <a class="header-anchor" href="#mysql 版本太高" aria-label="Permalink to &quot;mysql 版本太高&quot;">​</a></h3><ul><li><p><strong>MySQL 8.0+ 使用了默认的 <code>caching_sha2_password</code> 身份验证插件</strong>；</p></li><li><p>而 <strong>MyCat 还不支持这种新认证协议</strong>，只支持旧的 <code>mysql_native_password</code>。</p></li><li></li><li><table tabindex="0"><thead><tr><th>插件名称</th><th>含义说明</th><th>MySQL 版本</th></tr></thead><tbody><tr><td><code>mysql_native_password</code></td><td>传统的认证方式，MyCat 支持</td><td>MySQL 5.x 默认</td></tr><tr><td><code>caching_sha2_password</code></td><td>更安全的新认证方式，MySQL 8 默认使用</td><td>MySQL 8+ 默认</td></tr><tr><td><code>sha256_password</code></td><td>使用更复杂加密的认证方式</td><td>可选</td></tr></tbody></table></li></ul></blockquote><blockquote><h2 id="%E8%A7%A3%E5%86%B3" tabindex="-1">解决 <a class="header-anchor" href="#解决" aria-label="Permalink to &quot;解决&quot;">​</a></h2><p><strong>告诉 MySQL 用旧门禁方式（mysql_native_password）再发一次通行证</strong>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ALTER USER &#39;user&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;123456&#39;;</span></span>
<span class="line"><span>FLUSH PRIVILEGES;</span></span></code></pre></div><h2 id="%E6%B3%A8%E6%84%8F-4" tabindex="-1">注意 <a class="header-anchor" href="#注意-4" aria-label="Permalink to &quot;注意&quot;">​</a></h2><p>这样的话, 主库 也要这么做, 不然 配置的 主写节点1 默认 就挂了</p></blockquote><h2 id="%E6%80%8E%E4%B9%88%E7%9C%8B%E6%9F%A5%E8%AF%A2%E7%9A%84%E6%98%AF%E4%BB%8E%E5%BA%93%E5%91%A2" tabindex="-1">怎么看查询的是从库呢 <a class="header-anchor" href="#怎么看查询的是从库呢" aria-label="Permalink to &quot;怎么看查询的是从库呢&quot;">​</a></h2><p>使用查询日志</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">show variables </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">like</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;general%&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;    </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">//</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 有显示日志文件名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> global</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> general_log</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>这个图里 有 错误日志, 查询日志, 二进制日志, 延迟日志, 慢查询日志</p><p><img src="`+ps+'" alt="image-20250517173754010"></p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">slect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user;</span></span></code></pre></div><p><img src="'+ks+`" alt="image-20250517174100688"></p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">insert into</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user(id, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;aaa&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bbb&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="%E9%94%99%E8%AF%AF3" tabindex="-1">错误3 <a class="header-anchor" href="#错误3" aria-label="Permalink to &quot;错误3&quot;">​</a></h2><p>为什么测试的 都是 从库在 读写?</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mysql </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">172</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">21</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">233</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">172</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">u </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">root</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">使用类似的,  先看看 都能不能连接,   可能是 之前出问题, 进入黑名单了</span></span></code></pre></div><blockquote><h3 id="%E8%BF%99%E9%87%8C%20%E6%B5%8B%E4%B8%89%E4%B8%AA" tabindex="-1">这里 测三个 <a class="header-anchor" href="#这里 测三个" aria-label="Permalink to &quot;这里 测三个&quot;">​</a></h3><p>主 -&gt; 从</p><p>从 -&gt; 主</p><p>mycat所在服务器ip-&gt;主</p></blockquote><h1 id="%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB%E9%94%99%E8%AF%AF%E5%BE%88%E5%A4%9A" tabindex="-1">主从复制读写分离错误很多 <a class="header-anchor" href="#主从复制读写分离错误很多" aria-label="Permalink to &quot;主从复制读写分离错误很多&quot;">​</a></h1><blockquote><p>有时间 重新 配一个, 重新写个 新步骤</p><p>复习的 时候 汇总一下 问题</p><h1 id="%E5%A4%AA%E6%81%B6%E5%BF%83%E4%BA%86!!!!!!!!!!!!!!!!!!!!!!!!!!!" tabindex="-1">太恶心了!!!!!!!!!!!!!!!!!!!!!!!!!!! <a class="header-anchor" href="#太恶心了!!!!!!!!!!!!!!!!!!!!!!!!!!!" aria-label="Permalink to &quot;太恶心了!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;">​</a></h1></blockquote><h1 id="%E6%89%A9%E5%B1%95-mysql%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8" tabindex="-1">扩展-mysql分库分表 <a class="header-anchor" href="#扩展-mysql分库分表" aria-label="Permalink to &quot;扩展-mysql分库分表&quot;">​</a></h1><h2 id="%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%EF%BC%9F" tabindex="-1">为什么需要分库分表？ <a class="header-anchor" href="#为什么需要分库分表？" aria-label="Permalink to &quot;为什么需要分库分表？&quot;">​</a></h2><ul><li><h3 id="%E5%8D%95%E5%BA%93%E7%93%B6%E9%A2%88%EF%BC%9A" tabindex="-1"><strong>单库瓶颈</strong>： <a class="header-anchor" href="#单库瓶颈：" aria-label="Permalink to &quot;**单库瓶颈**：&quot;">​</a></h3><ul><li><strong>数据量过大</strong>导致磁盘<strong>空间不足、IO 瓶</strong>颈。</li><li><strong>单表数据量过大</strong>，<strong>CURD 效率低</strong>，<strong>索引膨胀</strong>，查询超时。</li><li>单库<strong>中表过多</strong>，管理复杂，性能下降。</li></ul></li><li><h3 id="%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%9A" tabindex="-1"><strong>解决方案</strong>： <a class="header-anchor" href="#解决方案：" aria-label="Permalink to &quot;**解决方案**：&quot;">​</a></h3><ul><li><strong>垂直拆分</strong>：根据业务模块将表分布到不同的库中。</li><li><strong>水平拆分</strong>：将单表的数据按规则拆分到多个表中。</li></ul></li></ul><hr><h2 id="MyCat%20%E5%9C%A8%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%BA%94%E7%94%A8" tabindex="-1">MyCat 在分库分表应用 <a class="header-anchor" href="#MyCat 在分库分表应用" aria-label="Permalink to &quot;MyCat 在分库分表应用&quot;">​</a></h2><blockquote><h3 id="%E6%9C%AC%E8%BA%AB%E5%B0%B1%E6%98%AF%E4%B8%BA%E4%BA%86%E8%A7%A3%E5%86%B3**%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%EF%BC%88%E5%8D%B3%E6%95%B0%E6%8D%AE%E6%B0%B4%E5%B9%B3%E6%8B%86%E5%88%86%EF%BC%89**%E8%80%8C%E8%AE%BE%E8%AE%A1%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E3%80%82" tabindex="-1">本身就是为了解决**数据库分库分表（即数据水平拆分）**而设计的中间件。 <a class="header-anchor" href="#本身就是为了解决**数据库分库分表（即数据水平拆分）**而设计的中间件。" aria-label="Permalink to &quot;本身就是为了解决**数据库分库分表（即数据水平拆分）**而设计的中间件。&quot;">​</a></h3></blockquote><ul><li><p><strong>逻辑与物理分离</strong>：</p><ul><li>客户端操作的是逻辑库和逻辑表。</li><li>MyCat 负责将逻辑库表映射到真实的物理库表。</li></ul></li><li><p><strong>分库分表的透明性</strong>：</p><ul><li>客户端无需关心数据分布，MyCat <strong>自动处理查询分发和结果合并</strong>。</li></ul></li><li><h3 id="%E6%94%AF%E6%8C%81%E5%A4%9A%E7%A7%8D%E6%8B%86%E5%88%86%E8%A7%84%E5%88%99%EF%BC%9A" tabindex="-1"><strong>支持多种拆分规则</strong>： <a class="header-anchor" href="#支持多种拆分规则：" aria-label="Permalink to &quot;**支持多种拆分规则**：&quot;">​</a></h3><ul><li><h4 id="%E5%A6%82%E4%B8%BB%E9%94%AE%E5%8F%96%E6%A8%A1%E3%80%81%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E3%80%81%E6%97%B6%E9%97%B4%E5%88%86%E7%89%87%E7%AD%89%E3%80%82" tabindex="-1">如<strong>主键取模</strong>、<strong>一致性哈希</strong>、<strong>时间分片</strong>等。 <a class="header-anchor" href="#如主键取模、一致性哈希、时间分片等。" aria-label="Permalink to &quot;如**主键取模**、**一致性哈希**、**时间分片**等。&quot;">​</a></h4></li></ul></li></ul><h2 id="%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%8F%8A%E7%AD%96%E7%95%A5" tabindex="-1">分库分表的两种方式及策略 <a class="header-anchor" href="#分库分表的两种方式及策略" aria-label="Permalink to &quot;分库分表的两种方式及策略&quot;">​</a></h2><blockquote><h4 id="%E5%9E%82%E7%9B%B4%E6%8B%86%E5%88%86" tabindex="-1"><strong>垂直拆分</strong> <a class="header-anchor" href="#垂直拆分" aria-label="Permalink to &quot;**垂直拆分**&quot;">​</a></h4><ul><li><p><strong>定义</strong>：根据业务模块将表分布到不同的库中。</p></li><li><h3 id="%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9A%E5%BA%93%E4%B8%AD%E8%A1%A8%E8%BF%87%E5%A4%9A%EF%BC%8C%E4%B8%94%E8%A1%A8%E4%B9%8B%E9%97%B4%E4%B8%9A%E5%8A%A1%E5%85%B3%E8%81%94%E6%80%A7%E8%BE%83%E4%BD%8E%E3%80%82" tabindex="-1"><strong>适用场景</strong>：库中表过多，且表之间业务关联性较低。 <a class="header-anchor" href="#适用场景：库中表过多，且表之间业务关联性较低。" aria-label="Permalink to &quot;**适用场景**：库中表过多，且表之间业务关联性较低。&quot;">​</a></h3></li></ul><h4 id="%E6%B0%B4%E5%B9%B3%E6%8B%86%E5%88%86" tabindex="-1"><strong>水平拆分</strong> <a class="header-anchor" href="#水平拆分" aria-label="Permalink to &quot;**水平拆分**&quot;">​</a></h4><ul><li><p><strong>定义</strong>：将单表的数据按规则拆分到多个表中。</p></li><li><h3 id="%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF%EF%BC%9A%E5%8D%95%E8%A1%A8%E6%95%B0%E6%8D%AE%E9%87%8F%E8%BF%87%E5%A4%A7%EF%BC%8C%E5%AF%BC%E8%87%B4%E6%80%A7%E8%83%BD%E9%97%AE%E9%A2%98%E3%80%82" tabindex="-1"><strong>适用场景</strong>：单表数据量过大，导致性能问题。 <a class="header-anchor" href="#适用场景：单表数据量过大，导致性能问题。" aria-label="Permalink to &quot;**适用场景**：单表数据量过大，导致性能问题。&quot;">​</a></h3></li></ul><h3 id="%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7" tabindex="-1">分库分表的优先级 <a class="header-anchor" href="#分库分表的优先级" aria-label="Permalink to &quot;分库分表的优先级&quot;">​</a></h3><ul><li><strong>优先垂直拆分</strong>： <ul><li>先根据业务模块拆分库，减少单库的表数量。</li></ul></li><li><strong>再考虑水平拆分</strong>： <ul><li>当单表数据量过大时，再对表进行水平拆分。</li></ul></li></ul></blockquote><hr><h2 id="%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90" tabindex="-1">配置文件解析 <a class="header-anchor" href="#配置文件解析" aria-label="Permalink to &quot;配置文件解析&quot;">​</a></h2><ul><li><strong>server.xml</strong>：配置逻辑库和数据节点。</li><li><strong>schema.xml</strong>：定义逻辑库、逻辑表及其映射关系。</li><li><h3 id="rule.xml%EF%BC%9A%E5%AE%9A%E4%B9%89%E5%88%86%E8%A1%A8%E8%A7%84%E5%88%99%E3%80%82" tabindex="-1"><strong>rule.xml</strong>：定义分表规则。 <a class="header-anchor" href="#rule.xml：定义分表规则。" aria-label="Permalink to &quot;**rule.xml**：定义分表规则。&quot;">​</a></h3></li></ul><h2 id="%E7%A4%BA%E4%BE%8B%E9%85%8D%E7%BD%AE" tabindex="-1">示例配置 <a class="header-anchor" href="#示例配置" aria-label="Permalink to &quot;示例配置&quot;">​</a></h2><ul><li><p><strong>垂直拆分</strong>：</p></li><li><p>将不同业务的表分配到不同的逻辑库。</p></li><li><p>每个逻辑库映射到不同的物理数据库。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- schema.xml --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">schema</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user_db1&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dataNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dn1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">schema</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user_db2&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dataNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dn2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div></li><li><p><strong>水平拆分</strong>：</p></li><li><p>按照某种规则（如主键取模、时间分片等）将数据分布到多个表。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- schema.xml --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">table</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;student&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> primaryKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> autoIncrement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dataNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dn1,dn2&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;modRule&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div></li></ul><h2 id="%E5%AE%9E%E8%B7%B5" tabindex="-1">实践 <a class="header-anchor" href="#实践" aria-label="Permalink to &quot;实践&quot;">​</a></h2><blockquote><p>不实践了, 有时间再说, 就是 配置文件</p></blockquote><blockquote><h3 id="%E5%85%88%E5%85%B3%E9%97%AD%20%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%20%2C%20%E7%9B%AE%E5%89%8D%E4%B8%8D%E9%9C%80%E8%A6%81" tabindex="-1">先关闭 主从复制 , 目前不需要 <a class="header-anchor" href="#先关闭 主从复制 %2C 目前不需要" aria-label="Permalink to &quot;先关闭 主从复制 , 目前不需要&quot;">​</a></h3><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> slave;</span></span></code></pre></div></blockquote><blockquote><h3 id="server.xml-1" tabindex="-1"><code>server.xml</code> <a class="header-anchor" href="#server.xml-1" aria-label="Permalink to &quot;\`server.xml\`&quot;">​</a></h3><p>添加 两个 逻辑库</p><p><img src="`+rs+'" alt="image-20250517214804528"></p><h3 id="schema.xml" tabindex="-1"><code>schema.xml</code> <a class="header-anchor" href="#schema.xml" aria-label="Permalink to &quot;`schema.xml`&quot;">​</a></h3><p>对应的 两个逻辑库</p><p><img src="'+ds+'" alt="image-20250517215644931"></p><p>balance为 0</p></blockquote><p><img src="'+os+`" alt="image-20250517215214058"></p><blockquote><h3 id="6.%20%E7%A4%BA%E4%BE%8B%E5%9C%BA%E6%99%AF" tabindex="-1"><strong>6. 示例场景</strong> <a class="header-anchor" href="#6. 示例场景" aria-label="Permalink to &quot;**6. 示例场景**&quot;">​</a></h3><ul><li><strong>垂直拆分</strong>： <ul><li>将 <code>user</code> 表和 <code>student</code> 表分布到不同的库中。</li></ul></li><li><strong>水平拆分</strong>： <ul><li>将 <code>student</code> 表的数据按主键取模分布到两台机器上的两个表中。</li></ul></li></ul></blockquote><hr><h2 id="%E6%80%BB%E7%BB%93-27" tabindex="-1">总结 <a class="header-anchor" href="#总结-27" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>分库分表是应对数据库性能瓶颈的重要手段。</li><li>垂直拆分和水平拆分各有适用场景，需根据业务需求选择。</li><li>MyCat 提供了强大的分库分表支持，简化了客户端操作。</li></ul><h1 id="%E4%BA%8C" tabindex="-1">二 <a class="header-anchor" href="#二" aria-label="Permalink to &quot;二&quot;">​</a></h1><h3 id="1.%20MyCat%20%E7%9A%84%E4%BD%9C%E7%94%A8" tabindex="-1"><strong>1. MyCat 的作用</strong> <a class="header-anchor" href="#1. MyCat 的作用" aria-label="Permalink to &quot;**1. MyCat 的作用**&quot;">​</a></h3><ol><li><p><strong>逻辑与物理分离</strong>：</p><ul><li>客户端操作的是逻辑库和逻辑表，MyCat 负责将逻辑库表映射到真实的物理库表。</li><li>通过 MyCat，开发者无需关心数据的实际存储位置。</li></ul></li><li><p><strong>分库分表支持</strong>：</p><ul><li>支持垂直拆分（按业务模块分库）和水平拆分（按规则分表）。</li><li>提供多种分表算法（如取模、时间分片、一致性哈希等），满足不同业务需求。</li></ul></li><li><p><strong>透明性</strong>：</p><ul><li>对客户端透明，客户端只需操作逻辑库表，MyCat 自动完成数据路由、查询分发和结果合并。</li></ul></li><li><p><strong>高可扩展性</strong>：</p><ul><li>通过分库分表，可以将数据分布到多台机器上，降低单机压力，提高系统的并发处理能力。</li></ul></li></ol><hr><h3 id="2.%20%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E7%9A%84%E5%AE%9E%E7%8E%B0" tabindex="-1"><strong>2. 分库分表的实现</strong> <a class="header-anchor" href="#2. 分库分表的实现" aria-label="Permalink to &quot;**2. 分库分表的实现**&quot;">​</a></h3><h4 id="%E5%9E%82%E7%9B%B4%E6%8B%86%E5%88%86-1" tabindex="-1"><strong>垂直拆分</strong> <a class="header-anchor" href="#垂直拆分-1" aria-label="Permalink to &quot;**垂直拆分**&quot;">​</a></h4><ul><li>按业务模块将表分布到不同的库中。</li><li>适用于库中表过多且业务关联性较低的场景。</li></ul><h4 id="%E6%B0%B4%E5%B9%B3%E6%8B%86%E5%88%86-1" tabindex="-1"><strong>水平拆分</strong> <a class="header-anchor" href="#水平拆分-1" aria-label="Permalink to &quot;**水平拆分**&quot;">​</a></h4><ul><li>按规则（如主键取模）将单表的数据分布到多个表中。</li><li>适用于单表数据量过大的场景。</li></ul><hr><h3 id="3.%20%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E5%85%B3%E9%94%AE%E7%82%B9" tabindex="-1"><strong>3. 配置文件的关键点</strong> <a class="header-anchor" href="#3. 配置文件的关键点" aria-label="Permalink to &quot;**3. 配置文件的关键点**&quot;">​</a></h3><ol><li><p><strong><code>schema.xml</code></strong>：</p><ul><li>定义逻辑库、逻辑表及其映射关系。</li><li>示例：<div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">table</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;student&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> primaryKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> autoIncrement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dataNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dn1,dn2&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;modRule&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div></li></ul></li><li><p><strong><code>rule.xml</code></strong>：</p><ul><li>定义分表规则。</li><li>示例：<div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;modRule&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.mycat.route.function.PartitionByMod&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">property</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;2&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li></ul></li><li><p><strong><code>server.xml</code></strong>：</p><ul><li>配置数据节点和物理数据库。</li></ul></li></ol><hr><h3 id="4.%20%E7%A4%BA%E4%BE%8B%E5%9C%BA%E6%99%AF" tabindex="-1"><strong>4. 示例场景</strong> <a class="header-anchor" href="#4. 示例场景" aria-label="Permalink to &quot;**4. 示例场景**&quot;">​</a></h3><ul><li><strong>水平拆分</strong>： <ul><li>将 <code>student</code> 表的数据按主键取模分布到两台机器上的两个表中。</li><li>插入数据时，MyCat 根据主键和分表规则决定数据存储位置。</li><li>查询数据时，MyCat 自动在所有分表中查询并合并结果。</li></ul></li></ul><hr><h3 id="5.%20%E4%BC%98%E5%8A%BF" tabindex="-1"><strong>5. 优势</strong> <a class="header-anchor" href="#5. 优势" aria-label="Permalink to &quot;**5. 优势**&quot;">​</a></h3><ul><li><strong>性能提升</strong>：通过分库分表降低单机压力，提高并发能力。</li><li><strong>扩展性强</strong>：可以随时增加数据节点，扩展系统容量。</li><li><strong>开发简单</strong>：开发者只需操作逻辑库表，无需关心底层数据分布。</li></ul><hr><h3 id="6.%20%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9" tabindex="-1"><strong>6. 注意事项</strong> <a class="header-anchor" href="#6. 注意事项" aria-label="Permalink to &quot;**6. 注意事项**&quot;">​</a></h3><ol><li><p><strong>分表规则的选择</strong>：</p><ul><li>根据业务特点选择合适的分表规则（如取模、时间分片等）。</li><li>分表规则一旦确定，后续修改会比较复杂。</li></ul></li><li><p><strong>配置文件的正确性</strong>：</p><ul><li>配置文件（如 <code>schema.xml</code>、<code>rule.xml</code>）需要严格按照 MyCat 的格式和要求编写。</li><li>修改配置后需要重启 MyCat，并检查日志确认是否启动成功。</li></ul></li><li><p><strong>数据一致性</strong>：</p><ul><li>分库分表后，事务和数据一致性需要通过业务逻辑或分布式事务框架来保证。</li></ul></li></ol><hr><h3 id="%E6%80%BB%E7%BB%93-28" tabindex="-1"><strong>总结</strong> <a class="header-anchor" href="#总结-28" aria-label="Permalink to &quot;**总结**&quot;">​</a></h3><p>MyCat 是分库分表场景中的重要工具，能够有效解决单机数据库的性能瓶颈问题。通过合理的配置和分表规则，可以显著提升系统的并发处理能力和扩展性。在实际应用中，需要根据业务需求选择合适的分库分表策略，并结合 MyCat 的功能进行实现。</p><h1 id="GUI%E5%B7%A5%E5%85%B7" tabindex="-1">GUI工具 <a class="header-anchor" href="#GUI工具" aria-label="Permalink to &quot;GUI工具&quot;">​</a></h1><p>这节课主要讲解了 <strong>MySQL 数据库的图形化界面工具（GUI）</strong>，包括常用的工具 <strong>小海豚（DBeaver 或类似工具）</strong> 和 <strong>Navicat</strong>，以及它们的使用方法和注意事项。以下是内容的总结和关键点提炼：</p><hr><h3 id="1.%20%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%B7%A5%E5%85%B7%EF%BC%9F" tabindex="-1"><strong>1. 为什么使用图形化工具？</strong> <a class="header-anchor" href="#1. 为什么使用图形化工具？" aria-label="Permalink to &quot;**1. 为什么使用图形化工具？**&quot;">​</a></h3><ul><li><strong>简化操作</strong>：相比命令行，图形化工具更直观，适合初学者或不熟悉命令行的用户。</li><li><strong>提高效率</strong>：通过界面化操作，可以快速完成数据库的增删改查、备份、导入导出等操作。</li><li><strong>功能丰富</strong>：支持表设计、数据管理、关系图展示等高级功能。</li></ul><hr><h3 id="2.%20%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%B7%A5%E5%85%B7" tabindex="-1"><strong>2. 常用的图形化工具</strong> <a class="header-anchor" href="#2. 常用的图形化工具" aria-label="Permalink to &quot;**2. 常用的图形化工具**&quot;">​</a></h3><h4 id="%E5%B0%8F%E6%B5%B7%E8%B1%9A%EF%BC%88DBeaver%20%E6%88%96%E7%B1%BB%E4%BC%BC%E5%B7%A5%E5%85%B7%EF%BC%89" tabindex="-1"><strong>小海豚（DBeaver 或类似工具）</strong> <a class="header-anchor" href="#小海豚（DBeaver 或类似工具）" aria-label="Permalink to &quot;**小海豚（DBeaver 或类似工具）**&quot;">​</a></h4><ul><li><strong>特点</strong>： <ul><li>免费、轻量级，占用资源少。</li><li>适合电脑配置较低的用户。</li></ul></li><li><strong>适用场景</strong>： <ul><li>基础的数据库操作，如增删改查、表设计等。</li></ul></li><li><strong>注意事项</strong>： <ul><li>主要运行在 Windows 系统下，Mac 系统用户需自行查找是否有对应版本。</li></ul></li></ul><h4 id="Navicat" tabindex="-1"><strong>Navicat</strong> <a class="header-anchor" href="#Navicat" aria-label="Permalink to &quot;**Navicat**&quot;">​</a></h4><ul><li><strong>特点</strong>： <ul><li>功能强大，支持多种数据库（MySQL、PostgreSQL、SQLite 等）。</li><li>提供高级功能，如数据同步、备份恢复、查询生成器等。</li><li>收费软件，但可以通过试用版或其他方式体验。</li></ul></li><li><strong>适用场景</strong>： <ul><li>需要更复杂的数据库管理功能时。</li></ul></li><li><strong>注意事项</strong>： <ul><li>Navicat 占用资源较多，适合电脑配置较高的用户。</li></ul></li></ul><hr><h3 id="3.%20%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4" tabindex="-1"><strong>3. 图形化工具的使用步骤</strong> <a class="header-anchor" href="#3. 图形化工具的使用步骤" aria-label="Permalink to &quot;**3. 图形化工具的使用步骤**&quot;">​</a></h3><h4 id="1.%20%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%20MySQL%20%E6%95%B0%E6%8D%AE%E5%BA%93" tabindex="-1"><strong>1. 远程连接 MySQL 数据库</strong> <a class="header-anchor" href="#1. 远程连接 MySQL 数据库" aria-label="Permalink to &quot;**1. 远程连接 MySQL 数据库**&quot;">​</a></h4><ul><li><strong>前提</strong>： <ul><li>确保 MySQL 服务所在的服务器（如 Linux）允许远程连接。</li><li>确保防火墙开放了 MySQL 的默认端口（3306）。</li></ul></li><li><strong>步骤</strong>： <ol><li><strong>检查服务器 IP 是否可达</strong>： <ul><li>在 Windows 下打开命令行，使用 <code>ping</code> 命令测试服务器 IP。<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ping</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 192.168.x.x</span></span></code></pre></div></li></ul></li><li><strong>开放防火墙端口</strong>（以 CentOS 为例）： <ul><li>查看当前开放的端口：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --list-ports</span></span></code></pre></div></li><li>开放 3306 端口：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firewall-cmd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --add-port=3306/tcp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --permanent</span></span></code></pre></div></li><li>重启防火墙：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> firewalld</span></span></code></pre></div></li></ul></li><li><strong>测试连接</strong>： <ul><li>在图形化工具中输入服务器 IP、用户名、密码和端口，测试连接是否成功。</li></ul></li></ol></li></ul><h4 id="2.%20%E4%BD%BF%E7%94%A8%E5%9B%BE%E5%BD%A2%E5%8C%96%E5%B7%A5%E5%85%B7%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93" tabindex="-1"><strong>2. 使用图形化工具操作数据库</strong> <a class="header-anchor" href="#2. 使用图形化工具操作数据库" aria-label="Permalink to &quot;**2. 使用图形化工具操作数据库**&quot;">​</a></h4><ul><li><strong>常见功能</strong>： <ul><li><strong>查看数据库和表</strong>：左侧展示所有数据库和表，点击即可查看表结构和数据。</li><li><strong>执行 SQL 语句</strong>：提供 SQL 编辑器，可以直接运行查询语句。<div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> student </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li><li><strong>导入导出数据</strong>： <ul><li>导入：选择 SQL 文件或其他格式文件，将数据导入表中。</li><li>导出：将表数据导出为 SQL 文件或其他格式。</li></ul></li><li><strong>设计表结构</strong>： <ul><li>使用架构设计器（Schema Designer）可视化表与表之间的关系。</li><li>支持主键、外键、联合主键等设计。</li></ul></li></ul></li></ul><hr><h3 id="4.%20%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9-1" tabindex="-1"><strong>4. 注意事项</strong> <a class="header-anchor" href="#4. 注意事项-1" aria-label="Permalink to &quot;**4. 注意事项**&quot;">​</a></h3><ol><li><p><strong>远程连接问题</strong>：</p><ul><li>确保服务器的防火墙已开放 3306 端口。</li><li>确保 MySQL 配置文件（<code>my.cnf</code>）中允许远程连接：<div class="language-ini vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bind-address</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = 0.0.0.0</span></span></code></pre></div>然后重启 MySQL 服务：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> restart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> mysqld</span></span></code></pre></div></li></ul></li><li><p><strong>工具选择</strong>：</p><ul><li>如果电脑配置较低，推荐使用小海豚等轻量级工具。</li><li>如果需要高级功能，可以选择 Navicat。</li></ul></li><li><p><strong>表设计的重要性</strong>：</p><ul><li>在项目开发初期，需详细设计数据库表结构，避免后期频繁修改导致代码变更。</li></ul></li><li><p><strong>术语规范</strong>：</p><ul><li>GUI 是 <strong>Graphical User Interface</strong> 的缩写，表示图形用户界面。</li><li>不要用拼音“归”来代替 GUI。</li></ul></li></ol><hr><h3 id="5.%20%E6%80%BB%E7%BB%93-1" tabindex="-1"><strong>5. 总结</strong> <a class="header-anchor" href="#5. 总结-1" aria-label="Permalink to &quot;**5. 总结**&quot;">​</a></h3><ul><li>图形化工具为数据库操作提供了更直观和高效的方式，适合初学者和需要快速操作的场景。</li><li>小海豚和 Navicat 是两种常用工具，各有优缺点，可根据需求选择。</li><li>在使用图形化工具时，需注意远程连接的配置和数据库表设计的重要性。</li></ul><h1 id="%E7%9C%8B%E6%BA%90%E7%A0%81" tabindex="-1">看源码 <a class="header-anchor" href="#看源码" aria-label="Permalink to &quot;看源码&quot;">​</a></h1><p>这节课主要讲解了 <strong>MySQL 源码的阅读方法</strong>，并介绍了如何使用 <strong>Source Insight</strong> 和其他工具（如 VS Code）来高效地查看和分析源码。以下是内容的总结和关键点提炼：</p><hr><h3 id="1.%20%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E9%98%85%E8%AF%BB%20MySQL%20%E6%BA%90%E7%A0%81%EF%BC%9F" tabindex="-1"><strong>1. 为什么要阅读 MySQL 源码？</strong> <a class="header-anchor" href="#1. 为什么要阅读 MySQL 源码？" aria-label="Permalink to &quot;**1. 为什么要阅读 MySQL 源码？**&quot;">​</a></h3><ul><li><strong>学习优秀设计</strong>： <ul><li>MySQL 是一个成熟的开源项目，源码中包含了许多优秀的设计思想和实现方法。</li><li>通过阅读源码，可以深入理解数据库的核心原理，如存储引擎、索引结构、网络通信等。</li></ul></li><li><strong>理论结合实践</strong>： <ul><li>将前面学习的理论知识与源码实现相结合，理解其背后的逻辑。</li></ul></li><li><strong>提升编程能力</strong>： <ul><li>学习源码的编程风格、模块划分、接口设计等，提升自己的代码质量。</li></ul></li><li><strong>解决疑难问题</strong>： <ul><li>当遇到文档或网络资料无法解答的问题时，可以通过源码找到最权威的答案。</li></ul></li></ul><hr><h3 id="2.%20%E6%BA%90%E7%A0%81%E7%89%88%E6%9C%AC%E5%92%8C%E5%B7%A5%E5%85%B7%E9%80%89%E6%8B%A9" tabindex="-1"><strong>2. 源码版本和工具选择</strong> <a class="header-anchor" href="#2. 源码版本和工具选择" aria-label="Permalink to &quot;**2. 源码版本和工具选择**&quot;">​</a></h3><ul><li><strong>源码版本</strong>： <ul><li>本次课程选择的是 <strong>MySQL 5.1.73</strong> 版本。</li><li>该版本相对稳定，适合学习和研究。</li></ul></li><li><strong>工具选择</strong>： <ul><li><strong>Windows 下</strong>：推荐使用 <strong>Source Insight</strong>。</li><li><strong>Mac/Linux 下</strong>：推荐使用 <strong>VS Code</strong> 或 <strong>JetBrains CLion</strong>。</li><li><strong>Source Insight 的优势</strong>： <ul><li>专为源码阅读设计，支持快速搜索、符号跳转、代码关系图等功能。</li><li>在 Windows 下是查看 C/C++ 源码的首选工具。</li></ul></li></ul></li></ul><hr><h3 id="3.%20Source%20Insight%20%E7%9A%84%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4" tabindex="-1"><strong>3. Source Insight 的使用步骤</strong> <a class="header-anchor" href="#3. Source Insight 的使用步骤" aria-label="Permalink to &quot;**3. Source Insight 的使用步骤**&quot;">​</a></h3><h4 id="1.%20%E5%88%9B%E5%BB%BA%E5%B7%A5%E7%A8%8B" tabindex="-1"><strong>1. 创建工程</strong> <a class="header-anchor" href="#1. 创建工程" aria-label="Permalink to &quot;**1. 创建工程**&quot;">​</a></h4><ol><li>打开 Source Insight，选择 <code>Project &gt; New Project</code>。</li><li>输入工程名称（如 <code>MySQL_Code</code>）。</li><li>设置工程文件的存储路径（可以与源码目录相同）。</li><li>添加源码目录到工程中，点击 <code>Add Tree</code>，将所有源码文件导入。</li></ol><h4 id="2.%20%E5%90%8C%E6%AD%A5%E4%BB%A3%E7%A0%81" tabindex="-1"><strong>2. 同步代码</strong> <a class="header-anchor" href="#2. 同步代码" aria-label="Permalink to &quot;**2. 同步代码**&quot;">​</a></h4><ul><li>在导入源码后，选择 <code>Project &gt; Synchronize Files</code>，等待工具完成文件索引。</li><li>索引完成后，可以通过工具的搜索功能快速定位代码中的符号、函数、变量等。</li></ul><h4 id="3.%20%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD" tabindex="-1"><strong>3. 常用功能</strong> <a class="header-anchor" href="#3. 常用功能" aria-label="Permalink to &quot;**3. 常用功能**&quot;">​</a></h4><ul><li><strong>搜索符号</strong>： <ul><li>使用 <code>Project &gt; Search Project Symbols</code> 搜索函数、变量、宏定义等。</li></ul></li><li><strong>查看调用关系</strong>： <ul><li>右键点击函数名，选择 <code>Relations</code>，查看函数的调用关系（谁调用了它，它调用了谁）。</li></ul></li><li><strong>快速跳转</strong>： <ul><li>按住 <code>Ctrl</code> 并点击符号名，可以快速跳转到定义处。</li></ul></li><li><strong>代码结构图</strong>： <ul><li>使用 <code>Tools &gt; Relation Window</code> 查看代码的模块关系和调用图。</li></ul></li></ul><hr><h3 id="4.%20MySQL%20%E6%BA%90%E7%A0%81%E7%BB%93%E6%9E%84" tabindex="-1"><strong>4. MySQL 源码结构</strong> <a class="header-anchor" href="#4. MySQL 源码结构" aria-label="Permalink to &quot;**4. MySQL 源码结构**&quot;">​</a></h3><ul><li><p><strong>源码目录结构</strong>：</p><ul><li><code>sql/</code>：MySQL 的核心代码，包括 SQL 解析、执行、存储引擎接口等。</li><li><code>storage/</code>：存储引擎相关代码，如 InnoDB、MyISAM 等。</li><li><code>include/</code>：头文件目录，定义了全局变量、函数声明等。</li><li><code>libmysql/</code>：客户端库代码。</li><li><code>cmake/</code>：CMake 构建脚本。</li><li><code>scripts/</code>：安装和初始化脚本。</li><li><code>tests/</code>：测试代码。</li></ul></li><li><p><strong>核心文件</strong>：</p><ul><li><code>sql/mysqld.cc</code>：MySQL 服务端的入口文件，包含主函数 <code>main</code>。</li><li><code>sql/sql_parse.cc</code>：SQL 解析相关代码。</li><li><code>sql/sql_executor.cc</code>：SQL 执行相关代码。</li><li><code>storage/innobase/</code>：InnoDB 存储引擎的实现。</li></ul></li></ul><hr><h3 id="5.%20MySQL%20%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E4%B8%BB%E6%B5%81%E7%A8%8B" tabindex="-1"><strong>5. MySQL 服务端的主流程</strong> <a class="header-anchor" href="#5. MySQL 服务端的主流程" aria-label="Permalink to &quot;**5. MySQL 服务端的主流程**&quot;">​</a></h3><ul><li><p><strong>入口函数</strong>：</p><ul><li><code>mysqld.cc</code> 中的 <code>main</code> 函数是 MySQL 服务端的入口。</li><li>主要流程： <ol><li><strong>初始化</strong>： <ul><li>初始化日志、线程、SSL 等模块。</li></ul></li><li><strong>网络初始化</strong>： <ul><li>设置网络参数（如端口、地址重用等），并绑定监听端口。</li></ul></li><li><strong>事件循环</strong>： <ul><li>使用 IO 复用（如 <code>select</code>）处理客户端连接。</li><li>为每个连接创建线程，处理 SQL 请求。</li></ul></li><li><strong>清理资源</strong>： <ul><li>关闭连接，释放内存，退出服务。</li></ul></li></ol></li></ul></li><li><p><strong>网络模块</strong>：</p><ul><li>使用 <code>select</code> 实现 IO 复用，兼顾网络性能和磁盘 IO 的处理能力。</li><li>处理新连接时，调用 <code>accept</code> 接收客户端请求，并分配线程处理。</li></ul></li><li><p><strong>线程池管理</strong>：</p><ul><li>每个客户端连接对应一个线程。</li><li>线程池的大小可以通过配置文件调整。</li></ul></li></ul><hr><h3 id="6.%20%E9%98%85%E8%AF%BB%E6%BA%90%E7%A0%81%E7%9A%84%E5%BB%BA%E8%AE%AE" tabindex="-1"><strong>6. 阅读源码的建议</strong> <a class="header-anchor" href="#6. 阅读源码的建议" aria-label="Permalink to &quot;**6. 阅读源码的建议**&quot;">​</a></h3><ol><li><p><strong>明确目标</strong>：</p><ul><li>不要试图逐行阅读源码，而是聚焦于感兴趣的模块或功能。</li><li>例如： <ul><li>想了解网络通信，可以阅读 <code>mysqld.cc</code> 和相关网络模块代码。</li><li>想了解存储引擎，可以阅读 <code>storage/innobase</code> 中的代码。</li></ul></li></ul></li><li><p><strong>抓住主流程</strong>：</p><ul><li>先理解代码的主流程，再深入到具体实现。</li><li>例如： <ul><li>MySQL 的主流程是从 <code>main</code> 函数开始的，可以从这里入手。</li></ul></li></ul></li><li><p><strong>结合文档和资料</strong>：</p><ul><li>阅读源码时，可以结合官方文档或社区资料，帮助理解代码逻辑。</li></ul></li><li><p><strong>使用工具辅助</strong>：</p><ul><li>善用 Source Insight 的搜索、跳转、调用关系图等功能，提高阅读效率。</li></ul></li></ol><hr><h3 id="7.%20%E6%80%BB%E7%BB%93" tabindex="-1"><strong>7. 总结</strong> <a class="header-anchor" href="#7. 总结" aria-label="Permalink to &quot;**7. 总结**&quot;">​</a></h3><ul><li>阅读 MySQL 源码是深入理解数据库原理和提升编程能力的重要途径。</li><li>使用 Source Insight 或 VS Code 等工具，可以高效地查看和分析源码。</li><li>阅读源码时，应聚焦于核心模块和主流程，结合工具和资料，逐步深入。</li></ul><p>如果对某些模块或功能有具体的疑问，可以随时告诉我！</p>`,1403)]))}const Ds=i(gs,[["render",cs]]);export{bs as __pageData,Ds as default};
